(self["webpackJsonp"] = self["webpackJsonp"] || []).push([["vendors~panel-config-integrations"],{

/***/ "./node_modules/@polymer/app-route/app-route.js":
/*!******************************************************!*\
  !*** ./node_modules/@polymer/app-route/app-route.js ***!
  \******************************************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _polymer_polymer_polymer_legacy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @polymer/polymer/polymer-legacy.js */ \"./node_modules/@polymer/polymer/polymer-legacy.js\");\n/* harmony import */ var _polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @polymer/polymer/lib/legacy/polymer-fn.js */ \"./node_modules/@polymer/polymer/lib/legacy/polymer-fn.js\");\n/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n\n/**\n`app-route` is an element that enables declarative, self-describing routing\nfor a web app.\n\nIn its typical usage, a `app-route` element consumes an object that describes\nsome state about the current route, via the `route` property. It then parses\nthat state using the `pattern` property, and produces two artifacts: some `data`\nrelated to the `route`, and a `tail` that contains the rest of the `route` that\ndid not match.\n\nHere is a basic example, when used with `app-location`:\n\n    <app-location route=\"{{route}}\"></app-location>\n    <app-route\n        route=\"{{route}}\"\n        pattern=\"/:page\"\n        data=\"{{data}}\"\n        tail=\"{{tail}}\">\n    </app-route>\n\nIn the above example, the `app-location` produces a `route` value. Then, the\n`route.path` property is matched by comparing it to the `pattern` property. If\nthe `pattern` property matches `route.path`, the `app-route` will set or update\nits `data` property with an object whose properties correspond to the parameters\nin `pattern`. So, in the above example, if `route.path` was `'/about'`, the\nvalue of `data` would be `{\"page\": \"about\"}`.\n\nThe `tail` property represents the remaining part of the route state after the\n`pattern` has been applied to a matching `route`.\n\nHere is another example, where `tail` is used:\n\n    <app-location route=\"{{route}}\"></app-location>\n    <app-route\n        route=\"{{route}}\"\n        pattern=\"/:page\"\n        data=\"{{routeData}}\"\n        tail=\"{{subroute}}\">\n    </app-route>\n    <app-route\n        route=\"{{subroute}}\"\n        pattern=\"/:id\"\n        data=\"{{subrouteData}}\">\n    </app-route>\n\nIn the above example, there are two `app-route` elements. The first\n`app-route` consumes a `route`. When the `route` is matched, the first\n`app-route` also produces `routeData` from its `data`, and `subroute` from\nits `tail`. The second `app-route` consumes the `subroute`, and when it\nmatches, it produces an object called `subrouteData` from its `data`.\n\nSo, when `route.path` is `'/about'`, the `routeData` object will look like\nthis: `{ page: 'about' }`\n\nAnd `subrouteData` will be null. However, if `route.path` changes to\n`'/article/123'`, the `routeData` object will look like this:\n`{ page: 'article' }`\n\nAnd the `subrouteData` will look like this: `{ id: '123' }`\n\n`app-route` is responsive to bi-directional changes to the `data` objects\nthey produce. So, if `routeData.page` changed from `'article'` to `'about'`,\nthe `app-route` will update `route.path`. This in-turn will update the\n`app-location`, and cause the global location bar to change its value.\n\n@element app-route\n@demo demo/index.html\n@demo demo/data-loading-demo.html\n@demo demo/simple-demo.html\n*/\n\nObject(_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_1__[\"Polymer\"])({\n  is: 'app-route',\n  properties: {\n    /**\n     * The URL component managed by this element.\n     */\n    route: {\n      type: Object,\n      notify: true\n    },\n\n    /**\n     * The pattern of slash-separated segments to match `route.path` against.\n     *\n     * For example the pattern \"/foo\" will match \"/foo\" or \"/foo/bar\"\n     * but not \"/foobar\".\n     *\n     * Path segments like `/:named` are mapped to properties on the `data`\n     * object.\n     */\n    pattern: {\n      type: String\n    },\n\n    /**\n     * The parameterized values that are extracted from the route as\n     * described by `pattern`.\n     */\n    data: {\n      type: Object,\n      value: function () {\n        return {};\n      },\n      notify: true\n    },\n\n    /**\n     * Auto activate route if path empty\n     */\n    autoActivate: {\n      type: Boolean,\n      value: false\n    },\n    _queryParamsUpdating: {\n      type: Boolean,\n      value: false\n    },\n\n    /**\n     * @type {?Object}\n     */\n    queryParams: {\n      type: Object,\n      value: function () {\n        return {};\n      },\n      notify: true\n    },\n\n    /**\n     * The part of `route.path` NOT consumed by `pattern`.\n     */\n    tail: {\n      type: Object,\n      value: function () {\n        return {\n          path: null,\n          prefix: null,\n          __queryParams: null\n        };\n      },\n      notify: true\n    },\n\n    /**\n     * Whether the current route is active. True if `route.path` matches the\n     * `pattern`, false otherwise.\n     */\n    active: {\n      type: Boolean,\n      notify: true,\n      readOnly: true\n    },\n\n    /**\n     * @type {?string}\n     */\n    _matched: {\n      type: String,\n      value: ''\n    }\n  },\n  observers: ['__tryToMatch(route.path, pattern)', '__updatePathOnDataChange(data.*)', '__tailPathChanged(tail.path)', '__routeQueryParamsChanged(route.__queryParams)', '__tailQueryParamsChanged(tail.__queryParams)', '__queryParamsChanged(queryParams.*)'],\n  created: function () {\n    this.linkPaths('route.__queryParams', 'tail.__queryParams');\n    this.linkPaths('tail.__queryParams', 'route.__queryParams');\n  },\n\n  /**\n   * Deal with the query params object being assigned to wholesale.\n   */\n  __routeQueryParamsChanged: function (queryParams) {\n    if (queryParams && this.tail) {\n      if (this.tail.__queryParams !== queryParams) {\n        this.set('tail.__queryParams', queryParams);\n      }\n\n      if (!this.active || this._queryParamsUpdating) {\n        return;\n      } // Copy queryParams and track whether there are any differences compared\n      // to the existing query params.\n\n\n      var copyOfQueryParams = {};\n      var anythingChanged = false;\n\n      for (var key in queryParams) {\n        copyOfQueryParams[key] = queryParams[key];\n\n        if (anythingChanged || !this.queryParams || queryParams[key] !== this.queryParams[key]) {\n          anythingChanged = true;\n        }\n      } // Need to check whether any keys were deleted\n\n\n      for (var key in this.queryParams) {\n        if (anythingChanged || !(key in queryParams)) {\n          anythingChanged = true;\n          break;\n        }\n      }\n\n      if (!anythingChanged) {\n        return;\n      }\n\n      this._queryParamsUpdating = true;\n      this.set('queryParams', copyOfQueryParams);\n      this._queryParamsUpdating = false;\n    }\n  },\n  __tailQueryParamsChanged: function (queryParams) {\n    if (queryParams && this.route && this.route.__queryParams != queryParams) {\n      this.set('route.__queryParams', queryParams);\n    }\n  },\n  __queryParamsChanged: function (changes) {\n    if (!this.active || this._queryParamsUpdating) {\n      return;\n    }\n\n    this.set('route.__' + changes.path, changes.value);\n  },\n  __resetProperties: function () {\n    this._setActive(false);\n\n    this._matched = null;\n  },\n  __tryToMatch: function () {\n    if (!this.route) {\n      return;\n    }\n\n    var path = this.route.path;\n    var pattern = this.pattern;\n\n    if (this.autoActivate && path === '') {\n      path = '/';\n    }\n\n    if (!pattern) {\n      return;\n    }\n\n    if (!path) {\n      this.__resetProperties();\n\n      return;\n    }\n\n    var remainingPieces = path.split('/');\n    var patternPieces = pattern.split('/');\n    var matched = [];\n    var namedMatches = {};\n\n    for (var i = 0; i < patternPieces.length; i++) {\n      var patternPiece = patternPieces[i];\n\n      if (!patternPiece && patternPiece !== '') {\n        break;\n      }\n\n      var pathPiece = remainingPieces.shift(); // We don't match this path.\n\n      if (!pathPiece && pathPiece !== '') {\n        this.__resetProperties();\n\n        return;\n      }\n\n      matched.push(pathPiece);\n\n      if (patternPiece.charAt(0) == ':') {\n        namedMatches[patternPiece.slice(1)] = pathPiece;\n      } else if (patternPiece !== pathPiece) {\n        this.__resetProperties();\n\n        return;\n      }\n    }\n\n    this._matched = matched.join('/'); // Properties that must be updated atomically.\n\n    var propertyUpdates = {}; // this.active\n\n    if (!this.active) {\n      propertyUpdates.active = true;\n    } // this.tail\n\n\n    var tailPrefix = this.route.prefix + this._matched;\n    var tailPath = remainingPieces.join('/');\n\n    if (remainingPieces.length > 0) {\n      tailPath = '/' + tailPath;\n    }\n\n    if (!this.tail || this.tail.prefix !== tailPrefix || this.tail.path !== tailPath) {\n      propertyUpdates.tail = {\n        prefix: tailPrefix,\n        path: tailPath,\n        __queryParams: this.route.__queryParams\n      };\n    } // this.data\n\n\n    propertyUpdates.data = namedMatches;\n    this._dataInUrl = {};\n\n    for (var key in namedMatches) {\n      this._dataInUrl[key] = namedMatches[key];\n    }\n\n    if (this.setProperties) {\n      // atomic update\n      this.setProperties(propertyUpdates, true);\n    } else {\n      this.__setMulti(propertyUpdates);\n    }\n  },\n  __tailPathChanged: function (path) {\n    if (!this.active) {\n      return;\n    }\n\n    var tailPath = path;\n    var newPath = this._matched;\n\n    if (tailPath) {\n      if (tailPath.charAt(0) !== '/') {\n        tailPath = '/' + tailPath;\n      }\n\n      newPath += tailPath;\n    }\n\n    this.set('route.path', newPath);\n  },\n  __updatePathOnDataChange: function () {\n    if (!this.route || !this.active) {\n      return;\n    }\n\n    var newPath = this.__getLink({});\n\n    var oldPath = this.__getLink(this._dataInUrl);\n\n    if (newPath === oldPath) {\n      return;\n    }\n\n    this.set('route.path', newPath);\n  },\n  __getLink: function (overrideValues) {\n    var values = {\n      tail: null\n    };\n\n    for (var key in this.data) {\n      values[key] = this.data[key];\n    }\n\n    for (var key in overrideValues) {\n      values[key] = overrideValues[key];\n    }\n\n    var patternPieces = this.pattern.split('/');\n    var interp = patternPieces.map(function (value) {\n      if (value[0] == ':') {\n        value = values[value.slice(1)];\n      }\n\n      return value;\n    }, this);\n\n    if (values.tail && values.tail.path) {\n      if (interp.length > 0 && values.tail.path.charAt(0) === '/') {\n        interp.push(values.tail.path.slice(1));\n      } else {\n        interp.push(values.tail.path);\n      }\n    }\n\n    return interp.join('/');\n  },\n  __setMulti: function (setObj) {\n    // HACK(rictic): skirting around 1.0's lack of a setMulti by poking at\n    //     internal data structures. I would not advise that you copy this\n    //     example.\n    //\n    //     In the future this will be a feature of Polymer itself.\n    //     See: https://github.com/Polymer/polymer/issues/3640\n    //\n    //     Hacking around with private methods like this is juggling footguns,\n    //     and is likely to have unexpected and unsupported rough edges.\n    //\n    //     Be ye so warned.\n    for (var property in setObj) {\n      this._propertySetter(property, setObj[property]);\n    } // notify in a specific order\n\n\n    if (setObj.data !== undefined) {\n      this._pathEffector('data', this.data);\n\n      this._notifyChange('data');\n    }\n\n    if (setObj.active !== undefined) {\n      this._pathEffector('active', this.active);\n\n      this._notifyChange('active');\n    }\n\n    if (setObj.tail !== undefined) {\n      this._pathEffector('tail', this.tail);\n\n      this._notifyChange('tail');\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@polymer/app-route/app-route.js\n");

/***/ })

}]);