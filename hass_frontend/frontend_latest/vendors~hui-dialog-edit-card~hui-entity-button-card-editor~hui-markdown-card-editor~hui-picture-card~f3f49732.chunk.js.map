{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js","webpack:///./node_modules/@polymer/paper-input/paper-textarea.js"],"names":["Polymer","_template","html","is","behaviors","IronValidatableBehavior","IronControlState","properties","value","observer","type","String","notify","bindValue","rows","Number","maxRows","autocomplete","autofocus","Boolean","inputmode","placeholder","readonly","required","minlength","maxlength","label","listeners","textarea","$","selectionStart","selectionEnd","attached","IS_IOS","navigator","userAgent","match","style","marginLeft","validate","valid","validity","hasValidator","call","invalid","fire","_bindValueChanged","_valueChanged","mirror","innerHTML","_valueForMirror","_onInput","event","eventPath","dom","path","target","_constrain","tokens","_tokens","length","slice","push","join","input","replace","split","_updateCached","PaperInputBehavior","IronFormElementBehavior","_ariaLabelledBy","_ariaDescribedBy","start","end","_ariaLabelledByChanged","ariaLabelledBy","_focusableElement","setAttribute","_ariaDescribedByChanged","ariaDescribedBy","inputElement"],"mappings":"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","file":"vendors~hui-dialog-edit-card~hui-entity-button-card-editor~hui-markdown-card-editor~hui-picture-card~f3f49732.chunk.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\n\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-autogrow-textarea` is an element containing a textarea that grows in\nheight as more lines of input are entered. Unless an explicit height or the\n`maxRows` property is set, it will never scroll.\n\nExample:\n\n    <iron-autogrow-textarea></iron-autogrow-textarea>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--iron-autogrow-textarea` | Mixin applied to the textarea | `{}`\n`--iron-autogrow-textarea-placeholder` | Mixin applied to the textarea placeholder | `{}`\n\n@group Iron Elements\n@hero hero.svg\n@demo demo/index.html\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: relative;\n        width: 400px;\n        border: 1px solid;\n        padding: 2px;\n        -moz-appearance: textarea;\n        -webkit-appearance: textarea;\n        overflow: hidden;\n      }\n\n      .mirror-text {\n        visibility: hidden;\n        word-wrap: break-word;\n        @apply --iron-autogrow-textarea;\n      }\n\n      .fit {\n        @apply --layout-fit;\n      }\n\n      textarea {\n        position: relative;\n        outline: none;\n        border: none;\n        resize: none;\n        background: inherit;\n        color: inherit;\n        /* see comments in template */\n        width: 100%;\n        height: 100%;\n        font-size: inherit;\n        font-family: inherit;\n        line-height: inherit;\n        text-align: inherit;\n        @apply --iron-autogrow-textarea;\n      }\n\n      textarea::-webkit-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea::-moz-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n\n      textarea:-ms-input-placeholder {\n        @apply --iron-autogrow-textarea-placeholder;\n      }\n    </style>\n\n    <!-- the mirror sizes the input/textarea so it grows with typing -->\n    <!-- use &#160; instead &nbsp; of to allow this element to be used in XHTML -->\n    <div id=\"mirror\" class=\"mirror-text\" aria-hidden=\"true\">&nbsp;</div>\n\n    <!-- size the input/textarea with a div, because the textarea has intrinsic size in ff -->\n    <div class=\"textarea-container fit\">\n      <textarea id=\"textarea\" name\\$=\"[[name]]\" aria-label\\$=\"[[label]]\" autocomplete\\$=\"[[autocomplete]]\" autofocus\\$=\"[[autofocus]]\" inputmode\\$=\"[[inputmode]]\" placeholder\\$=\"[[placeholder]]\" readonly\\$=\"[[readonly]]\" required\\$=\"[[required]]\" disabled\\$=\"[[disabled]]\" rows\\$=\"[[rows]]\" minlength\\$=\"[[minlength]]\" maxlength\\$=\"[[maxlength]]\"></textarea>\n    </div>\n`,\n\n  is: 'iron-autogrow-textarea',\n  behaviors: [IronValidatableBehavior, IronControlState],\n\n  properties: {\n    /**\n     * Use this property instead of `bind-value` for two-way data binding.\n     * @type {string|number}\n     */\n    value: {observer: '_valueChanged', type: String, notify: true},\n\n    /**\n     * This property is deprecated, and just mirrors `value`. Use `value`\n     * instead.\n     * @type {string|number}\n     */\n    bindValue: {observer: '_bindValueChanged', type: String, notify: true},\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type number\n     * @default 1\n     */\n    rows: {type: Number, value: 1, observer: '_updateCached'},\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type number\n     * @default 0\n     */\n    maxRows: {type: Number, value: 0, observer: '_updateCached'},\n\n    /**\n     * Bound to the textarea's `autocomplete` attribute.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * Bound to the textarea's `autofocus` attribute.\n     */\n    autofocus: {type: Boolean, value: false},\n\n    /**\n     * Bound to the textarea's `inputmode` attribute.\n     */\n    inputmode: {type: String},\n\n    /**\n     * Bound to the textarea's `placeholder` attribute.\n     */\n    placeholder: {type: String},\n\n    /**\n     * Bound to the textarea's `readonly` attribute.\n     */\n    readonly: {type: String},\n\n    /**\n     * Set to true to mark the textarea as required.\n     */\n    required: {type: Boolean},\n\n    /**\n     * The minimum length of the input value.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * Bound to the textarea's `aria-label` attribute.\n     */\n    label: {type: String}\n\n  },\n\n  listeners: {'input': '_onInput'},\n\n  /**\n   * Returns the underlying textarea.\n   * @return {!HTMLTextAreaElement}\n   */\n  get textarea() {\n    return this.$.textarea;\n  },\n\n  /**\n   * Returns textarea's selection start.\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.textarea.selectionStart;\n  },\n\n  /**\n   * Returns textarea's selection end.\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.textarea.selectionEnd;\n  },\n\n  /**\n   * Sets the textarea's selection start.\n   */\n  set selectionStart(value) {\n    this.$.textarea.selectionStart = value;\n  },\n\n  /**\n   * Sets the textarea's selection end.\n   */\n  set selectionEnd(value) {\n    this.$.textarea.selectionEnd = value;\n  },\n\n  attached: function() {\n    /* iOS has an arbitrary left margin of 3px that isn't present\n     * in any other browser, and means that the paper-textarea's cursor\n     * overlaps the label.\n     * See https://github.com/PolymerElements/paper-input/issues/468.\n     */\n    var IS_IOS = navigator.userAgent.match(/iP(?:[oa]d|hone)/);\n    if (IS_IOS) {\n      this.$.textarea.style.marginLeft = '-3px';\n    }\n  },\n\n  /**\n   * Returns true if `value` is valid. The validator provided in `validator`\n   * will be used first, if it exists; otherwise, the `textarea`'s validity\n   * is used.\n   * @return {boolean} True if the value is valid.\n   */\n  validate: function() {\n    // Use the nested input's native validity.\n    var valid = this.$.textarea.validity.valid;\n\n    // Only do extra checking if the browser thought this was valid.\n    if (valid) {\n      // Empty, required input is invalid\n      if (this.required && this.value === '') {\n        valid = false;\n      } else if (this.hasValidator()) {\n        valid = IronValidatableBehavior.validate.call(this, this.value);\n      }\n    }\n\n    this.invalid = !valid;\n    this.fire('iron-input-validate');\n    return valid;\n  },\n\n  _bindValueChanged: function(bindValue) {\n    this.value = bindValue;\n  },\n\n  _valueChanged: function(value) {\n    var textarea = this.textarea;\n    if (!textarea) {\n      return;\n    }\n\n    // If the bindValue changed manually, then we need to also update\n    // the underlying textarea's value. Otherwise this change was probably\n    // generated from the _onInput handler, and the two values are already\n    // the same.\n    if (textarea.value !== value) {\n      textarea.value = !(value || value === 0) ? '' : value;\n    }\n\n    this.bindValue = value;\n    this.$.mirror.innerHTML = this._valueForMirror();\n\n    // Manually notify because we don't want to notify until after setting\n    // value.\n    this.fire('bind-value-changed', {value: this.bindValue});\n  },\n\n  _onInput: function(event) {\n    var eventPath = dom(event).path;\n    this.value = eventPath ? eventPath[0].value : event.target.value;\n  },\n\n  _constrain: function(tokens) {\n    var _tokens;\n    tokens = tokens || [''];\n    // Enforce the min and max heights for a multiline input to avoid\n    // measurement\n    if (this.maxRows > 0 && tokens.length > this.maxRows) {\n      _tokens = tokens.slice(0, this.maxRows);\n    } else {\n      _tokens = tokens.slice(0);\n    }\n    while (this.rows > 0 && _tokens.length < this.rows) {\n      _tokens.push('');\n    }\n    // Use &#160; instead &nbsp; of to allow this element to be used in XHTML.\n    return _tokens.join('<br/>') + '&#160;';\n  },\n\n  _valueForMirror: function() {\n    var input = this.textarea;\n    if (!input) {\n      return;\n    }\n    this.tokens = (input && input.value) ? input.value.replace(/&/gm, '&amp;')\n                                               .replace(/\"/gm, '&quot;')\n                                               .replace(/'/gm, '&#39;')\n                                               .replace(/</gm, '&lt;')\n                                               .replace(/>/gm, '&gt;')\n                                               .split('\\n') :\n                                           [''];\n    return this._constrain(this.tokens);\n  },\n\n  _updateCached: function() {\n    this.$.mirror.innerHTML = this._constrain(this.tokens);\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js';\nimport './paper-input-char-counter.js';\nimport './paper-input-container.js';\nimport './paper-input-error.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputBehavior} from './paper-input-behavior.js';\n\n/*\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      label {\n        pointer-events: none;\n      }\n    </style>\n\n    <paper-input-container no-label-float$=\"[[noLabelFloat]]\" always-float-label=\"[[_computeAlwaysFloatLabel(alwaysFloatLabel,placeholder)]]\" auto-validate$=\"[[autoValidate]]\" disabled$=\"[[disabled]]\" invalid=\"[[invalid]]\">\n\n      <label hidden$=\"[[!label]]\" aria-hidden=\"true\" for$=\"[[_inputId]]\" slot=\"label\">[[label]]</label>\n\n      <iron-autogrow-textarea class=\"paper-input-input\" slot=\"input\" id$=\"[[_inputId]]\" aria-labelledby$=\"[[_ariaLabelledBy]]\" aria-describedby$=\"[[_ariaDescribedBy]]\" bind-value=\"{{value}}\" invalid=\"{{invalid}}\" validator$=\"[[validator]]\" disabled$=\"[[disabled]]\" autocomplete$=\"[[autocomplete]]\" autofocus$=\"[[autofocus]]\" inputmode$=\"[[inputmode]]\" name$=\"[[name]]\" placeholder$=\"[[placeholder]]\" readonly$=\"[[readonly]]\" required$=\"[[required]]\" minlength$=\"[[minlength]]\" maxlength$=\"[[maxlength]]\" autocapitalize$=\"[[autocapitalize]]\" rows$=\"[[rows]]\" max-rows$=\"[[maxRows]]\" on-change=\"_onChange\"></iron-autogrow-textarea>\n\n      <template is=\"dom-if\" if=\"[[errorMessage]]\">\n        <paper-input-error aria-live=\"assertive\" slot=\"add-on\">[[errorMessage]]</paper-input-error>\n      </template>\n\n      <template is=\"dom-if\" if=\"[[charCounter]]\">\n        <paper-input-char-counter slot=\"add-on\"></paper-input-char-counter>\n      </template>\n\n    </paper-input-container>\n`,\n\n  is: 'paper-textarea',\n\n  behaviors: [\n    PaperInputBehavior,\n    IronFormElementBehavior,\n  ],\n\n  properties: {\n    _ariaLabelledBy: {\n      observer: '_ariaLabelledByChanged',\n      type: String,\n    },\n\n    _ariaDescribedBy: {\n      observer: '_ariaDescribedByChanged',\n      type: String,\n    },\n\n    value: {\n      // Required for the correct TypeScript type-generation\n      type: String,\n    },\n\n    /**\n     * The initial number of rows.\n     *\n     * @attribute rows\n     * @type {number}\n     * @default 1\n     */\n    rows: {\n      type: Number,\n      value: 1,\n    },\n\n    /**\n     * The maximum number of rows this element can grow to until it\n     * scrolls. 0 means no maximum.\n     *\n     * @attribute maxRows\n     * @type {number}\n     * @default 0\n     */\n    maxRows: {\n      type: Number,\n      value: 0,\n    },\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionStart() {\n    return this.$.input.textarea.selectionStart;\n  },\n\n  set selectionStart(start) {\n    this.$.input.textarea.selectionStart = start;\n  },\n\n  /**\n   * @return {number}\n   */\n  get selectionEnd() {\n    return this.$.input.textarea.selectionEnd;\n  },\n\n  set selectionEnd(end) {\n    this.$.input.textarea.selectionEnd = end;\n  },\n\n  _ariaLabelledByChanged: function(ariaLabelledBy) {\n    this._focusableElement.setAttribute('aria-labelledby', ariaLabelledBy);\n  },\n\n  _ariaDescribedByChanged: function(ariaDescribedBy) {\n    this._focusableElement.setAttribute('aria-describedby', ariaDescribedBy);\n  },\n\n  get _focusableElement() {\n    return this.inputElement.textarea;\n  }\n});\n"],"sourceRoot":""}