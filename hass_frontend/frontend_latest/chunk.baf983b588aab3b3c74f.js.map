{"version":3,"sources":["webpack:///./node_modules/@polymer/paper-item/paper-item-body.js","webpack:///./node_modules/@polymer/paper-item/paper-icon-item.js","webpack:///./node_modules/@polymer/iron-scroll-target-behavior/iron-scroll-target-behavior.js","webpack:///../src/error.js","webpack:///../node_modules/kind-of/index.js","webpack:///../src/constants.js","webpack:///../src/utils.js","webpack:///../src/kinds.js","webpack:///../src/types.js","webpack:///../src/superstruct.js","webpack:///../src/index.js"],"names":["__webpack_require__","_polymer_polymer_lib_legacy_polymer_fn_js__WEBPACK_IMPORTED_MODULE_4__","_polymer_polymer_lib_utils_html_tag_js__WEBPACK_IMPORTED_MODULE_5__","Polymer","_template","html","is","_paper_item_behavior_js__WEBPACK_IMPORTED_MODULE_6__","behaviors","PaperItemBehavior","d","__webpack_exports__","IronScrollTargetBehavior","_polymer_polymer_lib_legacy_polymer_dom_js__WEBPACK_IMPORTED_MODULE_1__","properties","scrollTarget","type","HTMLElement","value","this","_defaultScrollTarget","observers","_shouldHaveListener","_scrollTargetChanged","isAttached","_oldScrollTarget","_toggleScrollListener","_doc","domHost","$","dom","ownerDocument","querySelector","_isValidScrollTarget","_scrollHandler","documentElement","_scrollTop","window","pageYOffset","scrollTop","_scrollLeft","pageXOffset","scrollLeft","top","scrollTo","left","scroll","leftOrOptions","_scrollTargetWidth","innerWidth","offsetWidth","_scrollTargetHeight","innerHeight","offsetHeight","yes","eventTarget","_boundScrollHandler","bind","addEventListener","removeEventListener","toggleScrollListener","superstruct","StructError","TypeError","attrs","path","JSON","data","reason","errors","length","push","Error","captureStackTrace","constructor","stack","toString","Object","prototype","kindOf","val","ctorName","Array","isArray","isBuffer","callee","err","message","indexOf","isArguments","Date","toDateString","getDate","setDate","isDate","stackTraceLimit","isError","RegExp","flags","ignoreCase","multiline","global","isRegexp","throw","return","next","isGeneratorObj","call","slice","toLowerCase","replace","name","IS_STRUCT","KIND","isStruct","resolveDefaults","defaults","Kind","validate","any","schema","defaults$$1","options","tuple","list","func","object","required","union","intersection","scalar","optional","en","map","s","e","String","join","undefined","result","isValid","failure","_extends","array","element","error","ret","i","v","r","forEach","singleE","concat","first","obj","ks","key","kind","valueKeys","propertiesKeys","Set","types","fn","kinds","k","Math","t","Kinds","dict","keys","values","resolved","e2","r2","enums","instance","lazy","struct","literal","partial","createSchema","Types","config","Struct","defineProperty","assert","test","TYPES","isNaN"],"mappings":"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","file":"chunk.baf983b588aab3b3c74f.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/*\nUse `<paper-item-body>` in a `<paper-item>` or `<paper-icon-item>` to make two-\nor three- line items. It is a flex item that is a vertical flexbox.\n\n    <paper-item>\n      <paper-item-body two-line>\n        <div>Show your status</div>\n        <div secondary>Your status is visible to everyone</div>\n      </paper-item-body>\n    </paper-item>\n\nThe child elements with the `secondary` attribute is given secondary text\nstyling.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-body-two-line-min-height` | Minimum height of a two-line item | `72px`\n`--paper-item-body-three-line-min-height` | Minimum height of a three-line item | `88px`\n`--paper-item-body-secondary-color` | Foreground color for the `secondary` area | `--secondary-text-color`\n`--paper-item-body-secondary` | Mixin applied to the `secondary` area | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        overflow: hidden; /* needed for text-overflow: ellipsis to work on ff */\n        @apply --layout-vertical;\n        @apply --layout-center-justified;\n        @apply --layout-flex;\n      }\n\n      :host([two-line]) {\n        min-height: var(--paper-item-body-two-line-min-height, 72px);\n      }\n\n      :host([three-line]) {\n        min-height: var(--paper-item-body-three-line-min-height, 88px);\n      }\n\n      :host > ::slotted(*) {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n      }\n\n      :host > ::slotted([secondary]) {\n        @apply --paper-font-body1;\n\n        color: var(--paper-item-body-secondary-color, var(--secondary-text-color));\n\n        @apply --paper-item-body-secondary;\n      }\n    </style>\n\n    <slot></slot>\n`,\n\n  is: 'paper-item-body'\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/typography.js';\nimport './paper-item-shared-styles.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperItemBehavior} from './paper-item-behavior.js';\n\n/*\n`<paper-icon-item>` is a convenience element to make an item with icon. It is an\ninteractive list item with a fixed-width icon area, according to Material\nDesign. This is useful if the icons are of varying widths, but you want the item\nbodies to line up. Use this like a `<paper-item>`. The child node with the slot\nname `item-icon` is placed in the icon area.\n\n    <paper-icon-item>\n      <iron-icon icon=\"favorite\" slot=\"item-icon\"></iron-icon>\n      Favorite\n    </paper-icon-item>\n    <paper-icon-item>\n      <div class=\"avatar\" slot=\"item-icon\"></div>\n      Avatar\n    </paper-icon-item>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-item-icon-width` | Width of the icon area | `56px`\n`--paper-item-icon` | Mixin applied to the icon area | `{}`\n`--paper-icon-item` | Mixin applied to the item | `{}`\n`--paper-item-selected-weight` | The font weight of a selected item | `bold`\n`--paper-item-selected` | Mixin applied to selected paper-items | `{}`\n`--paper-item-disabled-color` | The color for disabled paper-items | `--disabled-text-color`\n`--paper-item-disabled` | Mixin applied to disabled paper-items | `{}`\n`--paper-item-focused` | Mixin applied to focused paper-items | `{}`\n`--paper-item-focused-before` | Mixin applied to :before focused paper-items | `{}`\n\n*/\nPolymer({\n  _template: html`\n    <style include=\"paper-item-shared-styles\"></style>\n    <style>\n      :host {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        @apply --paper-font-subhead;\n\n        @apply --paper-item;\n        @apply --paper-icon-item;\n      }\n\n      .content-icon {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n\n        width: var(--paper-item-icon-width, 56px);\n        @apply --paper-item-icon;\n      }\n    </style>\n\n    <div id=\"contentIcon\" class=\"content-icon\">\n      <slot name=\"item-icon\"></slot>\n    </div>\n    <slot></slot>\n`,\n\n  is: 'paper-icon-item',\n  behaviors: [PaperItemBehavior]\n});\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\n\n/**\n * `Polymer.IronScrollTargetBehavior` allows an element to respond to scroll\n * events from a designated scroll target.\n *\n * Elements that consume this behavior can override the `_scrollHandler`\n * method to add logic on the scroll event.\n *\n * @demo demo/scrolling-region.html Scrolling Region\n * @demo demo/document.html Document Element\n * @polymerBehavior\n */\nexport const IronScrollTargetBehavior = {\n\n  properties: {\n\n    /**\n     * Specifies the element that will handle the scroll event\n     * on the behalf of the current element. This is typically a reference to an\n     *element, but there are a few more posibilities:\n     *\n     * ### Elements id\n     *\n     *```html\n     * <div id=\"scrollable-element\" style=\"overflow: auto;\">\n     *  <x-element scroll-target=\"scrollable-element\">\n     *    <!-- Content-->\n     *  </x-element>\n     * </div>\n     *```\n     * In this case, the `scrollTarget` will point to the outer div element.\n     *\n     * ### Document scrolling\n     *\n     * For document scrolling, you can use the reserved word `document`:\n     *\n     *```html\n     * <x-element scroll-target=\"document\">\n     *   <!-- Content -->\n     * </x-element>\n     *```\n     *\n     * ### Elements reference\n     *\n     *```js\n     * appHeader.scrollTarget = document.querySelector('#scrollable-element');\n     *```\n     *\n     * @type {HTMLElement}\n     * @default document\n     */\n    scrollTarget: {\n      type: HTMLElement,\n      value: function() {\n        return this._defaultScrollTarget;\n      }\n    }\n  },\n\n  observers: ['_scrollTargetChanged(scrollTarget, isAttached)'],\n\n  /**\n   * True if the event listener should be installed.\n   */\n  _shouldHaveListener: true,\n\n  _scrollTargetChanged: function(scrollTarget, isAttached) {\n    var eventTarget;\n\n    if (this._oldScrollTarget) {\n      this._toggleScrollListener(false, this._oldScrollTarget);\n      this._oldScrollTarget = null;\n    }\n    if (!isAttached) {\n      return;\n    }\n    // Support element id references\n    if (scrollTarget === 'document') {\n      this.scrollTarget = this._doc;\n\n    } else if (typeof scrollTarget === 'string') {\n      var domHost = this.domHost;\n\n      this.scrollTarget = domHost && domHost.$ ?\n          domHost.$[scrollTarget] :\n          dom(this.ownerDocument).querySelector('#' + scrollTarget);\n\n    } else if (this._isValidScrollTarget()) {\n      this._oldScrollTarget = scrollTarget;\n      this._toggleScrollListener(this._shouldHaveListener, scrollTarget);\n    }\n  },\n\n  /**\n   * Runs on every scroll event. Consumer of this behavior may override this\n   * method.\n   *\n   * @protected\n   */\n  _scrollHandler: function scrollHandler() {},\n\n  /**\n   * The default scroll target. Consumers of this behavior may want to customize\n   * the default scroll target.\n   *\n   * @type {Element}\n   */\n  get _defaultScrollTarget() {\n    return this._doc;\n  },\n\n  /**\n   * Shortcut for the document element\n   *\n   * @type {Element}\n   */\n  get _doc() {\n    return this.ownerDocument.documentElement;\n  },\n\n  /**\n   * Gets the number of pixels that the content of an element is scrolled\n   * upward.\n   *\n   * @type {number}\n   */\n  get _scrollTop() {\n    if (this._isValidScrollTarget()) {\n      return this.scrollTarget === this._doc ? window.pageYOffset :\n                                               this.scrollTarget.scrollTop;\n    }\n    return 0;\n  },\n\n  /**\n   * Gets the number of pixels that the content of an element is scrolled to the\n   * left.\n   *\n   * @type {number}\n   */\n  get _scrollLeft() {\n    if (this._isValidScrollTarget()) {\n      return this.scrollTarget === this._doc ? window.pageXOffset :\n                                               this.scrollTarget.scrollLeft;\n    }\n    return 0;\n  },\n\n  /**\n   * Sets the number of pixels that the content of an element is scrolled\n   * upward.\n   *\n   * @type {number}\n   */\n  set _scrollTop(top) {\n    if (this.scrollTarget === this._doc) {\n      window.scrollTo(window.pageXOffset, top);\n    } else if (this._isValidScrollTarget()) {\n      this.scrollTarget.scrollTop = top;\n    }\n  },\n\n  /**\n   * Sets the number of pixels that the content of an element is scrolled to the\n   * left.\n   *\n   * @type {number}\n   */\n  set _scrollLeft(left) {\n    if (this.scrollTarget === this._doc) {\n      window.scrollTo(left, window.pageYOffset);\n    } else if (this._isValidScrollTarget()) {\n      this.scrollTarget.scrollLeft = left;\n    }\n  },\n\n  /**\n   * Scrolls the content to a particular place.\n   *\n   * @method scroll\n   * @param {number|!{left: number, top: number}} leftOrOptions The left position or scroll options\n   * @param {number=} top The top position\n   * @return {void}\n   */\n  scroll: function(leftOrOptions, top) {\n    var left;\n\n    if (typeof leftOrOptions === 'object') {\n      left = leftOrOptions.left;\n      top = leftOrOptions.top;\n    } else {\n      left = leftOrOptions;\n    }\n\n    left = left || 0;\n    top = top || 0;\n    if (this.scrollTarget === this._doc) {\n      window.scrollTo(left, top);\n    } else if (this._isValidScrollTarget()) {\n      this.scrollTarget.scrollLeft = left;\n      this.scrollTarget.scrollTop = top;\n    }\n  },\n\n  /**\n   * Gets the width of the scroll target.\n   *\n   * @type {number}\n   */\n  get _scrollTargetWidth() {\n    if (this._isValidScrollTarget()) {\n      return this.scrollTarget === this._doc ? window.innerWidth :\n                                               this.scrollTarget.offsetWidth;\n    }\n    return 0;\n  },\n\n  /**\n   * Gets the height of the scroll target.\n   *\n   * @type {number}\n   */\n  get _scrollTargetHeight() {\n    if (this._isValidScrollTarget()) {\n      return this.scrollTarget === this._doc ? window.innerHeight :\n                                               this.scrollTarget.offsetHeight;\n    }\n    return 0;\n  },\n\n  /**\n   * Returns true if the scroll target is a valid HTMLElement.\n   *\n   * @return {boolean}\n   */\n  _isValidScrollTarget: function() {\n    return this.scrollTarget instanceof HTMLElement;\n  },\n\n  _toggleScrollListener: function(yes, scrollTarget) {\n    var eventTarget = scrollTarget === this._doc ? window : scrollTarget;\n    if (yes) {\n      if (!this._boundScrollHandler) {\n        this._boundScrollHandler = this._scrollHandler.bind(this);\n        eventTarget.addEventListener('scroll', this._boundScrollHandler);\n      }\n    } else {\n      if (this._boundScrollHandler) {\n        eventTarget.removeEventListener('scroll', this._boundScrollHandler);\n        this._boundScrollHandler = null;\n      }\n    }\n  },\n\n  /**\n   * Enables or disables the scroll event listener.\n   *\n   * @param {boolean} yes True to add the event, False to remove it.\n   */\n  toggleScrollListener: function(yes) {\n    this._shouldHaveListener = yes;\n    this._toggleScrollListener(yes, this.scrollTarget);\n  }\n\n};\n","/**\n * Define a struct error.\n *\n * @type {StructError}\n */\n\nclass StructError extends TypeError {\n  static format(attrs) {\n    const { type, path, value } = attrs\n    const message = `Expected a value of type \\`${type}\\`${\n      path.length ? ` for \\`${path.join('.')}\\`` : ''\n    } but received \\`${JSON.stringify(value)}\\`.`\n    return message\n  }\n\n  constructor(attrs) {\n    const message = StructError.format(attrs)\n    super(message)\n\n    const { data, path, value, reason, type, errors = [] } = attrs\n    this.data = data\n    this.path = path\n    this.value = value\n    this.reason = reason\n    this.type = type\n    this.errors = errors\n\n    if (!errors.length) {\n      errors.push(this)\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {StructError}\n */\n\nexport default StructError\n","var toString = Object.prototype.toString;\n\nmodule.exports = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n","/**\n * A private string to identify structs by.\n *\n * @type {String}\n */\n\nconst IS_STRUCT = '@@__STRUCT__@@'\n\n/**\n * A private string to refer to a struct's kind.\n *\n * @type {String}\n */\n\nconst KIND = '@@__KIND__@@'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport { IS_STRUCT, KIND }\n","import { IS_STRUCT } from './constants'\n\n/**\n * Check if a `value` is a struct.\n *\n * @param {Any} value\n * @return {Boolean}\n */\n\nexport function isStruct(value) {\n  return !!(value && value[IS_STRUCT])\n}\n\n/**\n * Resolve `defaults`, for an optional `value`.\n *\n * @param {Function|Any} defaults\n * @param {Any} value\n * @return {Any}\n */\n\nexport function resolveDefaults(defaults, value) {\n  return typeof defaults === 'function' ? defaults(value) : defaults\n}\n","import kindOf from 'kind-of'\n\nimport { KIND } from './constants'\nimport { isStruct, resolveDefaults } from './utils'\n\n/**\n * Kind.\n *\n * @type {Kind}\n */\n\nclass Kind {\n  constructor(name, type, validate) {\n    this.name = name\n    this.type = type\n    this.validate = validate\n  }\n}\n\n/**\n * Any.\n *\n * @param {Array|Function|Object|String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction any(schema, defaults, options) {\n  if (isStruct(schema)) {\n    return schema[KIND]\n  }\n\n  if (schema instanceof Kind) {\n    return schema\n  }\n\n  switch (kindOf(schema)) {\n    case 'array': {\n      return schema.length > 1\n        ? tuple(schema, defaults, options)\n        : list(schema, defaults, options)\n    }\n\n    case 'function': {\n      return func(schema, defaults, options)\n    }\n\n    case 'object': {\n      return object(schema, defaults, options)\n    }\n\n    case 'string': {\n      let required = true\n      let type\n\n      if (schema.endsWith('?')) {\n        required = false\n        schema = schema.slice(0, -1)\n      }\n\n      if (schema.includes('|')) {\n        const scalars = schema.split(/\\s*\\|\\s*/g)\n        type = union(scalars, defaults, options)\n      } else if (schema.includes('&')) {\n        const scalars = schema.split(/\\s*&\\s*/g)\n        type = intersection(scalars, defaults, options)\n      } else {\n        type = scalar(schema, defaults, options)\n      }\n\n      if (!required) {\n        type = optional(type, undefined, options)\n      }\n\n      return type\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(\n      `A schema definition must be an object, array, string or function, but you passed: ${schema}`\n    )\n  } else {\n    throw new Error(`Invalid schema: ${schema}`)\n  }\n}\n\n/**\n * Dict.\n *\n * @param {Array} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction dict(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 2) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dict structs must be defined as an array with two elements, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const keys = any(schema[0], undefined, options)\n  const values = any(schema[1], undefined, options)\n  const name = 'dict'\n  const type = `dict<${keys.type},${values.type}>`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = {}\n    const errors = []\n\n    for (let k in value) {\n      const v = value[k]\n      const [e, r] = keys.validate(k)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      k = r\n      const [e2, r2] = values.validate(v)\n\n      if (e2) {\n        const allE2 = e2.errors || [e2]\n        allE2.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[k] = r2\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enum.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction en(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Enum structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'enum'\n  const type = schema\n    .map(s => {\n      try {\n        return JSON.stringify(s)\n      } catch (e) {\n        return String(s)\n      }\n    })\n    .join(' | ')\n\n  const validate = (value = resolveDefaults(defaults)) => {\n    return schema.includes(value)\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enums.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction enums(schema, defaults, options) {\n  const e = en(schema, undefined, options)\n  const l = list([e], defaults, options)\n  return l\n}\n\n/**\n * Function.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction func(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Function structs must be defined as a function, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'function'\n  const type = '<function>'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const result = schema(value, data)\n    let failure = { path: [], reason: null }\n    let isValid\n\n    switch (kindOf(result)) {\n      case 'boolean': {\n        isValid = result\n        break\n      }\n      case 'string': {\n        isValid = false\n        failure.reason = result\n        break\n      }\n      case 'object': {\n        isValid = false\n        failure = { ...failure, ...result }\n        break\n      }\n      default: {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `Validator functions must return a boolean, an error reason string or an error reason object, but you passed: ${schema}`\n          )\n        } else {\n          throw new Error(`Invalid result: ${result}`)\n        }\n      }\n    }\n\n    return isValid\n      ? [undefined, value]\n      : [{ type, value, data: value, ...failure }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Instance.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction instance(schema, defaults, options) {\n  const name = 'instance'\n  const type = `instance<${schema.name}>`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value instanceof schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Interface.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction inter(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Interface structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'interface'\n  const type = `{${ks.join()}}`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const errors = []\n    const ret = value\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Lazy.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction lazy(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Lazy structs must be defined as an function that returns a schema, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  let kind\n  let struct\n  const name = 'lazy'\n  const type = `lazy...`\n  const compile = value => {\n    struct = schema()\n    kind.name = struct.kind\n    kind.type = struct.type\n    kind.validate = struct.validate\n    return kind.validate(value)\n  }\n\n  kind = new Kind(name, type, compile)\n  return kind\n}\n\n/**\n * Dynamic.\n *\n * @param {Function} createSchema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction dynamic(createSchema, defaults, options) {\n  if (kindOf(createSchema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dynamic structs must be defined as a function, but you passed: ${createSchema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${createSchema}`)\n    }\n  }\n\n  const name = 'dynamic'\n  const type = 'dynamic...'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const schema = createSchema(value, data)\n\n    if (kindOf(schema) !== 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Dynamic structs must return a schema, but you passed: ${schema}`\n        )\n      } else {\n        throw new Error(`Invalid schema: ${schema}`)\n      }\n    }\n\n    const [error, result] = schema.validate(value)\n\n    if (error) {\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * List.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction list(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `List structs must be defined as an array with a single element, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const array = scalar('array', undefined, options)\n  const element = any(schema[0], undefined, options)\n  const name = 'list'\n  const type = `[${element.type}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error, result] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    value = result\n    const errors = []\n    const ret = []\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i]\n      const [e, r] = element.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Literal.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction literal(schema, defaults, options) {\n  const name = 'literal'\n  const type = `literal: ${JSON.stringify(schema)}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value === schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Object.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction object(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Object structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'object'\n  const type = `{${ks.join()}}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n    const valueKeys = Object.keys(value)\n    const propertiesKeys = Object.keys(properties)\n    const keys = new Set(valueKeys.concat(propertiesKeys))\n\n    keys.forEach(key => {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      if (!kind) {\n        const e = { data: value, path: [key], value: v }\n        errors.push(e)\n        return\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        return\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    })\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Optional.\n *\n * @param {Any} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction optional(schema, defaults, options) {\n  return union([schema, 'undefined'], defaults, options)\n}\n\n/**\n * Partial.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction partial(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Partial structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'partial'\n  const type = `{${ks.join()},...}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Scalar.\n *\n * @param {String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction scalar(schema, defaults, options) {\n  if (kindOf(schema) !== 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Scalar structs must be defined as a string, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const { types } = options\n  const fn = types[schema]\n\n  if (kindOf(fn) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `No struct validator function found for type \"${schema}\".`\n      )\n    } else {\n      throw new Error(`Invalid type: ${schema}`)\n    }\n  }\n\n  const kind = func(fn, defaults, options)\n  const name = 'scalar'\n  const type = schema\n  const validate = value => {\n    const [error, result] = kind.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Tuple.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction tuple(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Tuple structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const array = scalar('array', undefined, options)\n  const name = 'tuple'\n  const type = `[${kinds.map(k => k.type).join()}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = []\n    const errors = []\n    const length = Math.max(value.length, kinds.length)\n\n    for (let i = 0; i < length; i++) {\n      const kind = kinds[i]\n      const v = value[i]\n\n      if (!kind) {\n        const e = { data: value, path: [i], value: v }\n        errors.push(e)\n        continue\n      }\n\n      const [e, r] = kind.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Union.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction union(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Union structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const name = 'union'\n  const type = kinds.map(k => k.type).join(' | ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    const errors = []\n\n    for (const k of kinds) {\n      const [e, r] = k.validate(value)\n\n      if (!e) {\n        return [undefined, r]\n      }\n\n      errors.push(e)\n    }\n    errors[0].type = type\n    return errors\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Intersection.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction intersection(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Intersection structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const types = schema.map(s => any(s, undefined, options))\n  const name = 'intersection'\n  const type = types.map(t => t.type).join(' & ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    let v = value\n\n    for (const t of types) {\n      const [e, r] = t.validate(v)\n\n      if (e) {\n        e.type = type\n        return [e]\n      }\n\n      v = r\n    }\n\n    return [undefined, v]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Kinds.\n *\n * @type {Object}\n */\n\nconst Kinds = {\n  any,\n  dict,\n  enum: en,\n  enums,\n  function: func,\n  instance,\n  interface: inter,\n  lazy,\n  list,\n  literal,\n  object,\n  optional,\n  partial,\n  scalar,\n  tuple,\n  union,\n  intersection,\n  dynamic,\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Kinds\n","import kindOf from 'kind-of'\n\n/**\n * The types that `kind-of` supports.\n *\n * @type {Array}\n */\n\nconst TYPES = [\n  'arguments',\n  'array',\n  'boolean',\n  'buffer',\n  'error',\n  'float32array',\n  'float64array',\n  'function',\n  'generatorfunction',\n  'int16array',\n  'int32array',\n  'int8array',\n  'map',\n  'null',\n  'number',\n  'object',\n  'promise',\n  'regexp',\n  'set',\n  'string',\n  'symbol',\n  'uint16array',\n  'uint32array',\n  'uint8array',\n  'uint8clampedarray',\n  'undefined',\n  'weakmap',\n  'weakset',\n]\n\n/**\n * The default types that Superstruct ships with.\n *\n * @type {Object}\n */\n\nconst Types = {\n  any: value => value !== undefined,\n}\n\nTYPES.forEach(type => {\n  Types[type] = value => kindOf(value) === type\n})\n\n/**\n * Handle the 'date' case specially, to throw out invalid `Date` objects.\n *\n * @param {Mixed} value\n * @return {Boolean}\n */\n\nTypes.date = value => kindOf(value) === 'date' && !isNaN(value)\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Types\n","import Kinds from './kinds'\nimport StructError from './error'\nimport Types from './types'\nimport { isStruct } from './utils'\nimport { IS_STRUCT, KIND } from './constants'\n\n/**\n * Create a struct factory with a `config`.\n *\n * @param {Object} config\n * @return {Function}\n */\n\nfunction superstruct(config = {}) {\n  const types = {\n    ...Types,\n    ...(config.types || {}),\n  }\n\n  /**\n   * Create a `kind` struct with `schema`, `defaults` and `options`.\n   *\n   * @param {Any} schema\n   * @param {Any} defaults\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function struct(schema, defaults, options = {}) {\n    if (isStruct(schema)) {\n      schema = schema.schema\n    }\n\n    const kind = Kinds.any(schema, defaults, { ...options, types })\n\n    function Struct(data) {\n      if (this instanceof Struct) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'The `Struct` creation function should not be used with the `new` keyword.'\n          )\n        } else {\n          throw new Error('Invalid `new` keyword!')\n        }\n      }\n\n      return Struct.assert(data)\n    }\n\n    Object.defineProperty(Struct, IS_STRUCT, { value: true })\n    Object.defineProperty(Struct, KIND, { value: kind })\n\n    Struct.kind = kind.name\n    Struct.type = kind.type\n    Struct.schema = schema\n    Struct.defaults = defaults\n    Struct.options = options\n\n    Struct.assert = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        throw new StructError(error)\n      }\n\n      return result\n    }\n\n    Struct.test = value => {\n      const [error] = kind.validate(value)\n      return !error\n    }\n\n    Struct.validate = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        return [new StructError(error)]\n      }\n\n      return [undefined, result]\n    }\n\n    return Struct\n  }\n\n  /**\n   * Mix in a factory for each specific kind of struct.\n   */\n\n  Object.keys(Kinds).forEach(name => {\n    const kind = Kinds[name]\n\n    struct[name] = (schema, defaults, options) => {\n      const type = kind(schema, defaults, { ...options, types })\n      const s = struct(type, defaults, options)\n      return s\n    }\n  })\n\n  /**\n   * Return the struct factory.\n   */\n\n  return struct\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default superstruct\n","import StructError from './error'\nimport superstruct from './superstruct'\nimport { isStruct } from './utils'\n\n/**\n * Create a convenience `struct` factory for the default types.\n *\n * @type {Function}\n */\n\nconst struct = superstruct()\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport { struct, superstruct, isStruct, StructError }\n"],"sourceRoot":""}