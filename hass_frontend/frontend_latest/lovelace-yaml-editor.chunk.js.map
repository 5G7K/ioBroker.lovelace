{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/hui-editor.ts"],"names":["isEntityId","value","includes","isIcon","struct","superstruct","types","icon","lovelaceStruct","interface","title","views","resources","optional","LovelaceFullConfigEditor","LitElement","properties","hass","lovelace","closeEditor","_saving","_changed","render","html","_closeEditor","localize","classMap","saved","_handleSave","_yamlChanged","firstUpdated","yamlEditor","yaml","safeDump","config","codemirror","clearHistory","_generation","changeGeneration","styles","haStyle","css","isClean","window","onbeforeunload","confirm","hasComments","safeLoad","err","alert","saveConfig","shadowRoot","querySelector","customElements","define"],"mappings":"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","file":"lovelace-yaml-editor.chunk.js","sourcesContent":["export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","import { LitElement, html, TemplateResult, CSSResult, css } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport yaml from \"js-yaml\";\n\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\n\nimport { struct } from \"./common/structs/struct\";\nimport { Lovelace } from \"./types\";\n\nimport \"../../components/ha-icon\";\nimport { haStyle } from \"../../resources/styles\";\nimport \"./components/hui-yaml-editor\";\n// This is not a duplicate import, one is for types, one is for element.\n// tslint:disable-next-line\nimport { HuiYamlEditor } from \"./components/hui-yaml-editor\";\nimport { HomeAssistant } from \"../../types\";\n\nconst lovelaceStruct = struct.interface({\n  title: \"string?\",\n  views: [\"object\"],\n  resources: struct.optional([\"object\"]),\n});\n\nclass LovelaceFullConfigEditor extends LitElement {\n  public hass?: HomeAssistant;\n  public lovelace?: Lovelace;\n  public closeEditor?: () => void;\n  private _saving?: boolean;\n  private _changed?: boolean;\n  private _generation?: number;\n\n  static get properties() {\n    return {\n      hass: {},\n      lovelace: {},\n      closeEditor: {},\n      _saving: {},\n      _changed: {},\n    };\n  }\n\n  public render(): TemplateResult | void {\n    return html`\n      <app-header-layout>\n        <app-header>\n          <app-toolbar>\n            <paper-icon-button\n              icon=\"hass:close\"\n              @click=\"${this._closeEditor}\"\n            ></paper-icon-button>\n            <div main-title>\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.header\"\n              )}\n            </div>\n            <div\n              class=\"save-button\n              ${classMap({\n                saved: this._saving! === false || this._changed === true,\n              })}\"\n            >\n              ${this._changed\n                ? this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.unsaved_changes\"\n                  )\n                : this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.saved\"\n                  )}\n            </div>\n            <mwc-button raised @click=\"${this._handleSave}\"\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.save\"\n              )}</mwc-button\n            >\n          </app-toolbar>\n        </app-header>\n        <div class=\"content\">\n          <hui-yaml-editor\n            .hass=\"${this.hass}\"\n            @yaml-changed=\"${this._yamlChanged}\"\n            @yaml-save=\"${this._handleSave}\"\n          >\n          </hui-yaml-editor>\n        </div>\n      </app-header-layout>\n    `;\n  }\n\n  protected firstUpdated() {\n    this.yamlEditor.value = yaml.safeDump(this.lovelace!.config);\n    this.yamlEditor.codemirror.clearHistory();\n    this._generation = this.yamlEditor.codemirror.changeGeneration(true);\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        :host {\n          --code-mirror-height: 100%;\n        }\n\n        app-header-layout {\n          height: 100vh;\n        }\n\n        app-toolbar {\n          background-color: var(--dark-background-color, #455a64);\n          color: var(--dark-text-color);\n        }\n\n        .comments {\n          font-size: 16px;\n        }\n\n        .content {\n          height: calc(100vh - 68px);\n        }\n\n        hui-code-editor {\n          height: 100%;\n        }\n\n        .save-button {\n          opacity: 0;\n          font-size: 14px;\n          padding: 0px 10px;\n        }\n\n        .saved {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n\n  private _yamlChanged() {\n    if (!this._generation) {\n      return;\n    }\n    this._changed = !this.yamlEditor.codemirror.isClean(this._generation);\n    if (this._changed && !window.onbeforeunload) {\n      window.onbeforeunload = () => {\n        return true;\n      };\n    } else if (!this._changed && window.onbeforeunload) {\n      window.onbeforeunload = null;\n    }\n  }\n\n  private _closeEditor() {\n    if (this._changed) {\n      if (\n        !confirm(\"You have unsaved changes, are you sure you want to exit?\")\n      ) {\n        return;\n      }\n    }\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _handleSave() {\n    this._saving = true;\n\n    if (this.yamlEditor.hasComments) {\n      if (\n        !confirm(\n          \"Your config contains comment(s), these will not be saved. Do you want to continue?\"\n        )\n      ) {\n        return;\n      }\n    }\n\n    let value;\n    try {\n      value = yaml.safeLoad(this.yamlEditor.value);\n    } catch (err) {\n      alert(`Unable to parse YAML: ${err}`);\n      this._saving = false;\n      return;\n    }\n    try {\n      value = lovelaceStruct(value);\n    } catch (err) {\n      alert(`Your config is not valid: ${err}`);\n      return;\n    }\n    try {\n      await this.lovelace!.saveConfig(value);\n    } catch (err) {\n      alert(`Unable to save YAML: ${err}`);\n    }\n    this._generation = this.yamlEditor.codemirror.changeGeneration(true);\n    window.onbeforeunload = null;\n    this._saving = false;\n    this._changed = false;\n  }\n\n  private get yamlEditor(): HuiYamlEditor {\n    return this.shadowRoot!.querySelector(\"hui-yaml-editor\")!;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-editor\": LovelaceFullConfigEditor;\n  }\n}\n\ncustomElements.define(\"hui-editor\", LovelaceFullConfigEditor);\n"],"sourceRoot":""}