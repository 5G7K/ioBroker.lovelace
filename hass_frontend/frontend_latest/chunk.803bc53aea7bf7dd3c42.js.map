{"version":3,"sources":["webpack:///./src/components/ha-fab.ts","webpack:///./src/panels/lovelace/editor/select-view/show-select-view-dialog.ts","webpack:///./src/panels/lovelace/editor/card-editor/show-suggest-card-dialog.ts","webpack:///./src/panels/lovelace/editor/add-entities-to-view.ts","webpack:///./src/panels/lovelace/common/compute-unused-entities.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts"],"names":["MwcFab","customElements","get","_decorate","customElement","_initialize","_MwcFab","F","[object Object]","args","super","this","d","kind","key","value","classes","mdc-fab--mini","mini","mdc-fab--exited","exited","mdc-fab--extended","extended","showLabel","label","html","ripple","classMap","disabled","icon","showIconAtEnd","importsuggestCardDialog","Promise","all","__webpack_require__","e","then","bind","showSuggestCardDialog","element","suggestCardDialogParams","fireEvent","dialogTag","dialogImport","dialogParams","__webpack_exports__","addEntitiesToLovelaceView","async","hass","entities","lovelaceConfig","saveConfigFunc","_ref","_panels$lovelace","panels","lovelace","config","mode","fetchConfig","connection","alert","localize","selectViewDialogParams","showSelectViewDialog","viewSelectedCallback","view","saveConfig","newConfig","path","EXCLUDED_DOMAINS","addFromAction","actionConfig","action","service_data","entity_id","entityIds","Array","isArray","entityId","add","addEntityId","entity","camera_image","tap_action","hold_action","addEntities","obj","forEach","card","cards","elements","badges","badge","computeUnusedEntities","usedEntities","Set","views","computeUsedEntities","Object","keys","states","filter","has","includes","split","sort","HuiUnusedEntities","_LitElement","decorators","property","memoizeOne","narrow","columns","title","sortable","filterable","filterKey","direction","template","stateObj","_handleEntityClicked","friendly_name","domain","last_changed","type","lastChanged","changedProperties","_get","_getPrototypeOf","prototype","call","_getUnusedEntities","editMode","_columns","_unusedEntities","map","assign","computeStateName","computeDomain","_handleSelectionChanged","rtl","computeRTL","_addToLovelaceView","_selectedEntities","_config","ev","changedSelection","detail","id","selected","push","index","indexOf","splice","target","closest","getAttribute","static","css","LitElement"],"mappings":"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","file":"chunk.803bc53aea7bf7dd3c42.js","sourcesContent":["import { classMap } from \"lit-html/directives/class-map\";\nimport { html, customElement } from \"lit-element\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive.js\";\n\nimport \"@material/mwc-fab\";\nimport { Constructor } from \"../types\";\n// tslint:disable-next-line\nimport { Fab } from \"@material/mwc-fab\";\n// tslint:disable-next-line\nconst MwcFab = customElements.get(\"mwc-fab\") as Constructor<Fab>;\n\n@customElement(\"ha-fab\")\nexport class HaFab extends MwcFab {\n  // We override the render method because we don't have an icon font and mwc-fab doesn't support our svg-icon sets.\n  // Based on version mwc-fab 0.8\n  protected render() {\n    const classes = {\n      \"mdc-fab--mini\": this.mini,\n      \"mdc-fab--exited\": this.exited,\n      \"mdc-fab--extended\": this.extended,\n    };\n    const showLabel = this.label !== \"\" && this.extended;\n    return html`\n      <button\n        .ripple=\"${ripple()}\"\n        class=\"mdc-fab ${classMap(classes)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-label=\"${this.label || this.icon}\"\n      >\n        ${showLabel && this.showIconAtEnd ? this.label : \"\"}\n        ${this.icon\n          ? html`\n              <ha-icon .icon=${this.icon}></ha-icon>\n            `\n          : \"\"}\n        ${showLabel && !this.showIconAtEnd ? this.label : \"\"}\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\n\nexport interface SelectViewDialogParams {\n  lovelaceConfig: LovelaceConfig;\n  viewSelectedCallback: (view: number) => void;\n}\n\nexport const showSelectViewDialog = (\n  element: HTMLElement,\n  selectViewDialogParams: SelectViewDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-select-view\",\n    dialogImport: () =>\n      import(\n        /* webpackChunkName: \"hui-dialog-select-view\" */ \"./hui-dialog-select-view\"\n      ),\n    dialogParams: selectViewDialogParams,\n  });\n};\n","import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig, LovelaceCardConfig } from \"../../../../data/lovelace\";\n\nexport interface SuggestCardDialogParams {\n  lovelaceConfig?: LovelaceConfig;\n  saveConfig?: (config: LovelaceConfig) => void;\n  path?: [number];\n  entities: string[]; // We can pass entity id's that will be added to the config when a card is picked\n  cardConfig?: LovelaceCardConfig[]; // We can pass a suggested config\n}\n\nconst importsuggestCardDialog = () =>\n  import(\n    /* webpackChunkName: \"hui-dialog-suggest-card\" */ \"./hui-dialog-suggest-card\"\n  );\n\nexport const showSuggestCardDialog = (\n  element: HTMLElement,\n  suggestCardDialogParams: SuggestCardDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-suggest-card\",\n    dialogImport: importsuggestCardDialog,\n    dialogParams: suggestCardDialogParams,\n  });\n};\n","import { HomeAssistant } from \"../../../types\";\nimport {\n  LovelaceConfig,\n  fetchConfig,\n  saveConfig,\n} from \"../../../data/lovelace\";\nimport { showSelectViewDialog } from \"./select-view/show-select-view-dialog\";\nimport { showSuggestCardDialog } from \"./card-editor/show-suggest-card-dialog\";\n\nexport const addEntitiesToLovelaceView = async (\n  element: HTMLElement,\n  hass: HomeAssistant,\n  entities: string[],\n  lovelaceConfig?: LovelaceConfig,\n  saveConfigFunc?: (newConfig: LovelaceConfig) => void\n) => {\n  if ((hass!.panels.lovelace?.config as any)?.mode === \"yaml\") {\n    showSuggestCardDialog(element, {\n      entities,\n    });\n    return;\n  }\n  if (!lovelaceConfig) {\n    try {\n      lovelaceConfig = await fetchConfig(hass.connection, false);\n    } catch {\n      alert(\n        hass.localize(\n          \"ui.panel.lovelace.editor.add_entities.generated_unsupported\"\n        )\n      );\n      return;\n    }\n  }\n  showSelectViewDialog(element, {\n    lovelaceConfig,\n    viewSelectedCallback: (view) => {\n      if (!saveConfigFunc) {\n        saveConfigFunc = async (newConfig: LovelaceConfig): Promise<void> => {\n          try {\n            await saveConfig(hass!, newConfig);\n          } catch {\n            alert(\n              hass.localize(\n                \"ui.panel.config.devices.add_entities.saving_failed\"\n              )\n            );\n          }\n        };\n      }\n\n      showSuggestCardDialog(element, {\n        lovelaceConfig: lovelaceConfig!,\n        saveConfig: saveConfigFunc,\n        path: [view],\n        entities,\n      });\n    },\n  });\n};\n","import { LovelaceConfig, ActionConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\n\nconst EXCLUDED_DOMAINS = [\"zone\", \"persistent_notification\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    !actionConfig.service_data ||\n    !actionConfig.service_data.entity_id\n  ) {\n    return;\n  }\n  let entityIds = actionConfig.service_data.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nconst computeUsedEntities = (config) => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): string[] => {\n  const usedEntities = computeUsedEntities(config);\n  return Object.keys(hass.states)\n    .filter(\n      (entity) =>\n        !usedEntities.has(entity) &&\n        !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    )\n    .sort();\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  PropertyValues,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { classMap } from \"lit-html/directives/class-map\";\n\nimport memoizeOne from \"memoize-one\";\n\nimport \"../../../../components/ha-fab\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-relative-time\";\nimport \"../../../../components/ha-icon\";\n\nimport \"../../../../components/data-table/ha-data-table\";\n// tslint:disable-next-line\nimport {\n  SelectionChangedEvent,\n  DataTableColumnContainer,\n} from \"../../../../components/data-table/ha-data-table\";\n\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\n\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport { Lovelace } from \"../../types\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { addEntitiesToLovelaceView } from \"../add-entities-to-view\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property() public lovelace?: Lovelace;\n\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow?: boolean;\n\n  @property() private _unusedEntities: string[] = [];\n\n  private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTableColumnContainer = {\n      entity: {\n        title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity\"),\n        sortable: true,\n        filterable: true,\n        filterKey: \"friendly_name\",\n        direction: \"asc\",\n        template: (stateObj) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            <state-badge\n              .hass=${this.hass!}\n              .stateObj=${stateObj}\n            ></state-badge>\n            ${stateObj.friendly_name}\n          </div>\n        `,\n      },\n    };\n\n    if (narrow) {\n      return columns;\n    }\n\n    columns.entity_id = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity_id\"),\n      sortable: true,\n      filterable: true,\n    };\n    columns.domain = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.domain\"),\n      sortable: true,\n      filterable: true,\n    };\n    columns.last_changed = {\n      title: this.hass!.localize(\n        \"ui.panel.lovelace.unused_entities.last_changed\"\n      ),\n      type: \"numeric\",\n      sortable: true,\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        header=\"${this.hass.localize(\n          \"ui.panel.lovelace.unused_entities.title\"\n        )}\"\n      >\n        <div class=\"card-content\">\n          ${this.hass.localize(\n            \"ui.panel.lovelace.unused_entities.available_entities\"\n          )}\n          ${this.lovelace.mode === \"storage\"\n            ? html`\n                <br />${this.hass.localize(\n                  \"ui.panel.lovelace.unused_entities.select_to_add\"\n                )}\n              `\n            : \"\"}\n        </div>\n      </ha-card>\n      <ha-data-table\n        .columns=${this._columns(this.narrow!)}\n        .data=${this._unusedEntities.map((entity) => {\n          const stateObj = this.hass!.states[entity];\n          return {\n            entity_id: entity,\n            entity: {\n              ...stateObj,\n              friendly_name: computeStateName(stateObj),\n            },\n            domain: computeDomain(entity),\n            last_changed: stateObj!.last_changed,\n          };\n        })}\n        .id=${\"entity_id\"}\n        selectable\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n\n      <ha-fab\n        class=\"${classMap({\n          rtl: computeRTL(this.hass),\n        })}\"\n        icon=\"hass:plus\"\n        label=\"${this.hass.localize(\"ui.panel.lovelace.editor.edit_card.add\")}\"\n        @click=\"${this._addToLovelaceView}\"\n      ></ha-fab>\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    this._unusedEntities = computeUnusedEntities(this.hass, this._config!);\n  }\n\n  private _handleSelectionChanged(ev: CustomEvent): void {\n    const changedSelection = ev.detail as SelectionChangedEvent;\n    const entity = changedSelection.id;\n    if (changedSelection.selected) {\n      this._selectedEntities.push(entity);\n    } else {\n      const index = this._selectedEntities.indexOf(entity);\n      if (index !== -1) {\n        this._selectedEntities.splice(index, 1);\n      }\n    }\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = (ev.target as HTMLElement)\n      .closest(\"tr\")!\n      .getAttribute(\"data-row-id\")!;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  private _addToLovelaceView(): void {\n    addEntitiesToLovelaceView(\n      this,\n      this.hass,\n      this._selectedEntities,\n      this.lovelace!.config,\n      this.lovelace!.saveConfig\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        padding: 16px;\n      }\n      ha-fab {\n        position: sticky;\n        float: right;\n        bottom: 16px;\n        z-index: 1;\n      }\n      ha-fab.rtl {\n        float: left;\n      }\n      ha-card {\n        margin-bottom: 16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n"],"sourceRoot":""}