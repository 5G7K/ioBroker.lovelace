{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-a11y-announcer/iron-a11y-announcer.js","webpack:///./node_modules/@polymer/iron-resizable-behavior/iron-resizable-behavior.js","webpack:///./node_modules/@polymer/paper-toast/paper-toast.js"],"names":["IronA11yAnnouncer","Polymer","_template","html","is","properties","mode","type","String","value","_text","created","instance","document","body","addEventListener","_onIronAnnounce","bind","announce","text","async","event","detail","requestAvailability","createElement","appendChild","ORPHANS","Set","IronResizableBehavior","_parentResizable","Object","observer","_notifyingDescendant","Boolean","listeners","_interestedResizables","_boundNotifyResize","notifyResize","_boundOnDescendantIronResize","_onDescendantIronResize","attached","_requestResizeNotifications","detached","stopResizeNotificationsFor","delete","window","removeEventListener","isAttached","forEach","resizable","resizerShouldNotify","_notifyDescendant","_fireResize","assignParentResizable","parentResizable","indexOf","push","_subscribeIronResize","target","index","splice","_unsubscribeIronResize","element","stopPropagation","useShadow","fire","node","bubbles","_onIronRequestResizeNotifications","dom","rootTarget","_parentResizableChanged","descendant","readyState","readystatechanged","_findParent","orphan","cancelable","add","currentToast","behaviors","IronOverlayBehavior","fitInto","horizontalAlign","verticalAlign","duration","Number","noCancelOnOutsideClick","noAutoFocus","visible","Base","_warn","opened","_canAutoClose","Infinity","_autoClose","show","property","open","hide","close","__onTransitionEnd","e","propertyName","_finishRenderOpened","_finishRenderClosed","_openedChanged","cancelAsync","IronOverlayBehaviorImpl","apply","arguments","_renderOpened","classList","_renderClosed","remove","_onFitIntoChanged","positionTarget"],"mappings":"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","file":"vendors~notification-manager.chunk.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\n/**\n`iron-a11y-announcer` is a singleton element that is intended to add a11y\nto features that require on-demand announcement from screen readers. In\norder to make use of the announcer, it is best to request its availability\nin the announcing element.\n\nExample:\n\n    Polymer({\n\n      is: 'x-chatty',\n\n      attached: function() {\n        // This will create the singleton element if it has not\n        // been created yet:\n        Polymer.IronA11yAnnouncer.requestAvailability();\n      }\n    });\n\nAfter the `iron-a11y-announcer` has been made available, elements can\nmake announces by firing bubbling `iron-announce` events.\n\nExample:\n\n    this.fire('iron-announce', {\n      text: 'This is an announcement!'\n    }, { bubbles: true });\n\nNote: announcements are only audible if you have a screen reader enabled.\n\n@group Iron Elements\n@demo demo/index.html\n*/\nexport const IronA11yAnnouncer = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        position: fixed;\n        clip: rect(0px,0px,0px,0px);\n      }\n    </style>\n    <div aria-live$=\"[[mode]]\">[[_text]]</div>\n`,\n\n  is: 'iron-a11y-announcer',\n\n  properties: {\n\n    /**\n     * The value of mode is used to set the `aria-live` attribute\n     * for the element that will be announced. Valid values are: `off`,\n     * `polite` and `assertive`.\n     */\n    mode: {type: String, value: 'polite'},\n\n    _text: {type: String, value: ''}\n  },\n\n  created: function() {\n    if (!IronA11yAnnouncer.instance) {\n      IronA11yAnnouncer.instance = this;\n    }\n\n    document.body.addEventListener(\n        'iron-announce', this._onIronAnnounce.bind(this));\n  },\n\n  /**\n   * Cause a text string to be announced by screen readers.\n   *\n   * @param {string} text The text that should be announced.\n   */\n  announce: function(text) {\n    this._text = '';\n    this.async(function() {\n      this._text = text;\n    }, 100);\n  },\n\n  _onIronAnnounce: function(event) {\n    if (event.detail && event.detail.text) {\n      this.announce(event.detail.text);\n    }\n  }\n});\n\nIronA11yAnnouncer.instance = null;\n\nIronA11yAnnouncer.requestAvailability = function() {\n  if (!IronA11yAnnouncer.instance) {\n    IronA11yAnnouncer.instance = document.createElement('iron-a11y-announcer');\n  }\n\n  document.body.appendChild(IronA11yAnnouncer.instance);\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {useShadow} from '@polymer/polymer/lib/utils/settings.js';\n\n// Contains all connected resizables that do not have a parent.\nvar ORPHANS = new Set();\n\n/**\n * `IronResizableBehavior` is a behavior that can be used in Polymer elements to\n * coordinate the flow of resize events between \"resizers\" (elements that\n *control the size or hidden state of their children) and \"resizables\" (elements\n *that need to be notified when they are resized or un-hidden by their parents\n *in order to take action on their new measurements).\n *\n * Elements that perform measurement should add the `IronResizableBehavior`\n *behavior to their element definition and listen for the `iron-resize` event on\n *themselves. This event will be fired when they become showing after having\n *been hidden, when they are resized explicitly by another resizable, or when\n *the window has been resized.\n *\n * Note, the `iron-resize` event is non-bubbling.\n *\n * @polymerBehavior\n * @demo demo/index.html\n **/\nexport const IronResizableBehavior = {\n  properties: {\n    /**\n     * The closest ancestor element that implements `IronResizableBehavior`.\n     */\n    _parentResizable: {\n      type: Object,\n      observer: '_parentResizableChanged',\n    },\n\n    /**\n     * True if this element is currently notifying its descendant elements of\n     * resize.\n     */\n    _notifyingDescendant: {\n      type: Boolean,\n      value: false,\n    }\n  },\n\n  listeners: {\n    'iron-request-resize-notifications': '_onIronRequestResizeNotifications'\n  },\n\n  created: function() {\n    // We don't really need property effects on these, and also we want them\n    // to be created before the `_parentResizable` observer fires:\n    this._interestedResizables = [];\n    this._boundNotifyResize = this.notifyResize.bind(this);\n    this._boundOnDescendantIronResize = this._onDescendantIronResize.bind(this);\n  },\n\n  attached: function() {\n    this._requestResizeNotifications();\n  },\n\n  detached: function() {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    } else {\n      ORPHANS.delete(this);\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n\n    this._parentResizable = null;\n  },\n\n  /**\n   * Can be called to manually notify a resizable and its descendant\n   * resizables of a resize change.\n   */\n  notifyResize: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._interestedResizables.forEach(function(resizable) {\n      if (this.resizerShouldNotify(resizable)) {\n        this._notifyDescendant(resizable);\n      }\n    }, this);\n\n    this._fireResize();\n  },\n\n  /**\n   * Used to assign the closest resizable ancestor to this resizable\n   * if the ancestor detects a request for notifications.\n   */\n  assignParentResizable: function(parentResizable) {\n    if (this._parentResizable) {\n      this._parentResizable.stopResizeNotificationsFor(this);\n    }\n\n    this._parentResizable = parentResizable;\n\n    if (parentResizable &&\n        parentResizable._interestedResizables.indexOf(this) === -1) {\n      parentResizable._interestedResizables.push(this);\n      parentResizable._subscribeIronResize(this);\n    }\n  },\n\n  /**\n   * Used to remove a resizable descendant from the list of descendants\n   * that should be notified of a resize change.\n   */\n  stopResizeNotificationsFor: function(target) {\n    var index = this._interestedResizables.indexOf(target);\n\n    if (index > -1) {\n      this._interestedResizables.splice(index, 1);\n      this._unsubscribeIronResize(target);\n    }\n  },\n\n  /**\n   * Subscribe this element to listen to iron-resize events on the given target.\n   *\n   * Preferred over target.listen because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _subscribeIronResize: function(target) {\n    target.addEventListener('iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * Unsubscribe this element from listening to to iron-resize events on the\n   * given target.\n   *\n   * Preferred over target.unlisten because the property renamer does not\n   * understand to rename when the target is not specifically \"this\"\n   *\n   * @param {!HTMLElement} target Element to listen to for iron-resize events.\n   */\n  _unsubscribeIronResize: function(target) {\n    target.removeEventListener(\n        'iron-resize', this._boundOnDescendantIronResize);\n  },\n\n  /**\n   * This method can be overridden to filter nested elements that should or\n   * should not be notified by the current element. Return true if an element\n   * should be notified, or false if it should not be notified.\n   *\n   * @param {HTMLElement} element A candidate descendant element that\n   * implements `IronResizableBehavior`.\n   * @return {boolean} True if the `element` should be notified of resize.\n   */\n  resizerShouldNotify: function(element) {\n    return true;\n  },\n\n  _onDescendantIronResize: function(event) {\n    if (this._notifyingDescendant) {\n      event.stopPropagation();\n      return;\n    }\n\n    // no need to use this during shadow dom because of event retargeting\n    if (!useShadow) {\n      this._fireResize();\n    }\n  },\n\n  _fireResize: function() {\n    this.fire('iron-resize', null, {node: this, bubbles: false});\n  },\n\n  _onIronRequestResizeNotifications: function(event) {\n    var target = /** @type {!EventTarget} */ (dom(event).rootTarget);\n    if (target === this) {\n      return;\n    }\n\n    target.assignParentResizable(this);\n    this._notifyDescendant(target);\n\n    event.stopPropagation();\n  },\n\n  _parentResizableChanged: function(parentResizable) {\n    if (parentResizable) {\n      window.removeEventListener('resize', this._boundNotifyResize);\n    }\n  },\n\n  _notifyDescendant: function(descendant) {\n    // NOTE(cdata): In IE10, attached is fired on children first, so it's\n    // important not to notify them if the parent is not attached yet (or\n    // else they will get redundantly notified when the parent attaches).\n    if (!this.isAttached) {\n      return;\n    }\n\n    this._notifyingDescendant = true;\n    descendant.notifyResize();\n    this._notifyingDescendant = false;\n  },\n\n  _requestResizeNotifications: function() {\n    if (!this.isAttached) {\n      return;\n    }\n\n    if (document.readyState === 'loading') {\n      var _requestResizeNotifications =\n          this._requestResizeNotifications.bind(this);\n      document.addEventListener(\n          'readystatechange', function readystatechanged() {\n            document.removeEventListener('readystatechange', readystatechanged);\n            _requestResizeNotifications();\n          });\n    } else {\n      this._findParent();\n\n      if (!this._parentResizable) {\n        // If this resizable is an orphan, tell other orphans to try to find\n        // their parent again, in case it's this resizable.\n        ORPHANS.forEach(function(orphan) {\n          if (orphan !== this) {\n            orphan._findParent();\n          }\n        }, this);\n\n        window.addEventListener('resize', this._boundNotifyResize);\n        this.notifyResize();\n      } else {\n        // If this resizable has a parent, tell other child resizables of\n        // that parent to try finding their parent again, in case it's this\n        // resizable.\n        this._parentResizable._interestedResizables\n            .forEach(function(resizable) {\n              if (resizable !== this) {\n                resizable._findParent();\n              }\n            }, this);\n      }\n    }\n  },\n\n  _findParent: function() {\n    this.assignParentResizable(null);\n    this.fire(\n        'iron-request-resize-notifications',\n        null,\n        {node: this, bubbles: true, cancelable: true});\n\n    if (!this._parentResizable) {\n      ORPHANS.add(this);\n    } else {\n      ORPHANS.delete(this);\n    }\n  }\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport {IronA11yAnnouncer} from '@polymer/iron-a11y-announcer/iron-a11y-announcer.js';\nimport {IronOverlayBehavior, IronOverlayBehaviorImpl} from '@polymer/iron-overlay-behavior/iron-overlay-behavior.js';\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nimport {Base} from '@polymer/polymer/polymer-legacy.js';\n\n// Keeps track of the toast currently opened.\nvar currentToast = null;\n\n/**\nMaterial design: [Snackbars &\ntoasts](https://www.google.com/design/spec/components/snackbars-toasts.html)\n\n`paper-toast` provides a subtle notification toast. Only one `paper-toast` will\nbe visible on screen.\n\nUse `opened` to show the toast:\n\nExample:\n\n    <paper-toast text=\"Hello world!\" opened></paper-toast>\n\nAlso `open()` or `show()` can be used to show the toast:\n\nExample:\n\n    <paper-button on-click=\"openToast\">Open Toast</paper-button>\n    <paper-toast id=\"toast\" text=\"Hello world!\"></paper-toast>\n\n    ...\n\n    openToast: function() {\n      this.$.toast.open();\n    }\n\nSet `duration` to 0, a negative number or Infinity to persist the toast on\nscreen:\n\nExample:\n\n    <paper-toast text=\"Terms and conditions\" opened duration=\"0\">\n      <a href=\"#\">Show more</a>\n    </paper-toast>\n\n\n### Styling\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-toast-background-color` | The paper-toast background-color | `#323232`\n`--paper-toast-color` | The paper-toast color | `#f1f1f1`\n\nThis element applies the mixin `--paper-font-common-base` but does not import\n`paper-styles/typography.html`. In order to apply the `Roboto` font to this\nelement, make sure you've imported `paper-styles/typography.html`.\n\n@group Paper Elements\n@element paper-toast\n@demo demo/index.html\n@hero hero.svg\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        position: fixed;\n        background-color: var(--paper-toast-background-color, #323232);\n        color: var(--paper-toast-color, #f1f1f1);\n        min-height: 48px;\n        min-width: 288px;\n        padding: 16px 24px;\n        box-sizing: border-box;\n        box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.26);\n        border-radius: 2px;\n        margin: 12px;\n        font-size: 14px;\n        cursor: default;\n        -webkit-transition: -webkit-transform 0.3s, opacity 0.3s;\n        transition: transform 0.3s, opacity 0.3s;\n        opacity: 0;\n        -webkit-transform: translateY(100px);\n        transform: translateY(100px);\n        @apply --paper-font-common-base;\n      }\n\n      :host(.capsule) {\n        border-radius: 24px;\n      }\n\n      :host(.fit-bottom) {\n        width: 100%;\n        min-width: 0;\n        border-radius: 0;\n        margin: 0;\n      }\n\n      :host(.paper-toast-open) {\n        opacity: 1;\n        -webkit-transform: translateY(0px);\n        transform: translateY(0px);\n      }\n    </style>\n\n    <span id=\"label\">{{text}}</span>\n    <slot></slot>\n`,\n\n  is: 'paper-toast',\n  behaviors: [IronOverlayBehavior],\n\n  properties: {\n    /**\n     * The element to fit `this` into.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    fitInto: {type: Object, value: window, observer: '_onFitIntoChanged'},\n\n    /**\n     * The orientation against which to align the dropdown content\n     * horizontally relative to `positionTarget`.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    horizontalAlign: {type: String, value: 'left'},\n\n    /**\n     * The orientation against which to align the dropdown content\n     * vertically relative to `positionTarget`.\n     * Overridden from `Polymer.IronFitBehavior`.\n     */\n    verticalAlign: {type: String, value: 'bottom'},\n\n    /**\n     * The duration in milliseconds to show the toast.\n     * Set to `0`, a negative number, or `Infinity`, to disable the\n     * toast auto-closing.\n     */\n    duration: {type: Number, value: 3000},\n\n    /**\n     * The text to display in the toast.\n     */\n    text: {type: String, value: ''},\n\n    /**\n     * Overridden from `IronOverlayBehavior`.\n     * Set to false to enable closing of the toast by clicking outside it.\n     */\n    noCancelOnOutsideClick: {type: Boolean, value: true},\n\n    /**\n     * Overridden from `IronOverlayBehavior`.\n     * Set to true to disable auto-focusing the toast or child nodes with\n     * the `autofocus` attribute` when the overlay is opened.\n     */\n    noAutoFocus: {type: Boolean, value: true}\n  },\n\n  listeners: {'transitionend': '__onTransitionEnd'},\n\n  /**\n   * Read-only. Deprecated. Use `opened` from `IronOverlayBehavior`.\n   * @property visible\n   * @deprecated\n   */\n  get visible() {\n    Base._warn('`visible` is deprecated, use `opened` instead');\n    return this.opened;\n  },\n\n  /**\n   * Read-only. Can auto-close if duration is a positive finite number.\n   * @property _canAutoClose\n   */\n  get _canAutoClose() {\n    return this.duration > 0 && this.duration !== Infinity;\n  },\n\n  created: function() {\n    this._autoClose = null;\n    IronA11yAnnouncer.requestAvailability();\n  },\n\n  /**\n   * Show the toast. Without arguments, this is the same as `open()` from\n   * `IronOverlayBehavior`.\n   * @param {(Object|string)=} properties Properties to be set before opening the toast.\n   * e.g. `toast.show('hello')` or `toast.show({text: 'hello', duration: 3000})`\n   */\n  show: function(properties) {\n    if (typeof properties == 'string') {\n      properties = {text: properties};\n    }\n    for (var property in properties) {\n      if (property.indexOf('_') === 0) {\n        Base._warn(\n            'The property \"' + property + '\" is private and was not set.');\n      } else if (property in this) {\n        this[property] = properties[property];\n      } else {\n        Base._warn('The property \"' + property + '\" is not valid.');\n      }\n    }\n    this.open();\n  },\n\n  /**\n   * Hide the toast. Same as `close()` from `IronOverlayBehavior`.\n   */\n  hide: function() {\n    this.close();\n  },\n\n  /**\n   * Called on transitions of the toast, indicating a finished animation\n   * @private\n   */\n  __onTransitionEnd: function(e) {\n    // there are different transitions that are happening when opening and\n    // closing the toast. The last one so far is for `opacity`.\n    // This marks the end of the transition, so we check for this to determine\n    // if this is the correct event.\n    if (e && e.target === this && e.propertyName === 'opacity') {\n      if (this.opened) {\n        this._finishRenderOpened();\n      } else {\n        this._finishRenderClosed();\n      }\n    }\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   * Called when the value of `opened` changes.\n   */\n  _openedChanged: function() {\n    if (this._autoClose !== null) {\n      this.cancelAsync(this._autoClose);\n      this._autoClose = null;\n    }\n    if (this.opened) {\n      if (currentToast && currentToast !== this) {\n        currentToast.close();\n      }\n      currentToast = this;\n      this.fire('iron-announce', {text: this.text});\n      if (this._canAutoClose) {\n        this._autoClose = this.async(this.close, this.duration);\n      }\n    } else if (currentToast === this) {\n      currentToast = null;\n    }\n    IronOverlayBehaviorImpl._openedChanged.apply(this, arguments);\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   */\n  _renderOpened: function() {\n    this.classList.add('paper-toast-open');\n  },\n\n  /**\n   * Overridden from `IronOverlayBehavior`.\n   */\n  _renderClosed: function() {\n    this.classList.remove('paper-toast-open');\n  },\n\n  /**\n   * @private\n   */\n  _onFitIntoChanged: function(fitInto) {\n    this.positionTarget = fitInto;\n  }\n\n  /**\n   * Fired when `paper-toast` is opened.\n   *\n   * @event 'iron-announce'\n   * @param {{text: string}} detail Contains text that will be announced.\n   */\n});\n"],"sourceRoot":""}