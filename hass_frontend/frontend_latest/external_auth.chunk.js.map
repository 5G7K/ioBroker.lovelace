{"version":3,"sources":["webpack:///./src/external_app/external_auth.ts","webpack:///./src/external_app/external_events_forwarder.ts","webpack:///./src/external_app/external_messaging.ts"],"names":["CALLBACK_SET_TOKEN","CALLBACK_REVOKE_TOKEN","window","externalApp","webkit","Error","ExternalAuth","Auth","constructor","hassUrl","clientId","refresh_token","access_token","expires_in","expires","refreshAccessToken","callbackPayload","callback","getExternalAuth","JSON","stringify","messageHandlers","postMessage","tokens","Promise","resolve","reject","success","data","Date","now","revoke","revokeExternalAuth","createExternalAuth","auth","externalBus","external","ExternalMessaging","attach","externalForwardConnectionEvents","bus","addEventListener","ev","fireMessage","type","payload","event","detail","externalForwardHaptics","hapticType","CALLBACK_EXTERNAL_BUS","msg","receiveMessage","sendMessage","msgId","id","commands","_sendExternal","__DEV__","console","log","pendingCmd","warn","result","error"],"mappings":"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","file":"external_auth.chunk.js","sourcesContent":["/**\n * Auth class that connects to a native app for authentication.\n */\nimport { Auth } from \"home-assistant-js-websocket\";\nimport { ExternalMessaging, InternalMessage } from \"./external_messaging\";\n\nconst CALLBACK_SET_TOKEN = \"externalAuthSetToken\";\nconst CALLBACK_REVOKE_TOKEN = \"externalAuthRevokeToken\";\n\ninterface BasePayload {\n  callback: string;\n}\n\ninterface RefreshTokenResponse {\n  access_token: string;\n  expires_in: number;\n}\n\ndeclare global {\n  interface Window {\n    externalApp?: {\n      getExternalAuth(payload: string);\n      revokeExternalAuth(payload: string);\n      externalBus(payload: string);\n    };\n    webkit?: {\n      messageHandlers: {\n        getExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        revokeExternalAuth: {\n          postMessage(payload: BasePayload);\n        };\n        externalBus: {\n          postMessage(payload: InternalMessage);\n        };\n      };\n    };\n  }\n}\n\nif (!window.externalApp && !window.webkit) {\n  throw new Error(\n    \"External auth requires either externalApp or webkit defined on Window object.\"\n  );\n}\n\nclass ExternalAuth extends Auth {\n  public external?: ExternalMessaging;\n\n  constructor(hassUrl: string) {\n    super({\n      hassUrl,\n      clientId: \"\",\n      refresh_token: \"\",\n      access_token: \"\",\n      expires_in: 0,\n      // This will trigger connection to do a refresh right away\n      expires: 0,\n    });\n  }\n\n  public async refreshAccessToken() {\n    const callbackPayload = { callback: CALLBACK_SET_TOKEN };\n\n    if (window.externalApp) {\n      window.externalApp.getExternalAuth(JSON.stringify(callbackPayload));\n    } else {\n      window.webkit!.messageHandlers.getExternalAuth.postMessage(\n        callbackPayload\n      );\n    }\n\n    const tokens = await new Promise<RefreshTokenResponse>(\n      (resolve, reject) => {\n        window[CALLBACK_SET_TOKEN] = (success, data) =>\n          success ? resolve(data) : reject(data);\n      }\n    );\n\n    this.data.access_token = tokens.access_token;\n    this.data.expires = tokens.expires_in * 1000 + Date.now();\n  }\n\n  public async revoke() {\n    const callbackPayload = { callback: CALLBACK_REVOKE_TOKEN };\n\n    if (window.externalApp) {\n      window.externalApp.revokeExternalAuth(JSON.stringify(callbackPayload));\n    } else {\n      window.webkit!.messageHandlers.revokeExternalAuth.postMessage(\n        callbackPayload\n      );\n    }\n\n    await new Promise((resolve, reject) => {\n      window[CALLBACK_REVOKE_TOKEN] = (success, data) =>\n        success ? resolve(data) : reject(data);\n    });\n  }\n}\n\nexport const createExternalAuth = (hassUrl: string) => {\n  const auth = new ExternalAuth(hassUrl);\n  if (\n    (window.externalApp && window.externalApp.externalBus) ||\n    (window.webkit && window.webkit.messageHandlers.externalBus)\n  ) {\n    auth.external = new ExternalMessaging();\n    auth.external.attach();\n  }\n  return auth;\n};\n","import { ExternalMessaging } from \"./external_messaging\";\n\nexport const externalForwardConnectionEvents = (bus: ExternalMessaging) => {\n  window.addEventListener(\"connection-status\", (ev) =>\n    bus.fireMessage({\n      type: \"connection-status\",\n      payload: { event: ev.detail },\n    })\n  );\n};\n\nexport const externalForwardHaptics = (bus: ExternalMessaging) =>\n  window.addEventListener(\"haptic\", (ev) =>\n    bus.fireMessage({ type: \"haptic\", payload: { hapticType: ev.detail } })\n  );\n","import {\n  externalForwardConnectionEvents,\n  externalForwardHaptics,\n} from \"./external_events_forwarder\";\n\nconst CALLBACK_EXTERNAL_BUS = \"externalBus\";\n\ninterface CommandInFlight {\n  resolve: (data: any) => void;\n  reject: (err: ExternalError) => void;\n}\n\nexport interface InternalMessage {\n  id?: number;\n  type: string;\n  payload?: unknown;\n}\n\ninterface ExternalError {\n  code: string;\n  message: string;\n}\n\ninterface ExternalMessageResult {\n  id: number;\n  type: \"result\";\n  success: true;\n  result: unknown;\n}\n\ninterface ExternalMessageResultError {\n  id: number;\n  type: \"result\";\n  success: false;\n  error: ExternalError;\n}\n\ntype ExternalMessage = ExternalMessageResult | ExternalMessageResultError;\n\nexport class ExternalMessaging {\n  public commands: { [msgId: number]: CommandInFlight } = {};\n  public cache: { [key: string]: any } = {};\n  public msgId = 0;\n\n  public attach() {\n    externalForwardConnectionEvents(this);\n    externalForwardHaptics(this);\n    window[CALLBACK_EXTERNAL_BUS] = (msg) => this.receiveMessage(msg);\n  }\n\n  /**\n   * Send message to external app that expects a response.\n   * @param msg message to send\n   */\n  public sendMessage<T>(msg: InternalMessage): Promise<T> {\n    const msgId = ++this.msgId;\n    msg.id = msgId;\n\n    this.fireMessage(msg);\n\n    return new Promise<T>((resolve, reject) => {\n      this.commands[msgId] = { resolve, reject };\n    });\n  }\n\n  /**\n   * Send message to external app without expecting a response.\n   * @param msg message to send\n   */\n  public fireMessage(msg: InternalMessage) {\n    if (!msg.id) {\n      msg.id = ++this.msgId;\n    }\n    this._sendExternal(msg);\n  }\n\n  public receiveMessage(msg: ExternalMessage) {\n    if (__DEV__) {\n      // tslint:disable-next-line: no-console\n      console.log(\"Receiving message from external app\", msg);\n    }\n\n    const pendingCmd = this.commands[msg.id];\n\n    if (!pendingCmd) {\n      // tslint:disable-next-line: no-console\n      console.warn(`Received unknown msg ID`, msg.id);\n      return;\n    }\n\n    if (msg.type === \"result\") {\n      if (msg.success) {\n        pendingCmd.resolve(msg.result);\n      } else {\n        pendingCmd.reject(msg.error);\n      }\n    }\n  }\n\n  protected _sendExternal(msg: InternalMessage) {\n    if (__DEV__) {\n      // tslint:disable-next-line: no-console\n      console.log(\"Sending message to external app\", msg);\n    }\n    if (window.externalApp) {\n      window.externalApp.externalBus(JSON.stringify(msg));\n    } else {\n      window.webkit!.messageHandlers.externalBus.postMessage(msg);\n    }\n  }\n}\n"],"sourceRoot":""}