{"version":3,"sources":["webpack:///./src/entrypoints/compatibility.ts"],"names":["objAssign","polyfill","Object","values","undefined","target","keys","map","key","String","prototype","padStart","targetLength","padString","length","repeat","slice"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEAA,wDAAS,CAACC,QAAV;;AAEA,IAAIC,MAAM,CAACC,MAAP,KAAkBC,SAAtB,EAAiC;AAC/BF,QAAM,CAACC,MAAP,GAAiBE,MAAD,IAAY;AAC1B,WAAOH,MAAM,CAACI,IAAP,CAAYD,MAAZ,EAAoBE,GAApB,CAAyBC,GAAD,IAASH,MAAM,CAACG,GAAD,CAAvC,CAAP;AACD,GAFD;AAGD;AAED;AACA;AACA;;;AACA,IAAI,CAACC,MAAM,CAACC,SAAP,CAAiBC,QAAtB,EAAgC;AAC9BF,QAAM,CAACC,SAAP,CAAiBC,QAAjB,GAA4B,SAASA,QAAT,CAAkBC,YAAlB,EAAgCC,SAAhC,EAA2C;AACrED,gBAAY,GAAGA,YAAY,IAAI,CAA/B,CADqE,CACnC;;AAClCC,aAAS,GAAGJ,MAAM,CAAC,OAAOI,SAAP,KAAqB,WAArB,GAAmCA,SAAnC,GAA+C,GAAhD,CAAlB;;AACA,QAAI,KAAKC,MAAL,IAAeF,YAAnB,EAAiC;AAC/B,aAAOH,MAAM,CAAC,IAAD,CAAb;AACD,KAFD,MAEO;AACLG,kBAAY,GAAGA,YAAY,GAAG,KAAKE,MAAnC;;AACA,UAAIF,YAAY,GAAGC,SAAS,CAACC,MAA7B,EAAqC;AACnCD,iBAAS,IAAIA,SAAS,CAACE,MAAV,CAAiBH,YAAY,GAAGC,SAAS,CAACC,MAA1C,CAAb,CADmC,CAC6B;AACjE;;AACD,aAAOD,SAAS,CAACG,KAAV,CAAgB,CAAhB,EAAmBJ,YAAnB,IAAmCH,MAAM,CAAC,IAAD,CAAhD;AACD;AACF,GAZD;AAaD;AACD,mB","file":"compat.chunk.js","sourcesContent":["import \"mdn-polyfills/Array.prototype.includes\";\nimport \"unfetch/polyfill\";\nimport \"regenerator-runtime/runtime\";\nimport objAssign from \"es6-object-assign\";\n\nobjAssign.polyfill();\n\nif (Object.values === undefined) {\n  Object.values = (target) => {\n    return Object.keys(target).map((key) => target[key]);\n  };\n}\n\n/* tslint:disable */\n// https://github.com/uxitten/polyfill/blob/master/string.polyfill.js\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\nif (!String.prototype.padStart) {\n  String.prototype.padStart = function padStart(targetLength, padString) {\n    targetLength = targetLength >> 0; //truncate if number, or convert non-number to 0;\n    padString = String(typeof padString !== \"undefined\" ? padString : \" \");\n    if (this.length >= targetLength) {\n      return String(this);\n    } else {\n      targetLength = targetLength - this.length;\n      if (targetLength > padString.length) {\n        padString += padString.repeat(targetLength / padString.length); //append to original to ensure we are longer than needed\n      }\n      return padString.slice(0, targetLength) + String(this);\n    }\n  };\n}\n/* tslint:enable */\n"],"sourceRoot":""}