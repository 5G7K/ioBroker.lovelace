{"version":3,"sources":["webpack:///./src/components/ha-fab.ts","webpack:///./src/common/search/search-input.ts","webpack:///./mdc-data-table/constants.ts","webpack:///./mdc-data-table/foundation.ts","webpack:///./src/components/ha-checkbox.ts","webpack:///./src/components/ha-data-table.ts","webpack:///./src/panels/lovelace/common/compute-unused-entities.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts","webpack:///./src/panels/lovelace/editor/select-view/show-select-view-dialog.ts"],"names":["MwcFab","customElements","get","HaFab","[object Object]","classes","mdc-fab--mini","this","mini","mdc-fab--exited","exited","mdc-fab--extended","extended","showLabel","label","_material_mwc_base_base_element__WEBPACK_IMPORTED_MODULE_1__","Object","_material_mwc_ripple_ripple_directive_js__WEBPACK_IMPORTED_MODULE_2__","disabled","icon","showIconAtEnd","tslib__WEBPACK_IMPORTED_MODULE_0__","SearchInput","lit_element__WEBPACK_IMPORTED_MODULE_2__","lit_html__WEBPACK_IMPORTED_MODULE_1__","filter","_filterInputChanged","_clearSearch","value","_dom_fire_event__WEBPACK_IMPORTED_MODULE_3__","String","e","_filterChanged","target","styles","cssClasses","CELL","CELL_NUMERIC","CONTENT","HEADER_ROW","HEADER_ROW_CHECKBOX","ROOT","ROW","ROW_CHECKBOX","ROW_SELECTED","strings","ARIA_SELECTED","DATA_ROW_ID_ATTR","HEADER_ROW_CHECKBOX_SELECTOR","ROW_CHECKBOX_SELECTOR","ROW_SELECTED_SELECTOR","ROW_SELECTOR","foundation_MDCDataTableFoundation","foundation","defaultAdapter","addClassAtRowIndex","undefined","getRowCount","getRowElements","getRowIdAtIndex","getRowIndexByChildElement","getSelectedRowCount","isCheckboxAtRowIndexChecked","isHeaderRowCheckboxChecked","isRowsSelectable","notifyRowSelectionChanged","notifySelectedAll","notifyUnselectedAll","registerHeaderRowCheckbox","registerRowCheckboxes","removeClassAtRowIndex","setAttributeAtRowIndex","setHeaderRowCheckboxChecked","setHeaderRowCheckboxIndeterminate","setRowCheckboxCheckedAtIndex","adapter","super","assign","adapter_","setHeaderRowCheckboxState_","rowIds","rowIndex","rowId","isSelected","indexOf","selectRowAtIndex_","selectedRowIds","push","isHeaderChecked","event","selected","MwcCheckbox","ha_checkbox_HaCheckbox","firstUpdated","style","setProperty","mwc_checkbox_css","lit_element","tslib_es6","ha_data_table_HaDataTable","base_element","columns","data","selectable","id","mdcFoundationClass","_filterable","_headerChecked","_headerIndeterminate","_checkedRows","_filter","_sortDirection","_filterSortData","memoize_one_esm","direction","sortColumn","_memSortData","_memFilterData","ucFilter","toUpperCase","row","entries","some","columnEntry","key","column","filterable","filterKey","includes","sorted","sort","a","b","valA","valB","properties","updated","has","values","columnId","_sortColumn","_handleSearchChange","_handleHeaderRowCheckboxChange","map","mdc-data-table__cell--numeric","Boolean","type","sortable","not-sorted","_handleHeaderClick","title","repeat","_handleRowClick","_handleRowCheckboxChange","template","rowElements","classList","add","length","_getRowIdAtIndex","el","Array","prototype","call","closest","remove","attr","setAttribute","checked","indeterminate","_setRowChecked","getAttribute","ev","fire_event","_headerCheckbox","mdcFoundation","handleHeaderRowCheckboxChange","checkbox","handleRowCheckboxChange","bubbles","index","splice","detail","EXCLUDED_DOMAINS","addFromAction","entities","actionConfig","action","service_data","entity_id","entityIds","isArray","entityId","addEntityId","entity","camera_image","tap_action","hold_action","addEntities","obj","forEach","card","cards","elements","badges","badge","computeUnusedEntities","hass","config","usedEntities","Set","views","view","computeUsedEntities","keys","states","split","hui_unused_entities_HuiUnusedEntities","_unusedEntities","_selectedEntities","_columns","narrow","stateObj","_handleEntityClicked","friendly_name","domain","last_changed","lastChanged","_config","lovelace","changedProperties","_getUnusedEntities","mode","editMode","compute_state_name","compute_domain","_handleSelectionChanged","class_map","rtl","compute_rtl","localize","_selectView","changedSelection","element","selectViewDialogParams","viewSelectedCallback","_addCard","dialogTag","dialogImport","__webpack_require__","then","bind","dialogParams","show_edit_card_dialog","path"],"mappings":"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","file":"chunk.6a975befd285f2c21645.js","sourcesContent":["import {\n  classMap,\n  html,\n  customElement,\n  Constructor,\n} from \"@material/mwc-base/base-element\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive.js\";\n\nimport \"@material/mwc-fab\";\n// tslint:disable-next-line\nimport { Fab } from \"@material/mwc-fab\";\n// tslint:disable-next-line\nconst MwcFab = customElements.get(\"mwc-fab\") as Constructor<Fab>;\n\n@customElement(\"ha-fab\")\nexport class HaFab extends MwcFab {\n  // We override the render method because we don't have an icon font and mwc-fab doesn't support our svg-icon sets.\n  // Based on version mwc-fab 0.8\n  protected render() {\n    const classes = {\n      \"mdc-fab--mini\": this.mini,\n      \"mdc-fab--exited\": this.exited,\n      \"mdc-fab--extended\": this.extended,\n    };\n    const showLabel = this.label !== \"\" && this.extended;\n    return html`\n      <button\n        .ripple=\"${ripple()}\"\n        class=\"mdc-fab ${classMap(classes)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-label=\"${this.label || this.icon}\"\n      >\n        ${showLabel && this.showIconAtEnd ? this.label : \"\"}\n        ${this.icon\n          ? html`\n              <ha-icon .icon=${this.icon}></ha-icon>\n            `\n          : \"\"}\n        ${showLabel && !this.showIconAtEnd ? this.label : \"\"}\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { TemplateResult, html } from \"lit-html\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  LitElement,\n  property,\n} from \"lit-element\";\nimport { fireEvent } from \"../dom/fire_event\";\nimport \"@polymer/iron-icon/iron-icon\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@material/mwc-button\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property() private filter?: string;\n\n  protected render(): TemplateResult | void {\n    return html`\n      <div class=\"search-container\">\n        <paper-input\n          autofocus\n          label=\"Search\"\n          .value=${this.filter}\n          @value-changed=${this._filterInputChanged}\n        >\n          <iron-icon\n            icon=\"hass:magnify\"\n            slot=\"prefix\"\n            class=\"prefix\"\n          ></iron-icon>\n          ${this.filter &&\n            html`\n              <paper-icon-button\n                slot=\"suffix\"\n                class=\"suffix\"\n                @click=${this._clearSearch}\n                icon=\"hass:close\"\n                alt=\"Clear\"\n                title=\"Clear\"\n              ></paper-icon-button>\n            `}\n        </paper-input>\n      </div>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input {\n        flex: 1 1 auto;\n        margin: 0 16px;\n      }\n      .search-container {\n        display: inline-flex;\n        width: 100%;\n        align-items: center;\n      }\n      .prefix {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nexport const cssClasses = {\n  CELL: \"mdc-data-table__cell\",\n  CELL_NUMERIC: \"mdc-data-table__cell--numeric\",\n  CONTENT: \"mdc-data-table__content\",\n  HEADER_ROW: \"mdc-data-table__header-row\",\n  HEADER_ROW_CHECKBOX: \"mdc-data-table__header-row-checkbox\",\n  ROOT: \"mdc-data-table\",\n  ROW: \"mdc-data-table__row\",\n  ROW_CHECKBOX: \"mdc-data-table__row-checkbox\",\n  ROW_SELECTED: \"mdc-data-table__row--selected\",\n};\n\nexport const strings = {\n  ARIA_SELECTED: \"aria-selected\",\n  DATA_ROW_ID_ATTR: \"data-row-id\",\n  HEADER_ROW_CHECKBOX_SELECTOR: `.${cssClasses.HEADER_ROW_CHECKBOX}`,\n  ROW_CHECKBOX_SELECTOR: `.${cssClasses.ROW_CHECKBOX}`,\n  ROW_SELECTED_SELECTOR: `.${cssClasses.ROW_SELECTED}`,\n  ROW_SELECTOR: `.${cssClasses.ROW}`,\n};\n\nexport const events = {\n  ROW_SELECTION_CHANGED: \"MDCDataTable:rowSelectionChanged\",\n  SELECTED_ALL: \"MDCDataTable:selectedAll\",\n  UNSELECTED_ALL: \"MDCDataTable:unselectedAll\",\n};\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport { MDCFoundation } from \"@material/base/foundation\";\nimport { MDCDataTableAdapter } from \"./adapter\";\nimport { cssClasses, strings } from \"./constants\";\n\nexport class MDCDataTableFoundation extends MDCFoundation<MDCDataTableAdapter> {\n  static get defaultAdapter(): MDCDataTableAdapter {\n    return {\n      addClassAtRowIndex: () => undefined,\n      getRowCount: () => 0,\n      getRowElements: () => [],\n      getRowIdAtIndex: () => \"\",\n      getRowIndexByChildElement: () => 0,\n      getSelectedRowCount: () => 0,\n      isCheckboxAtRowIndexChecked: () => false,\n      isHeaderRowCheckboxChecked: () => false,\n      isRowsSelectable: () => false,\n      notifyRowSelectionChanged: () => undefined,\n      notifySelectedAll: () => undefined,\n      notifyUnselectedAll: () => undefined,\n      registerHeaderRowCheckbox: () => undefined,\n      registerRowCheckboxes: () => undefined,\n      removeClassAtRowIndex: () => undefined,\n      setAttributeAtRowIndex: () => undefined,\n      setHeaderRowCheckboxChecked: () => undefined,\n      setHeaderRowCheckboxIndeterminate: () => undefined,\n      setRowCheckboxCheckedAtIndex: () => undefined,\n    };\n  }\n\n  constructor(adapter?: Partial<MDCDataTableAdapter>) {\n    super({ ...MDCDataTableFoundation.defaultAdapter, ...adapter });\n  }\n\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is synchronous.\n   */\n  layout() {\n    if (this.adapter_.isRowsSelectable()) {\n      this.adapter_.registerHeaderRowCheckbox();\n      this.adapter_.registerRowCheckboxes();\n\n      this.setHeaderRowCheckboxState_();\n    }\n  }\n\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is asynchronous.\n   */\n  async layoutAsync(): Promise<void> {\n    if (this.adapter_.isRowsSelectable()) {\n      await this.adapter_.registerHeaderRowCheckbox();\n      await this.adapter_.registerRowCheckboxes();\n\n      this.setHeaderRowCheckboxState_();\n    }\n  }\n\n  /**\n   * @return Returns array of row elements.\n   */\n  getRows(): Element[] {\n    return this.adapter_.getRowElements();\n  }\n\n  /**\n   * Sets selected row ids. Overwrites previously selected rows.\n   * @param rowIds Array of row ids that needs to be selected.\n   */\n  setSelectedRowIds(rowIds: string[]) {\n    for (let rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      const rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n\n      let isSelected = false;\n      if (rowId && rowIds.indexOf(rowId) >= 0) {\n        isSelected = true;\n      }\n\n      this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);\n      this.selectRowAtIndex_(rowIndex, isSelected);\n    }\n\n    this.setHeaderRowCheckboxState_();\n  }\n\n  /**\n   * @return Returns array of selected row ids.\n   */\n  getSelectedRowIds(): Array<string | null> {\n    const selectedRowIds: Array<string | null> = [];\n    for (let rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      if (this.adapter_.isCheckboxAtRowIndexChecked(rowIndex)) {\n        selectedRowIds.push(this.adapter_.getRowIdAtIndex(rowIndex));\n      }\n    }\n\n    return selectedRowIds;\n  }\n\n  /**\n   * Handles header row checkbox change event.\n   */\n  handleHeaderRowCheckboxChange() {\n    const isHeaderChecked = this.adapter_.isHeaderRowCheckboxChecked();\n\n    for (let rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);\n      this.selectRowAtIndex_(rowIndex, isHeaderChecked);\n    }\n\n    if (isHeaderChecked) {\n      this.adapter_.notifySelectedAll();\n    } else {\n      this.adapter_.notifyUnselectedAll();\n    }\n  }\n\n  /**\n   * Handles change event originated from row checkboxes.\n   */\n  handleRowCheckboxChange(event: Event) {\n    const rowIndex = this.adapter_.getRowIndexByChildElement(\n      event.target as HTMLInputElement\n    );\n\n    if (rowIndex === -1) {\n      return;\n    }\n\n    const selected = this.adapter_.isCheckboxAtRowIndexChecked(rowIndex);\n\n    this.selectRowAtIndex_(rowIndex, selected);\n    this.setHeaderRowCheckboxState_();\n\n    const rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n    this.adapter_.notifyRowSelectionChanged({ rowId, rowIndex, selected });\n  }\n\n  /**\n   * Updates header row checkbox state based on number of rows selected.\n   */\n  private setHeaderRowCheckboxState_() {\n    if (this.adapter_.getSelectedRowCount() === this.adapter_.getRowCount()) {\n      this.adapter_.setHeaderRowCheckboxChecked(true);\n      this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n    } else if (this.adapter_.getSelectedRowCount() === 0) {\n      this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n      this.adapter_.setHeaderRowCheckboxChecked(false);\n    } else {\n      this.adapter_.setHeaderRowCheckboxIndeterminate(true);\n      this.adapter_.setHeaderRowCheckboxChecked(false);\n    }\n  }\n\n  /**\n   * Sets the attributes of row element based on selection state.\n   */\n  private selectRowAtIndex_(rowIndex: number, selected: boolean) {\n    if (selected) {\n      this.adapter_.addClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter_.setAttributeAtRowIndex(\n        rowIndex,\n        strings.ARIA_SELECTED,\n        \"true\"\n      );\n    } else {\n      this.adapter_.removeClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter_.setAttributeAtRowIndex(\n        rowIndex,\n        strings.ARIA_SELECTED,\n        \"false\"\n      );\n    }\n  }\n}\n","import { Constructor, customElement, CSSResult, css } from \"lit-element\";\nimport \"@material/mwc-checkbox\";\n// tslint:disable-next-line\nimport { Checkbox } from \"@material/mwc-checkbox\";\nimport { style } from \"@material/mwc-checkbox/mwc-checkbox-css\";\n// tslint:disable-next-line\nconst MwcCheckbox = customElements.get(\"mwc-checkbox\") as Constructor<Checkbox>;\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends MwcCheckbox {\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate)\n          ~ .mdc-checkbox__background {\n          border-color: rgba(var(--rgb-primary-text-color), 0.54);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { repeat } from \"lit-html/directives/repeat\";\n\nimport {\n  MDCDataTableAdapter,\n  MDCDataTableFoundation,\n} from \"../../mdc-data-table/index\"; // Because mdc-data-table published ts files, temporary load them from own repo, outside src so our linters won't complain\n\nimport {\n  BaseElement,\n  html,\n  query,\n  queryAll,\n  CSSResult,\n  css,\n  customElement,\n  property,\n  classMap,\n  TemplateResult,\n  PropertyValues,\n} from \"@material/mwc-base/base-element\";\n\nimport memoizeOne from \"memoize-one\";\n\nimport \"./ha-icon\";\nimport \"../common/search/search-input\";\nimport \"./ha-checkbox\";\n// tslint:disable-next-line\nimport { HaCheckbox } from \"./ha-checkbox\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"selection-changed\": SelectionChangedEvent;\n    \"row-click\": RowClickedEvent;\n    \"sorting-changed\": SortingChangedEvent;\n  }\n}\n\nexport interface RowClickedEvent {\n  id: string;\n}\n\nexport interface SelectionChangedEvent {\n  id: string;\n  selected: boolean;\n}\n\nexport interface SortingChangedEvent {\n  column: string;\n  direction: SortingDirection;\n}\n\nexport type SortingDirection = \"desc\" | \"asc\" | null;\n\nexport interface DataTabelColumnContainer {\n  [key: string]: DataTabelColumnData;\n}\n\nexport interface DataTabelColumnData {\n  title: string;\n  type?: \"numeric\";\n  sortable?: boolean;\n  filterable?: boolean;\n  filterKey?: string;\n  direction?: SortingDirection;\n  template?: (data: any) => TemplateResult;\n}\n\nexport interface DataTabelRowData {\n  [key: string]: any;\n}\n\n@customElement(\"ha-data-table\")\nexport class HaDataTable extends BaseElement {\n  @property({ type: Object }) public columns: DataTabelColumnContainer = {};\n  @property({ type: Array }) public data: DataTabelRowData[] = [];\n  @property({ type: Boolean }) public selectable = false;\n  @property({ type: String }) public id = \"id\";\n  protected mdcFoundation!: MDCDataTableFoundation;\n  protected readonly mdcFoundationClass = MDCDataTableFoundation;\n  @query(\".mdc-data-table\") protected mdcRoot!: HTMLElement;\n  @queryAll(\".mdc-data-table__row\") protected rowElements!: HTMLElement[];\n  @query(\"#header-checkbox\") private _headerCheckbox!: HaCheckbox;\n  @property({ type: Boolean }) private _filterable = false;\n  @property({ type: Boolean }) private _headerChecked = false;\n  @property({ type: Boolean }) private _headerIndeterminate = false;\n  @property({ type: Array }) private _checkedRows: string[] = [];\n  @property({ type: String }) private _filter = \"\";\n  @property({ type: String }) private _sortColumn?: string;\n  @property({ type: String }) private _sortDirection: SortingDirection = null;\n\n  private _filterSortData = memoizeOne(\n    (\n      data: DataTabelRowData[],\n      columns: DataTabelColumnContainer,\n      filter: string,\n      direction: SortingDirection,\n      sortColumn?: string\n    ) =>\n      sortColumn\n        ? this._memSortData(\n            this._memFilterData(data, columns, filter),\n            columns,\n            direction,\n            sortColumn\n          )\n        : this._memFilterData(data, columns, filter)\n  );\n\n  private _memFilterData = memoizeOne(\n    (\n      data: DataTabelRowData[],\n      columns: DataTabelColumnContainer,\n      filter: string\n    ) => {\n      if (!filter) {\n        return data;\n      }\n      const ucFilter = filter.toUpperCase();\n      return data.filter((row) => {\n        return Object.entries(columns).some((columnEntry) => {\n          const [key, column] = columnEntry;\n          if (column.filterable) {\n            if (\n              (column.filterKey ? row[key][column.filterKey] : row[key])\n                .toUpperCase()\n                .includes(ucFilter)\n            ) {\n              return true;\n            }\n          }\n          return false;\n        });\n      });\n    }\n  );\n\n  private _memSortData = memoizeOne(\n    (\n      data: DataTabelRowData[],\n      columns: DataTabelColumnContainer,\n      direction: SortingDirection,\n      sortColumn: string\n    ) => {\n      const sorted = [...data];\n      const column = columns[sortColumn];\n      return sorted.sort((a, b) => {\n        let sort = 1;\n        if (direction === \"desc\") {\n          sort = -1;\n        }\n\n        let valA = column.filterKey\n          ? a[sortColumn][column.filterKey]\n          : a[sortColumn];\n\n        let valB = column.filterKey\n          ? b[sortColumn][column.filterKey]\n          : b[sortColumn];\n\n        if (typeof valA === \"string\") {\n          valA = valA.toUpperCase();\n        }\n        if (typeof valB === \"string\") {\n          valB = valB.toUpperCase();\n        }\n\n        if (valA < valB) {\n          return sort * -1;\n        }\n        if (valA > valB) {\n          return sort * 1;\n        }\n        return 0;\n      });\n    }\n  );\n\n  protected updated(properties: PropertyValues) {\n    super.updated(properties);\n\n    if (properties.has(\"columns\")) {\n      this._filterable = Object.values(this.columns).some(\n        (column) => column.filterable\n      );\n\n      for (const columnId in this.columns) {\n        if (this.columns[columnId].direction) {\n          this._sortDirection = this.columns[columnId].direction!;\n          this._sortColumn = columnId;\n          break;\n        }\n      }\n    }\n  }\n\n  protected render() {\n    return html`\n      ${this._filterable\n        ? html`\n            <search-input\n              @value-changed=${this._handleSearchChange}\n            ></search-input>\n          `\n        : \"\"}\n      <div class=\"mdc-data-table\">\n        <table class=\"mdc-data-table__table\">\n          <thead>\n            <tr class=\"mdc-data-table__header-row\">\n              ${this.selectable\n                ? html`\n                    <th\n                      class=\"mdc-data-table__header-cell mdc-data-table__header-cell--checkbox\"\n                      role=\"columnheader\"\n                      scope=\"col\"\n                    >\n                      <ha-checkbox\n                        id=\"header-checkbox\"\n                        class=\"mdc-data-table__row-checkbox\"\n                        @change=${this._handleHeaderRowCheckboxChange}\n                        .indeterminate=${this._headerIndeterminate}\n                        .checked=${this._headerChecked}\n                      >\n                      </ha-checkbox>\n                    </th>\n                  `\n                : \"\"}\n              ${Object.entries(this.columns).map((columnEntry) => {\n                const [key, column] = columnEntry;\n                const sorted = key === this._sortColumn;\n                const classes = {\n                  \"mdc-data-table__cell--numeric\": Boolean(\n                    column.type && column.type === \"numeric\"\n                  ),\n                  sortable: Boolean(column.sortable),\n                  \"not-sorted\": Boolean(column.sortable && !sorted),\n                };\n                return html`\n                  <th\n                    class=\"mdc-data-table__header-cell ${classMap(classes)}\"\n                    role=\"columnheader\"\n                    scope=\"col\"\n                    @click=${this._handleHeaderClick}\n                    data-column-id=\"${key}\"\n                  >\n                    ${column.sortable\n                      ? html`\n                          <ha-icon\n                            .icon=${sorted && this._sortDirection === \"desc\"\n                              ? \"hass:arrow-down\"\n                              : \"hass:arrow-up\"}\n                          ></ha-icon>\n                        `\n                      : \"\"}\n                    <span>${column.title}</span>\n                  </th>\n                `;\n              })}\n            </tr>\n          </thead>\n          <tbody class=\"mdc-data-table__content\">\n            ${repeat(\n              this._filterSortData(\n                this.data,\n                this.columns,\n                this._filter,\n                this._sortDirection,\n                this._sortColumn\n              ),\n              (row: DataTabelRowData) => row[this.id],\n              (row: DataTabelRowData) => html`\n                <tr\n                  data-row-id=\"${row[this.id]}\"\n                  @click=${this._handleRowClick}\n                  class=\"mdc-data-table__row\"\n                >\n                  ${this.selectable\n                    ? html`\n                        <td\n                          class=\"mdc-data-table__cell mdc-data-table__cell--checkbox\"\n                        >\n                          <ha-checkbox\n                            class=\"mdc-data-table__row-checkbox\"\n                            @change=${this._handleRowCheckboxChange}\n                            .checked=${this._checkedRows.includes(row[this.id])}\n                          >\n                          </ha-checkbox>\n                        </td>\n                      `\n                    : \"\"}\n                  ${Object.entries(this.columns).map((columnEntry) => {\n                    const [key, column] = columnEntry;\n                    return html`\n                      <td\n                        class=\"mdc-data-table__cell ${classMap({\n                          \"mdc-data-table__cell--numeric\": Boolean(\n                            column.type && column.type === \"numeric\"\n                          ),\n                        })}\"\n                      >\n                        ${column.template\n                          ? column.template(row[key])\n                          : row[key]}\n                      </td>\n                    `;\n                  })}\n                </tr>\n              `\n            )}\n          </tbody>\n        </table>\n      </div>\n    `;\n  }\n\n  protected createAdapter(): MDCDataTableAdapter {\n    return {\n      addClassAtRowIndex: (rowIndex: number, cssClasses: string) => {\n        this.rowElements[rowIndex].classList.add(cssClasses);\n      },\n      getRowCount: () => this.data.length,\n      getRowElements: () => this.rowElements,\n      getRowIdAtIndex: (rowIndex: number) => this._getRowIdAtIndex(rowIndex),\n      getRowIndexByChildElement: (el: Element) =>\n        Array.prototype.indexOf.call(this.rowElements, el.closest(\"tr\")),\n      getSelectedRowCount: () => this._checkedRows.length,\n      isCheckboxAtRowIndexChecked: (rowIndex: number) =>\n        this._checkedRows.includes(this._getRowIdAtIndex(rowIndex)),\n      isHeaderRowCheckboxChecked: () => this._headerChecked,\n      isRowsSelectable: () => true,\n      notifyRowSelectionChanged: () => undefined,\n      notifySelectedAll: () => undefined,\n      notifyUnselectedAll: () => undefined,\n      registerHeaderRowCheckbox: () => undefined,\n      registerRowCheckboxes: () => undefined,\n      removeClassAtRowIndex: (rowIndex: number, cssClasses: string) => {\n        this.rowElements[rowIndex].classList.remove(cssClasses);\n      },\n      setAttributeAtRowIndex: (\n        rowIndex: number,\n        attr: string,\n        value: string\n      ) => {\n        this.rowElements[rowIndex].setAttribute(attr, value);\n      },\n      setHeaderRowCheckboxChecked: (checked: boolean) => {\n        this._headerChecked = checked;\n      },\n      setHeaderRowCheckboxIndeterminate: (indeterminate: boolean) => {\n        this._headerIndeterminate = indeterminate;\n      },\n      setRowCheckboxCheckedAtIndex: (rowIndex: number, checked: boolean) => {\n        this._setRowChecked(this._getRowIdAtIndex(rowIndex), checked);\n      },\n    };\n  }\n\n  private _getRowIdAtIndex(rowIndex: number): string {\n    return this.rowElements[rowIndex].getAttribute(\"data-row-id\")!;\n  }\n\n  private _handleHeaderClick(ev: Event) {\n    const columnId = (ev.target as HTMLElement)\n      .closest(\"th\")!\n      .getAttribute(\"data-column-id\")!;\n    if (!this.columns[columnId].sortable) {\n      return;\n    }\n    if (!this._sortDirection || this._sortColumn !== columnId) {\n      this._sortDirection = \"asc\";\n    } else if (this._sortDirection === \"asc\") {\n      this._sortDirection = \"desc\";\n    } else {\n      this._sortDirection = null;\n    }\n\n    this._sortColumn = this._sortDirection === null ? undefined : columnId;\n\n    fireEvent(this, \"sorting-changed\", {\n      column: columnId,\n      direction: this._sortDirection,\n    });\n  }\n\n  private _handleHeaderRowCheckboxChange() {\n    this._headerChecked = this._headerCheckbox.checked;\n    this._headerIndeterminate = this._headerCheckbox.indeterminate;\n    this.mdcFoundation.handleHeaderRowCheckboxChange();\n  }\n\n  private _handleRowCheckboxChange(ev: Event) {\n    const checkbox = ev.target as HaCheckbox;\n    const rowId = checkbox.closest(\"tr\")!.getAttribute(\"data-row-id\");\n\n    this._setRowChecked(rowId!, checkbox.checked);\n    this.mdcFoundation.handleRowCheckboxChange(ev);\n  }\n\n  private _handleRowClick(ev: Event) {\n    const rowId = (ev.target as HTMLElement)\n      .closest(\"tr\")!\n      .getAttribute(\"data-row-id\")!;\n    fireEvent(this, \"row-click\", { id: rowId }, { bubbles: false });\n  }\n\n  private _setRowChecked(rowId: string, checked: boolean) {\n    if (checked && !this._checkedRows.includes(rowId)) {\n      this._checkedRows = [...this._checkedRows, rowId];\n    } else if (!checked) {\n      const index = this._checkedRows.indexOf(rowId);\n      if (index !== -1) {\n        this._checkedRows.splice(index, 1);\n      }\n    }\n    fireEvent(this, \"selection-changed\", {\n      id: rowId,\n      selected: checked,\n    });\n  }\n\n  private _handleSearchChange(ev: CustomEvent): void {\n    this._filter = ev.detail.value;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      /* default mdc styles, colors changed, without checkbox styles */\n\n      .mdc-data-table__content {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        font-weight: 400;\n        letter-spacing: 0.0178571429em;\n        text-decoration: inherit;\n        text-transform: inherit;\n      }\n\n      .mdc-data-table {\n        background-color: var(--card-background-color);\n        border-radius: 4px;\n        border-width: 1px;\n        border-style: solid;\n        border-color: rgba(var(--rgb-primary-text-color), 0.12);\n        display: inline-flex;\n        flex-direction: column;\n        box-sizing: border-box;\n        overflow-x: auto;\n      }\n\n      .mdc-data-table__row--selected {\n        background-color: rgba(var(--rgb-primary-color), 0.04);\n      }\n\n      .mdc-data-table__row {\n        border-top-color: rgba(var(--rgb-primary-text-color), 0.12);\n      }\n\n      .mdc-data-table__row {\n        border-top-width: 1px;\n        border-top-style: solid;\n      }\n\n      .mdc-data-table__row:not(.mdc-data-table__row--selected):hover {\n        background-color: rgba(var(--rgb-primary-text-color), 0.04);\n      }\n\n      .mdc-data-table__header-cell {\n        color: var(--primary-text-color);\n      }\n\n      .mdc-data-table__cell {\n        color: var(--primary-text-color);\n      }\n\n      .mdc-data-table__header-row {\n        height: 56px;\n      }\n\n      .mdc-data-table__row {\n        height: 52px;\n      }\n\n      .mdc-data-table__cell,\n      .mdc-data-table__header-cell {\n        padding-right: 16px;\n        padding-left: 16px;\n      }\n\n      .mdc-data-table__header-cell--checkbox,\n      .mdc-data-table__cell--checkbox {\n        /* @noflip */\n        padding-left: 16px;\n        /* @noflip */\n        padding-right: 0;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell--checkbox,\n      .mdc-data-table__header-cell--checkbox[dir=\"rtl\"],\n      [dir=\"rtl\"] .mdc-data-table__cell--checkbox,\n      .mdc-data-table__cell--checkbox[dir=\"rtl\"] {\n        /* @noflip */\n        padding-left: 0;\n        /* @noflip */\n        padding-right: 16px;\n      }\n\n      .mdc-data-table__table {\n        width: 100%;\n        border: 0;\n        white-space: nowrap;\n        border-collapse: collapse;\n      }\n\n      .mdc-data-table__cell {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        font-weight: 400;\n        letter-spacing: 0.0178571429em;\n        text-decoration: inherit;\n        text-transform: inherit;\n      }\n\n      .mdc-data-table__cell--numeric {\n        text-align: right;\n      }\n      [dir=\"rtl\"] .mdc-data-table__cell--numeric,\n      .mdc-data-table__cell--numeric[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: left;\n      }\n\n      .mdc-data-table__header-cell {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.375rem;\n        font-weight: 500;\n        letter-spacing: 0.0071428571em;\n        text-decoration: inherit;\n        text-transform: inherit;\n        text-align: left;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell,\n      .mdc-data-table__header-cell[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: right;\n      }\n\n      .mdc-data-table__header-cell--numeric {\n        text-align: right;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell--numeric,\n      .mdc-data-table__header-cell--numeric[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: left;\n      }\n\n      /* custom from here */\n\n      .mdc-data-table {\n        display: block;\n      }\n      .mdc-data-table__header-cell {\n        overflow: hidden;\n      }\n      .mdc-data-table__header-cell.sortable {\n        cursor: pointer;\n      }\n      .mdc-data-table__header-cell.not-sorted:not(.mdc-data-table__cell--numeric)\n        span {\n        position: relative;\n        left: -24px;\n      }\n      .mdc-data-table__header-cell.not-sorted > * {\n        transition: left 0.2s ease 0s;\n      }\n      .mdc-data-table__header-cell.not-sorted ha-icon {\n        left: -36px;\n      }\n      .mdc-data-table__header-cell.not-sorted:not(.mdc-data-table__cell--numeric):hover\n        span {\n        left: 0px;\n      }\n      .mdc-data-table__header-cell:hover.not-sorted ha-icon {\n        left: 0px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-data-table\": HaDataTable;\n  }\n}\n","import { LovelaceConfig, ActionConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\n\nconst EXCLUDED_DOMAINS = [\"zone\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    !actionConfig.service_data ||\n    !actionConfig.service_data.entity_id\n  ) {\n    return;\n  }\n  let entityIds = actionConfig.service_data.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nconst computeUsedEntities = (config) => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): string[] => {\n  const usedEntities = computeUsedEntities(config);\n  return Object.keys(hass.states)\n    .filter(\n      (entity) =>\n        !usedEntities.has(entity) &&\n        !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    )\n    .sort();\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  PropertyValues,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { classMap } from \"lit-html/directives/class-map\";\n\nimport memoizeOne from \"memoize-one\";\n\nimport \"../../../../components/ha-fab\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-relative-time\";\nimport \"../../../../components/ha-icon\";\n\nimport \"../../../../components/ha-data-table\";\n// tslint:disable-next-line\nimport {\n  SelectionChangedEvent,\n  DataTabelColumnContainer,\n} from \"../../../../components/ha-data-table\";\n\nimport computeStateName from \"../../../../common/entity/compute_state_name\";\nimport computeDomain from \"../../../../common/entity/compute_domain\";\n\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\nimport { showSelectViewDialog } from \"../select-view/show-select-view-dialog\";\nimport { showEditCardDialog } from \"../card-editor/show-edit-card-dialog\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport { Lovelace } from \"../../types\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property() public lovelace?: Lovelace;\n\n  @property() public hass?: HomeAssistant;\n\n  @property() public narrow?: boolean;\n\n  @property() private _unusedEntities: string[] = [];\n\n  private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTabelColumnContainer = {\n      entity: {\n        title: \"Entity\",\n        sortable: true,\n        filterable: true,\n        filterKey: \"friendly_name\",\n        direction: \"asc\",\n        template: (stateObj) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            <state-badge\n              .hass=${this.hass!}\n              .stateObj=${stateObj}\n            ></state-badge>\n            ${stateObj.friendly_name}\n          </div>\n        `,\n      },\n    };\n\n    if (narrow) {\n      return columns;\n    }\n\n    columns.entity_id = {\n      title: \"Entity id\",\n      sortable: true,\n      filterable: true,\n    };\n    columns.domain = {\n      title: \"Domain\",\n      sortable: true,\n      filterable: true,\n    };\n    columns.last_changed = {\n      title: \"Last Changed\",\n      type: \"numeric\",\n      sortable: true,\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      <ha-card header=\"Unused entities\">\n        <div class=\"card-content\">\n          These are the entities that you have available, but are not in your\n          Lovelace UI yet.\n          ${this.lovelace.mode === \"storage\"\n            ? html`\n                <br />Select the entities you want to add to a card and then\n                click the add card button.\n              `\n            : \"\"}\n        </div>\n      </ha-card>\n      <ha-data-table\n        .columns=${this._columns(this.narrow!)}\n        .data=${this._unusedEntities.map((entity) => {\n          const stateObj = this.hass!.states[entity];\n          return {\n            entity_id: entity,\n            entity: {\n              ...stateObj,\n              friendly_name: computeStateName(stateObj),\n            },\n            domain: computeDomain(entity),\n            last_changed: stateObj!.last_changed,\n          };\n        })}\n        .id=${\"entity_id\"}\n        .selectable=${this.lovelace!.mode === \"storage\"}\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n      ${this.lovelace.mode === \"storage\"\n        ? html`\n            <ha-fab\n              class=\"${classMap({\n                rtl: computeRTL(this.hass),\n              })}\"\n              icon=\"hass:plus\"\n              label=\"${this.hass.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\"\n              @click=\"${this._selectView}\"\n            ></ha-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    this._unusedEntities = computeUnusedEntities(this.hass, this._config!);\n  }\n\n  private _handleSelectionChanged(ev: CustomEvent): void {\n    const changedSelection = ev.detail as SelectionChangedEvent;\n    const entity = changedSelection.id;\n    if (changedSelection.selected) {\n      this._selectedEntities.push(entity);\n    } else {\n      const index = this._selectedEntities.indexOf(entity);\n      if (index !== -1) {\n        this._selectedEntities.splice(index, 1);\n      }\n    }\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = (ev.target as HTMLElement)\n      .closest(\"tr\")!\n      .getAttribute(\"data-row-id\")!;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  private _selectView(): void {\n    showSelectViewDialog(this, {\n      lovelace: this.lovelace!,\n      viewSelectedCallback: (view) => this._addCard(view),\n    });\n  }\n\n  private _addCard(view: number): void {\n    showEditCardDialog(this, {\n      lovelace: this.lovelace!,\n      path: [view],\n      entities: this._selectedEntities,\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        padding: 16px;\n      }\n      ha-fab {\n        position: sticky;\n        float: right;\n        bottom: 16px;\n        z-index: 1;\n      }\n      ha-fab.rtl {\n        float: left;\n      }\n      ha-card {\n        margin-bottom: 16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n","import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { Lovelace } from \"../../types\";\n\nexport interface SelectViewDialogParams {\n  lovelace: Lovelace;\n  viewSelectedCallback: (view: number) => void;\n}\n\nexport const showSelectViewDialog = (\n  element: HTMLElement,\n  selectViewDialogParams: SelectViewDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-select-view\",\n    dialogImport: () =>\n      import(\n        /* webpackChunkName: \"hui-dialog-select-view\" */ \"./hui-dialog-select-view\"\n      ),\n    dialogParams: selectViewDialogParams,\n  });\n};\n"],"sourceRoot":""}