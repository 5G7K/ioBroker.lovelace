{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/editor/config-elements/config-elements-style.ts","webpack:///./src/components/entity/ha-entity-picker.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-alarm-panel-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","configElementStyle","html","HaEntityPicker","_LitElement","[object Object]","args","super","_initialize","this","property","type","Boolean","attribute","memoizeOne","hass","domainFilter","entityFilter","states","entityIds","Object","keys","filter","eid","substr","indexOf","sort","map","key","stateObj","entity_id","changedProps","_get","_getPrototypeOf","prototype","call","has","_opened","_hass","_getStates","_value","allowCustomEntity","root","_owner","model","firstElementChild","innerHTML","querySelector","item","textContent","computeStateName","_openedChanged","_valueChanged","autofocus","undefined","label","localize","disabled","length","ev","detail","setTimeout","fireEvent","css","LitElement","customElements","define","cardConfigStruct","entity","name","HuiAlarmPanelCardEditor","_decorate","customElement","F","kind","decorators","config","_config","_name","_entity","_states","state","index","_stateRemoved","_stateAdded","static","target","Number","newStates","splice","assign","push","configValue"],"mappings":"wGAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAIO,MAAMA,EAASC,YAAY,CAChCC,MAAO,CACLC,YCNG,SAAoBC,GACzB,MAAqB,iBAAVA,EACF,iCAEJA,EAAMC,SAAS,MACX,qDDEPC,KEPG,SAAgBF,GACrB,MAAqB,iBAAVA,EACF,4BAEJA,EAAMC,SAAS,MACX,gFCLXR,EAAAC,EAAAC,EAAA,sBAAAQ,IAEO,MAAMA,EAFbV,EAAA,GAEkCW;;;;;;;;;;;;;;;;quDCoD5BC,k2LAAN,MAAMA,UAANC,EAAwCC,eAAAC,GAAAC,SAAAD,GAAAE,EAAAC,gBAAlCN,+BACHO,YAAS,CAAEC,KAAMC,mEACjBF,YAAS,CAAEC,KAAMC,kEACjBF,YAAS,CAAEC,KAAMC,QAASC,UAAW,yFAErCH,kEACAA,mEACAA,mEACAA,YAAS,CAAEG,UAAW,8EACtBH,0EACAA,YAAS,CAAEC,KAAMC,iEACjBF,uFAEoBI,YACnB,CACEC,EACAC,EACAC,KAEA,IAAIC,EAAuB,GAE3B,IAAKH,EACH,MAAO,GAET,IAAII,EAAYC,OAAOC,KAAKN,EAAKG,QAiBjC,OAfIF,IACFG,EAAYA,EAAUG,OACnBC,GAAQA,EAAIC,OAAO,EAAGD,EAAIE,QAAQ,QAAUT,IAIjDE,EAASC,EAAUO,OAAOC,IAAKC,GAAQb,EAAMG,OAAOU,IAEhDX,IACFC,EAASA,EAAOI,OACbO,GAECA,EAASC,YAAcrB,KAAKX,OAASmB,EAAcY,KAGlDX,yCAIX,SAAkBa,GAChBC,EAAAC,EA9CE9B,EA8CF+B,WAAA,UAAAzB,MAAA0B,KAAA1B,KAAcsB,GAEVA,EAAaK,IAAI,UAAY3B,KAAK4B,UACpC5B,KAAK6B,MAAQ7B,KAAKM,0CAItB,WACE,MAAMG,EAAST,KAAK8B,WAClB9B,KAAK6B,MACL7B,KAAKO,aACLP,KAAKQ,cAGP,OAAOf;;;;iBAIMgB;iBACAT,KAAK+B;4BACM/B,KAAKgC;oBA9Fb,CAClBC,EACAC,EACAC,KAEKF,EAAKG,oBACRH,EAAKI,UAAa,qbAiBpBJ,EAAKK,cAAc,eAAgBlB,SAAWe,EAAMI,KACpDN,EAAKK,cAAc,SAAUE,YAAcC,YAAiBN,EAAMI,MAClEN,EAAKK,cAAc,eAAgBE,YAAcL,EAAMI,KAAKlB;0BAuEpCrB,KAAK0C;yBACN1C,KAAK2C;;;uBAGP3C,KAAK4C;wBACMC,IAAf7C,KAAK8C,OAAuB9C,KAAK6B,MACtC7B,KAAK6B,MAAMkB,SAAS,6CACpB/C,KAAK8C;mBACA9C,KAAK+B;sBACF/B,KAAKgD;;;;;;;YAOfhD,KAAKX,MACHI;;;;;;;;;gBAUA;YACFgB,EAAOwC,OAAS,EACdxD;;;;0BAIYO,KAAK4B,QAAU,eAAiB;;;;gBAK5C;;;uCAMZ,WACE,OAAO5B,KAAKX,OAAS,+CAGvB,SAAuB6D,GACrBlD,KAAK4B,QAAUsB,EAAGC,OAAO9D,iDAG3B,SAAsB6D,GACHA,EAAGC,OAAO9D,QACVW,KAAK+B,SACpB/B,KAAKX,MAAQ6D,EAAGC,OAAO9D,MACvB+D,WAAW,KACTC,YAAUrD,KAAM,gBAAiB,CAAEX,MAAOW,KAAKX,QAC/CgE,YAAUrD,KAAM,WACf,+CAIP,WACE,OAAOsD;;;;;;;;;;WApIkBC,KAkJ7BC,eAAeC,OAAO,mBAAoB/D,i3CChL1C,MAAMgE,EAAmBzE,YAAO,CAC9BiB,KAAM,SACNyD,OAAQ,UACRC,KAAM,UACNnD,OAAQ,WAIH,IAAMoD,80LAAbC,CAAA,CADCC,YAAc,gCACf,SAAAhE,EAAAJ,GAAA,OAAAqE,EADA,cAAArE,EAEgCC,eAAAC,GAAAC,SAAAD,GAAAE,EAAAC,QADhCjB,EAAA,EAAAkF,KAAA,QAAAC,WAAA,CAEGjE,eAFHkB,IAAA,OAAA9B,WAAA,IAAA4E,KAAA,QAAAC,WAAA,CAIGjE,eAJHkB,IAAA,UAAA9B,WAAA,IAAA4E,KAAA,SAAA9C,IAAA,YAAA9B,MAME,SAAiB8E,GACfA,EAAST,EAAiBS,GAC1BnE,KAAKoE,QAAUD,IARnB,CAAAF,KAAA,MAAA9C,IAAA,UAAA9B,MAWE,WACE,OAAOW,KAAKoE,QAAST,QAAU,KAZnC,CAAAM,KAAA,MAAA9C,IAAA,QAAA9B,MAeE,WACE,OAAOW,KAAKoE,QAASR,MAAQ,KAhBjC,CAAAK,KAAA,MAAA9C,IAAA,UAAA9B,MAmBE,WACE,OAAOW,KAAKoE,QAAS3D,QAAU,KApBnC,CAAAwD,KAAA,SAAA9C,IAAA,SAAA9B,MAuBE,WACE,IAAKW,KAAKM,KACR,OAAOb,MAKT,OAAOA;QACHD;;;;;sBAKcQ,KAAKqE;4BACC;8BACErE,KAAK2C;;;qBAGd3C,KAAKM;sBACJN,KAAKsE;2BACA;;uBAEJtE,KAAK2C;;;;mCAIO3C,KAAKuE,QAAQrD,IAAI,CAACsD,EAAOC,IAC3ChF;;4BAEW+E;;;0BAGFC;;yBAEDzE,KAAK0E;;;;;;4BAOF1E,KAAK2E;;;cApCd,CAAC,WAAY,WAAY,YAAa,qBAuCpCzD,IAAKsD,GACL/E;8BACS+E;;;;;QArE9B,CAAAP,KAAA,MAAAW,QAAA,EAAAzD,IAAA,SAAA9B,MA8EE,WACE,OAAOiE;;;;;;;;;;;;;;QA/EX,CAAAW,KAAA,SAAA9C,IAAA,gBAAA9B,MAgGE,SAAsB6D,GACpB,IAAKlD,KAAKoE,UAAYpE,KAAKuE,UAAYvE,KAAKM,KAC1C,OAGF,MAAMuE,EAAS3B,EAAG2B,OACZJ,EAAQK,OAAOD,EAAOxF,OAC5B,GAAIoF,GAAS,EAAG,CACd,MAAMM,EAAY/E,KAAKuE,QACvBQ,EAAUC,OAAOP,EAAO,GACxBzE,KAAKoE,QAALzD,OAAAsE,OAAA,GACKjF,KAAKoE,QADV,CAEE3D,OAAQsE,IAEV1B,YAAUrD,KAAM,iBAAkB,CAAEmE,OAAQnE,KAAKoE,aA9GvD,CAAAH,KAAA,SAAA9C,IAAA,cAAA9B,MAkHE,SAAoB6D,GAClB,IAAKlD,KAAKoE,UAAYpE,KAAKM,KACzB,OAEF,MAAMuE,EAAS3B,EAAG2B,OAClB,IAAKA,EAAOxF,OAASW,KAAKuE,QAAQvD,QAAQ6D,EAAOxF,QAAU,EACzD,OAEF,MAAM0F,EAAY/E,KAAKuE,QACvBQ,EAAUG,KAAKL,EAAOxF,OACtBW,KAAKoE,QAALzD,OAAAsE,OAAA,GACKjF,KAAKoE,QADV,CAEE3D,OAAQsE,IAEVF,EAAOxF,MAAQ,GACfgE,YAAUrD,KAAM,iBAAkB,CAAEmE,OAAQnE,KAAKoE,YAjIrD,CAAAH,KAAA,SAAA9C,IAAA,gBAAA9B,MAoIE,SAAsB6D,GACpB,IAAKlD,KAAKoE,UAAYpE,KAAKM,KACzB,OAEF,MAAMuE,EAAS3B,EAAG2B,OACd7E,SAAS6E,EAAOM,iBAAmBN,EAAOxF,QAG1CwF,EAAOM,cACY,KAAjBN,EAAOxF,aACFW,KAAKoE,QAAQS,EAAOM,aAE3BnF,KAAKoE,QAALzD,OAAAsE,OAAA,GACKjF,KAAKoE,QADV,CAEExE,CAACiF,EAAOM,aAAeN,EAAOxF,SAIpCgE,YAAUrD,KAAM,iBAAkB,CAAEmE,OAAQnE,KAAKoE,gBAtJRb","file":"chunk.eb18af3649325f4f7151.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import { html } from \"lit-element\";\n\nexport const configElementStyle = html`\n  <style>\n    paper-toggle-button {\n      padding-top: 16px;\n    }\n    .side-by-side {\n      display: flex;\n    }\n    .side-by-side > * {\n      flex: 1;\n      padding-right: 4px;\n    }\n    .suffix {\n      margin: 0 8px;\n    }\n  </style>\n`;\n","import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/vaadin-combo-box-light\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"./state-badge\";\n\nimport computeStateName from \"../../common/entity/compute_state_name\";\nimport {\n  LitElement,\n  TemplateResult,\n  html,\n  css,\n  CSSResult,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\nconst rowRenderer = (\n  root: HTMLElement,\n  _owner,\n  model: { item: HassEntity }\n) => {\n  if (!root.firstElementChild) {\n    root.innerHTML = `\n      <style>\n        paper-icon-item {\n          margin: -10px;\n          padding: 0;\n        }\n      </style>\n      <paper-icon-item>\n        <state-badge state-obj=\"[[item]]\" slot=\"item-icon\"></state-badge>\n        <paper-item-body two-line=\"\">\n          <div class='name'>[[_computeStateName(item)]]</div>\n          <div secondary>[[item.entity_id]]</div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  root.querySelector(\"state-badge\")!.stateObj = model.item;\n  root.querySelector(\".name\")!.textContent = computeStateName(model.item);\n  root.querySelector(\"[secondary]\")!.textContent = model.item.entity_id;\n};\n\nclass HaEntityPicker extends LitElement {\n  @property({ type: Boolean }) public autofocus?: boolean;\n  @property({ type: Boolean }) public disabled?: boolean;\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n  @property() public hass?: HomeAssistant;\n  @property() public label?: string;\n  @property() public value?: string;\n  @property({ attribute: \"domain-filter\" }) public domainFilter?: string;\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n  @property({ type: Boolean }) private _opened?: boolean;\n  @property() private _hass?: HomeAssistant;\n\n  private _getStates = memoizeOne(\n    (\n      hass: this[\"hass\"],\n      domainFilter: this[\"domainFilter\"],\n      entityFilter: this[\"entityFilter\"]\n    ) => {\n      let states: HassEntity[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (domainFilter) {\n        entityIds = entityIds.filter(\n          (eid) => eid.substr(0, eid.indexOf(\".\")) === domainFilter\n        );\n      }\n\n      states = entityIds.sort().map((key) => hass!.states[key]);\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n      return states;\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"hass\") && !this._opened) {\n      this._hass = this.hass;\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    const states = this._getStates(\n      this._hass,\n      this.domainFilter,\n      this.entityFilter\n    );\n\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"entity_id\"\n        item-label-path=\"entity_id\"\n        .items=${states}\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomEntity}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label === undefined && this._hass\n            ? this._hass.localize(\"ui.components.entity.entity-picker.entity\")\n            : this.label}\n          .value=${this._value}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <paper-icon-button\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  icon=\"hass:close\"\n                  no-ripple\n                >\n                  Clear\n                </paper-icon-button>\n              `\n            : \"\"}\n          ${states.length > 0\n            ? html`\n                <paper-icon-button\n                  slot=\"suffix\"\n                  class=\"toggle-button\"\n                  .icon=${this._opened ? \"hass:menu-up\" : \"hass:menu-down\"}\n                >\n                  Toggle\n                </paper-icon-button>\n              `\n            : \"\"}\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this.value = ev.detail.value;\n      setTimeout(() => {\n        fireEvent(this, \"value-changed\", { value: this.value });\n        fireEvent(this, \"change\");\n      }, 0);\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input > paper-icon-button {\n        width: 24px;\n        height: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-picker\", HaEntityPicker);\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n  CSSResult,\n  css,\n} from \"lit-element\";\nimport \"@polymer/paper-dropdown-menu/paper-dropdown-menu\";\nimport \"@polymer/paper-item/paper-item\";\nimport \"@polymer/paper-listbox/paper-listbox\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\n\nimport \"../../../../components/entity/ha-entity-picker\";\nimport \"../../../../components/ha-icon\";\nimport { AlarmPanelCardConfig } from \"../../cards/types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  entity: \"string?\",\n  name: \"string?\",\n  states: \"array?\",\n});\n\n@customElement(\"hui-alarm-panel-card-editor\")\nexport class HuiAlarmPanelCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: AlarmPanelCardConfig;\n\n  public setConfig(config: AlarmPanelCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _states(): string[] {\n    return this._config!.states || [];\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    const states = [\"arm_home\", \"arm_away\", \"arm_night\", \"arm_custom_bypass\"];\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <div class=\"side-by-side\">\n          <paper-input\n            label=\"Name\"\n            .value=\"${this._name}\"\n            .configValue=\"${\"name\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></paper-input>\n          <ha-entity-picker\n            .hass=\"${this.hass}\"\n            .value=\"${this._entity}\"\n            .configValue=${\"entity\"}\n            domain-filter=\"alarm_control_panel\"\n            @change=\"${this._valueChanged}\"\n            allow-custom-entity\n          ></ha-entity-picker>\n        </div>\n        <span>Used States</span> ${this._states.map((state, index) => {\n          return html`\n            <div class=\"states\">\n              <paper-item>${state}</paper-item>\n              <ha-icon\n                class=\"deleteState\"\n                .value=\"${index}\"\n                icon=\"hass:close\"\n                @click=${this._stateRemoved}\n              ></ha-icon>\n            </div>\n          `;\n        })}\n        <paper-dropdown-menu\n          label=\"Available States\"\n          @value-changed=\"${this._stateAdded}\"\n        >\n          <paper-listbox slot=\"dropdown-content\">\n            ${states.map((state) => {\n              return html`\n                <paper-item>${state}</paper-item>\n              `;\n            })}\n          </paper-listbox>\n        </paper-dropdown-menu>\n      </div>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .states {\n        display: flex;\n        flex-direction: row;\n      }\n      .deleteState {\n        visibility: hidden;\n      }\n      .states:hover > .deleteState {\n        visibility: visible;\n      }\n      ha-icon {\n        padding-top: 12px;\n      }\n    `;\n  }\n\n  private _stateRemoved(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this._states || !this.hass) {\n      return;\n    }\n\n    const target = ev.target! as EditorTarget;\n    const index = Number(target.value);\n    if (index > -1) {\n      const newStates = this._states;\n      newStates.splice(index, 1);\n      this._config = {\n        ...this._config,\n        states: newStates,\n      };\n      fireEvent(this, \"config-changed\", { config: this._config });\n    }\n  }\n\n  private _stateAdded(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (!target.value || this._states.indexOf(target.value) >= 0) {\n      return;\n    }\n    const newStates = this._states;\n    newStates.push(target.value);\n    this._config = {\n      ...this._config,\n      states: newStates,\n    };\n    target.value = \"\";\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-alarm-panel-card-editor\": HuiAlarmPanelCardEditor;\n  }\n}\n"],"sourceRoot":""}