{"version":3,"sources":["webpack:///./src/mixins/events-mixin.js","webpack:///./src/components/ha-markdown.js","webpack:///./src/mixins/localize-mixin.js","webpack:///./src/components/ha-card.ts","webpack:///./src/components/ha-relative-time.js","webpack:///./src/common/datetime/relative_time.ts","webpack:///./src/dialogs/notifications/notification-item-template.ts","webpack:///./src/dialogs/notifications/configurator-notification-item.ts","webpack:///./src/dialogs/notifications/persistent-notification-item.ts","webpack:///./src/dialogs/notifications/notification-item.ts","webpack:///./src/components/ha-paper-icon-button-prev.ts","webpack:///./src/dialogs/notifications/notification-drawer.js"],"names":["__webpack_require__","d","__webpack_exports__","EventsMixin","_polymer_polymer_lib_utils_mixin__WEBPACK_IMPORTED_MODULE_0__","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_1__","dedupingMixin","superClass","fire","type","detail","options","fireEvent","node","this","_polymer_polymer_polymer_element__WEBPACK_IMPORTED_MODULE_0__","_mixins_events_mixin__WEBPACK_IMPORTED_MODULE_1__","loaded","svgWhiteList","customElements","define","PolymerElement","properties","content","String","observer","allowSvg","Boolean","value","connectedCallback","super","_scriptLoaded","_renderScheduled","_resize","Promise","all","e","then","bind","marked","filterXSS","_render","resolve","innerHTML","gfm","tables","breaks","onIgnoreTag","tag","html","indexOf","walker","document","createTreeWalker","nextNode","currentNode","tagName","host","location","target","addEventListener","innerText","hass","Object","localize","Function","computed","__computeLocalize","HaCard","_LitElement","[object Object]","args","_initialize","property","css","header","LitElement","_polymer_polymer_lib_legacy_polymer_dom__WEBPACK_IMPORTED_MODULE_0__","_polymer_polymer_polymer_element__WEBPACK_IMPORTED_MODULE_1__","_common_datetime_relative_time__WEBPACK_IMPORTED_MODULE_2__","_mixins_localize_mixin__WEBPACK_IMPORTED_MODULE_3__","LocalizeMixin","datetime","datetimeObj","parsedDateTime","constructor","updateRelative","updateInterval","setInterval","disconnectedCallback","clearInterval","datetimeChanged","newVal","Date","datetimeObjChanged","root","dom","relativeTime","tests","langKey","dateObj","delta","compareTime","getTime","tense","timeDesc","Math","abs","i","length","floor","undefined","includeTense","_decorate","customElement","F","kind","key","static","configurator_notification_item_decorate","decorators","notification","attributes","friendly_name","_handleClick","state","entityId","entity_id","persistent_notification_item_decorate","title","notification_id","message","created_at","_computeTooltip","_handleDismiss","callService","toLocaleDateString","language","year","month","day","minute","hour","notification_item_decorate","changedProps","has","paperIconButtonClass","get","icon","window","getComputedStyle","direction","notification_drawer_HuiNotificationDrawer","HuiNotificationDrawer","template","open","notifications","Array","_notificationsBackend","ready","_closeDrawer","ev","stopPropagation","_empty","_openChanged","_unsubNotifications","subscribeNotifications","connection","_computeNotifications","notificationsBackend","configuratorEntities","keys","states","filter","computeDomain","map","concat","showDialog","narrow","style","setProperty","innerWidth","$","drawer"],"mappings":"2FAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,GAAAK,EAAAL,EAAA,IAmCO,MAAMG,EAAcG,YACxBC,IACC,cAAcA,EAgBZC,KAAKC,EAAMC,EAAQC,GAEjB,OADAA,EAAUA,GAAW,GACdC,YAAUD,EAAQE,MAAQC,KAAML,EAAMC,EAAQC,yCCvD7D,IAAAI,EAAAf,EAAA,IAAAgB,EAAAhB,EAAA,KAGA,IAAIiB,EAAS,KAMb,MAAMC,EAAe,CAAC,MAAO,QA6F7BC,eAAeC,OAAO,cAxFtB,cAAyBjB,YAAYkB,MACnCC,wBACE,MAAO,CACLC,QAAS,CACPd,KAAMe,OACNC,SAAU,WAEZC,SAAU,CACRjB,KAAMkB,QACNC,OAAO,IAKbC,oBACEC,MAAMD,oBAENf,KAAKiB,cAAgB,EACrBjB,KAAKkB,kBAAmB,EACxBlB,KAAKmB,QAAU,IAAMnB,KAAKN,KAAK,eAE1BS,IACHA,EAASiB,QAAAC,IAAA,CAAAnC,EAAAoC,EAAA,IAAApC,EAAAoC,EAAA,MAAAC,KAAArC,EAAAsC,KAAA,YAEXrB,EACGoB,KACC,EAAGE,SAAQC,gBACT1B,KAAKyB,OAASA,EACdzB,KAAK0B,UAAYA,EACjB1B,KAAKiB,cAAgB,GAEvB,KACEjB,KAAKiB,cAAgB,IAGxBM,KAAK,IAAMvB,KAAK2B,WAGrBA,UAC6B,IAAvB3B,KAAKiB,eAAuBjB,KAAKkB,mBAErClB,KAAKkB,kBAAmB,EAGxBE,QAAQQ,UAAUL,KAAK,KAGrB,GAFAvB,KAAKkB,kBAAmB,EAEG,IAAvBlB,KAAKiB,cAAqB,CAC5BjB,KAAK6B,UAAY7B,KAAK0B,UACpB1B,KAAKyB,OAAOzB,KAAKS,QAAS,CACxBqB,KAAK,EACLC,QAAQ,EACRC,QAAQ,IAEV,CACEC,YAAajC,KAAKY,SACd,CAACsB,EAAKC,IAAU/B,EAAagC,QAAQF,IAAQ,EAAIC,EAAO,KACxD,OAGRnC,KAAKmB,UAEL,MAAMkB,EAASC,SAASC,iBACtBvC,KACA,EACA,MACA,GAGF,KAAOqC,EAAOG,YAAY,CACxB,MAAMzC,EAAOsC,EAAOI,YAGC,MAAjB1C,EAAK2C,SAAmB3C,EAAK4C,OAASL,SAASM,SAASD,KAC1D5C,EAAK8C,OAAS,SAGY,QAAjB9C,EAAK2C,SACd3C,EAAK+C,iBAAiB,OAAQ9C,KAAKmB,eAGP,IAAvBnB,KAAKiB,gBACdjB,KAAK+C,UAAY/C,KAAKS,iDChG9B,IAAAnB,EAAAJ,EAAA,GAMeM,gBACZC,IACC,cAAcA,EACZe,wBACE,MAAO,CACLwC,KAAMC,OAONC,SAAU,CACRvD,KAAMwD,SACNC,SAAU,qCAKhBC,kBAAkBH,GAChB,OAAOA,4vCCjBTI,22LAAN,cAAAC,EAAgCC,eAAAC,GAAAzC,SAAAyC,GAAAC,EAAA1D,qCAC7B2D,mFAED,WACE,OAAOC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0CA+CT,WACE,OAAOzB;QACHnC,KAAK6D,OACH1B;uCAC6BnC,KAAK6D;YAElC1B;;WAzDW2B,KA+DrBzD,eAAeC,OAAO,UAAWgD,qCCxEjC,IAAAS,EAAA7E,EAAA,GAAA8E,EAAA9E,EAAA,IAAA+E,EAAA/E,EAAA,KAAAgF,EAAAhF,EAAA,KAkEAmB,eAAeC,OAAO,mBAxDtB,cAA6B6D,YAAc5D,MACzCC,wBACE,MAAO,CACLwC,KAAMC,OACNmB,SAAU,CACRzE,KAAMe,OACNC,SAAU,mBAGZ0D,YAAa,CACX1E,KAAMsD,OACNtC,SAAU,sBAGZ2D,eAAgBrB,QAIpBsB,cACEvD,QACAhB,KAAKwE,eAAiBxE,KAAKwE,eAAehD,KAAKxB,MAGjDe,oBACEC,MAAMD,oBAENf,KAAKyE,eAAiBC,YAAY1E,KAAKwE,eAAgB,KAGzDG,uBACE3D,MAAM2D,uBACNC,cAAc5E,KAAKyE,gBAGrBI,gBAAgBC,GACd9E,KAAKsE,eAAiBQ,EAAS,IAAIC,KAAKD,GAAU,KAElD9E,KAAKwE,iBAGPQ,mBAAmBF,GACjB9E,KAAKsE,eAAiBQ,EAEtB9E,KAAKwE,iBAGPA,iBACE,MAAMS,EAAOC,YAAIlF,MACZA,KAAKsE,eAGRW,EAAKpD,UAAYsD,YAAanF,KAAKsE,eAAgBtE,KAAKkD,UAFxD+B,EAAKpD,UAAY7B,KAAKkD,SAAS,0ECzDrChE,EAAAC,EAAAC,EAAA,sBAAA+F,IAKA,MAAMC,EAAQ,CAAC,GAAI,GAAI,GAAI,GACrBC,EAAU,CAAC,SAAU,SAAU,OAAQ,OAE9B,SAASF,EACtBG,EACApC,EACArD,EAGI,IAGJ,IAAI0F,IADgB1F,EAAQ2F,aAAe,IAAIT,MACtBU,UAAYH,EAAQG,WAAa,IAC1D,MAAMC,EAAQH,GAAS,EAAI,OAAS,SAGpC,IAAII,EAFJJ,EAAQK,KAAKC,IAAIN,GAIjB,IAAK,IAAIO,EAAI,EAAGA,EAAIV,EAAMW,OAAQD,IAAK,CACrC,GAAIP,EAAQH,EAAMU,GAAI,CACpBP,EAAQK,KAAKI,MAAMT,GACnBI,EAAWzC,0CAC+BmC,EAAQS,KAChD,QACAP,GAEF,MAGFA,GAASH,EAAMU,GAYjB,YATiBG,IAAbN,IAEFA,EAAWzC,EACT,4CACA,QAHFqC,EAAQK,KAAKI,MAAMT,MAQW,IAAzB1F,EAAQqG,aACXP,EACAzC,iCAAwCwC,IAAS,OAAQC,onOCtC/DQ,CAAA,CADCC,YAAc,+BACf,SAAA1C,EAAAH,GAAA,OAAA8C,EADA,cAAA9C,EAC4DC,eAAAC,GAAAzC,SAAAyC,GAAAC,EAAA1D,QAA5Db,EAAA,EAAAmH,KAAA,SAAAC,IAAA,SAAAzF,MACE,WACE,OAAOqB;;;;;;QAFX,CAAAmE,KAAA,MAAAE,QAAA,EAAAD,IAAA,SAAAzF,MAWE,WACE,OAAO8C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;WAZsCE,4hOCIjD2C,CAAA,CADCL,YAAc,mCACf,SAAA1C,EAAAH,GAAA,OAAA8C,EADA,cAAA9C,EACgEC,eAAAC,GAAAzC,SAAAyC,GAAAC,EAAA1D,QAAhEb,EAAA,EAAAmH,KAAA,QAAAI,WAAA,CACG/C,eADH4C,IAAA,OAAAzF,WAAA,IAAAwF,KAAA,QAAAI,WAAA,CAGG/C,eAHH4C,IAAA,eAAAzF,WAAA,IAAAwF,KAAA,SAAAC,IAAA,SAAAzF,MAKE,WACE,OAAKd,KAAKgD,MAAShD,KAAK2G,aAIjBxE;;8BAEmBnC,KAAKgD,KAAKE,SAAS;;;YAGrClD,KAAKgD,KAAKE,SACV,4CACA,SACAlD,KAAK2G,aAAaC,WAAWC;;;6CAII7G,KAAK8G;aACrC9G,KAAKgD,KAAKE,+BACWlD,KAAK2G,aAAaI;;;MAjBvC5E,QAPb,CAAAmE,KAAA,SAAAC,IAAA,eAAAzF,MA+BE,WACEhB,YAAUE,KAAM,iBAAkB,CAChCgH,SAAUhH,KAAK2G,aAAcM,iBAjCkBnD,qiOCIrDoD,CAAA,CADCd,YAAc,iCACf,SAAA1C,EAAAH,GAAA,OAAA8C,EADA,cAAA9C,EAC8DC,eAAAC,GAAAzC,SAAAyC,GAAAC,EAAA1D,QAA9Db,EAAA,EAAAmH,KAAA,QAAAI,WAAA,CACG/C,eADH4C,IAAA,OAAAzF,WAAA,IAAAwF,KAAA,QAAAI,WAAA,CAGG/C,eAHH4C,IAAA,eAAAzF,WAAA,IAAAwF,KAAA,SAAAC,IAAA,SAAAzF,MAKE,WACE,OAAKd,KAAKgD,MAAShD,KAAK2G,aAIjBxE;;;YAGCnC,KAAK2G,aAAaQ,OAASnH,KAAK2G,aAAaS;;;gCAGzBpH,KAAK2G,aAAaU;;;;;uBAK3BrH,KAAKgD;2BACDhD,KAAK2G,aAAaW;;;iBAG5BtH,KAAKuH,gBACNvH,KAAKgD,KACLhD,KAAK2G;;;;;6CAMwB3G,KAAKwH;aACrCxH,KAAKgD,KAAKE,SACX;;;MA5BCf,QAPb,CAAAmE,KAAA,MAAAE,QAAA,EAAAD,IAAA,SAAAzF,MA0CE,WACE,OAAO8C;;;;;;;;;;;;QA3CX,CAAA0C,KAAA,SAAAC,IAAA,iBAAAzF,MA0DE,WACEd,KAAKgD,KAAMyE,YAAY,0BAA2B,UAAW,CAC3DL,gBAAiBpH,KAAK2G,aAAcS,oBA5D1C,CAAAd,KAAA,SAAAC,IAAA,kBAAAzF,MAgEE,SACEkC,EACA2D,GAEA,IAAK3D,IAAS2D,EACZ,OAIF,OADU,IAAI5B,KAAK4B,EAAaW,YACvBI,mBAAmB1E,EAAK2E,SAAU,CACzCC,KAAM,UACNC,MAAO,QACPC,IAAK,UACLC,OAAQ,UACRC,KAAM,iBA9EuClE,ghOCHnDmE,CAAA,CADC7B,YAAc,sBACf,SAAA1C,EAAAH,GAAA,OAAA8C,EADA,cAAA9C,EACoDC,eAAAC,GAAAzC,SAAAyC,GAAAC,EAAA1D,QAApDb,EAAA,EAAAmH,KAAA,QAAAI,WAAA,CACG/C,eADH4C,IAAA,OAAAzF,WAAA,IAAAwF,KAAA,QAAAI,WAAA,CAGG/C,eAHH4C,IAAA,eAAAzF,WAAA,IAAAwF,KAAA,SAAAC,IAAA,eAAAzF,MAKE,SAAuBoH,GACrB,QAAKlI,KAAKgD,MAAShD,KAAK2G,eAAgBuB,EAAaC,IAAI,mBAN7D,CAAA7B,KAAA,SAAAC,IAAA,SAAAzF,MAaE,WACE,OAAKd,KAAKgD,MAAShD,KAAK2G,aAIjB,cAAe3G,KAAK2G,aACvBxE;;qBAEanC,KAAKgD;6BACGhD,KAAK2G;;UAG1BxE;;qBAEanC,KAAKgD;6BACGhD,KAAK2G;;UAbrBxE,WAf4B2B,KCXzC,MAAMsE,EAAuB/H,eAAegI,IAC1C,qBAqBFhI,eAAeC,OAAO,4BAlBf,cAAoC8H,EAClCrH,oBACLf,KAAKsI,KACyC,QAA5CC,OAAOC,iBAAiBxI,MAAMyI,UAC1B,oBACA,qBAGNzH,MAAMD,+DClBV7B,EAAAC,EAAAC,EAAA,0CAAAsJ,IAmBO,MAAMC,UAA8BtJ,YACzC8E,YAAc5D,OAEdqI,sBACE,OAAOzG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;MA+CT3B,wBACE,MAAO,CACLwC,KAAMC,OACN4F,KAAM,CACJlJ,KAAMkB,QACNF,SAAU,gBAEZmI,cAAe,CACbnJ,KAAMoJ,MACN3F,SAAU,4DAEZ4F,sBAAuB,CACrBrJ,KAAMoJ,MACNjI,MAAO,KAKbmI,QACEjI,MAAMiI,QACNV,OAAOzF,iBAAiB,mBAAoB,KAEtC9C,KAAK6I,OACP7I,KAAK6I,MAAO,KAKlBK,aAAaC,GACXA,EAAGC,kBACHpJ,KAAK6I,MAAO,EAGdQ,OAAOP,GACL,OAAgC,IAAzBA,EAAc/C,OAGvBuD,aAAaT,GACPA,EAEF7I,KAAKuJ,oBAAsBC,YACzBxJ,KAAKgD,KAAKyG,WACTX,IACC9I,KAAKgJ,sBAAwBF,IAGxB9I,KAAKuJ,sBACdvJ,KAAKuJ,sBACLvJ,KAAKuJ,yBAAsBtD,GAI/ByD,sBAAsBb,EAAM7F,EAAM2G,GAChC,IAAKd,EACH,MAAO,GAGT,MAAMe,EAAuB3G,OAAO4G,KAAK7G,EAAK8G,QAC3CC,OAAQ/C,GAAyC,iBAA5BgD,YAAchD,IACnCiD,IAAKjD,GAAahE,EAAK8G,OAAO9C,IAEjC,OAAO2C,EAAqBO,OAAON,GAGrCO,YAAWC,OAAEA,IACXpK,KAAKqK,MAAMC,YACT,qBACAF,EAAS7B,OAAOgC,WAAa,KAAO,SAEtCvK,KAAKwK,EAAEC,OAAO5B,QAGlBxI,eAAeC,OAAO,sBAAuBqI","file":"chunk.af3cf347b26374dd3c66.js","sourcesContent":["import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n// Polymer legacy event helpers used courtesy of the Polymer project.\n//\n// Copyright (c) 2017 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/* @polymerMixin */\nexport const EventsMixin = dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      /**\n   * Dispatches a custom event with an optional detail value.\n   *\n   * @param {string} type Name of event type.\n   * @param {*=} detail Detail value containing event-specific\n   *   payload.\n   * @param {{ bubbles: (boolean|undefined),\n               cancelable: (boolean|undefined),\n                composed: (boolean|undefined) }=}\n    *  options Object specifying options.  These may include:\n    *  `bubbles` (boolean, defaults to `true`),\n    *  `cancelable` (boolean, defaults to false), and\n    *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n    * @return {Event} The new event that was fired.\n    */\n      fire(type, detail, options) {\n        options = options || {};\n        return fireEvent(options.node || this, type, detail, options);\n      }\n    }\n);\n","import { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { EventsMixin } from \"../mixins/events-mixin\";\n\nlet loaded = null;\n\n/**\n * White list allowed svg tag.\n * Only put in the tag used in QR code, can be extend in future.\n */\nconst svgWhiteList = [\"svg\", \"path\"];\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaMarkdown extends EventsMixin(PolymerElement) {\n  static get properties() {\n    return {\n      content: {\n        type: String,\n        observer: \"_render\",\n      },\n      allowSvg: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // 0 = not loaded, 1 = success, 2 = error\n    this._scriptLoaded = 0;\n    this._renderScheduled = false;\n    this._resize = () => this.fire(\"iron-resize\");\n\n    if (!loaded) {\n      loaded = import(/* webpackChunkName: \"load_markdown\" */ \"../resources/load_markdown\");\n    }\n    loaded\n      .then(\n        ({ marked, filterXSS }) => {\n          this.marked = marked;\n          this.filterXSS = filterXSS;\n          this._scriptLoaded = 1;\n        },\n        () => {\n          this._scriptLoaded = 2;\n        }\n      )\n      .then(() => this._render());\n  }\n\n  _render() {\n    if (this._scriptLoaded === 0 || this._renderScheduled) return;\n\n    this._renderScheduled = true;\n\n    // debounce it to next microtask.\n    Promise.resolve().then(() => {\n      this._renderScheduled = false;\n\n      if (this._scriptLoaded === 1) {\n        this.innerHTML = this.filterXSS(\n          this.marked(this.content, {\n            gfm: true,\n            tables: true,\n            breaks: true,\n          }),\n          {\n            onIgnoreTag: this.allowSvg\n              ? (tag, html) => (svgWhiteList.indexOf(tag) >= 0 ? html : null)\n              : null,\n          }\n        );\n        this._resize();\n\n        const walker = document.createTreeWalker(\n          this,\n          1 /* SHOW_ELEMENT */,\n          null,\n          false\n        );\n\n        while (walker.nextNode()) {\n          const node = walker.currentNode;\n\n          // Open external links in a new window\n          if (node.tagName === \"A\" && node.host !== document.location.host) {\n            node.target = \"_blank\";\n\n            // Fire a resize event when images loaded to notify content resized\n          } else if (node.tagName === \"IMG\") {\n            node.addEventListener(\"load\", this._resize);\n          }\n        }\n      } else if (this._scriptLoaded === 2) {\n        this.innerText = this.content;\n      }\n    });\n  }\n}\n\ncustomElements.define(\"ha-markdown\", HaMarkdown);\n","import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n/**\n * Polymer Mixin to enable a localize function powered by language/resources from hass object.\n *\n * @polymerMixin\n */\nexport default dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      static get properties() {\n        return {\n          hass: Object,\n\n          /**\n           * Translates a string to the current `language`. Any parameters to the\n           * string should be passed in order, as follows:\n           * `localize(stringKey, param1Name, param1Value, param2Name, param2Value)`\n           */\n          localize: {\n            type: Function,\n            computed: \"__computeLocalize(hass.localize)\",\n          },\n        };\n      }\n\n      __computeLocalize(localize) {\n        return localize;\n      }\n    }\n);\n","import {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\nclass HaCard extends LitElement {\n  @property() public header?: string;\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 2px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0 2px 2px 0 rgba(0, 0, 0, 0.14),\n          0 1px 5px 0 rgba(0, 0, 0, 0.12),\n          0 3px 1px -2px rgba(0, 0, 0, 0.2)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        padding: 24px 16px 16px;\n        display: block;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`\n            <div class=\"card-header\">${this.header}</div>\n          `\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ncustomElements.define(\"ha-card\", HaCard);\n","import { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport relativeTime from \"../common/datetime/relative_time\";\n\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaRelativeTime extends LocalizeMixin(PolymerElement) {\n  static get properties() {\n    return {\n      hass: Object,\n      datetime: {\n        type: String,\n        observer: \"datetimeChanged\",\n      },\n\n      datetimeObj: {\n        type: Object,\n        observer: \"datetimeObjChanged\",\n      },\n\n      parsedDateTime: Object,\n    };\n  }\n\n  constructor() {\n    super();\n    this.updateRelative = this.updateRelative.bind(this);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // update every 60 seconds\n    this.updateInterval = setInterval(this.updateRelative, 60000);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    clearInterval(this.updateInterval);\n  }\n\n  datetimeChanged(newVal) {\n    this.parsedDateTime = newVal ? new Date(newVal) : null;\n\n    this.updateRelative();\n  }\n\n  datetimeObjChanged(newVal) {\n    this.parsedDateTime = newVal;\n\n    this.updateRelative();\n  }\n\n  updateRelative() {\n    const root = dom(this);\n    if (!this.parsedDateTime) {\n      root.innerHTML = this.localize(\"ui.components.relative_time.never\");\n    } else {\n      root.innerHTML = relativeTime(this.parsedDateTime, this.localize);\n    }\n  }\n}\n\ncustomElements.define(\"ha-relative-time\", HaRelativeTime);\n","import { LocalizeFunc } from \"../translations/localize\";\n\n/**\n * Calculate a string representing a date object as relative time from now.\n *\n * Example output: 5 minutes ago, in 3 days.\n */\nconst tests = [60, 60, 24, 7];\nconst langKey = [\"second\", \"minute\", \"hour\", \"day\"];\n\nexport default function relativeTime(\n  dateObj: Date,\n  localize: LocalizeFunc,\n  options: {\n    compareTime?: Date;\n    includeTense?: boolean;\n  } = {}\n): string {\n  const compareTime = options.compareTime || new Date();\n  let delta = (compareTime.getTime() - dateObj.getTime()) / 1000;\n  const tense = delta >= 0 ? \"past\" : \"future\";\n  delta = Math.abs(delta);\n\n  let timeDesc;\n\n  for (let i = 0; i < tests.length; i++) {\n    if (delta < tests[i]) {\n      delta = Math.floor(delta);\n      timeDesc = localize(\n        `ui.components.relative_time.duration.${langKey[i]}`,\n        \"count\",\n        delta\n      );\n      break;\n    }\n\n    delta /= tests[i];\n  }\n\n  if (timeDesc === undefined) {\n    delta = Math.floor(delta);\n    timeDesc = localize(\n      \"ui.components.relative_time.duration.week\",\n      \"count\",\n      delta\n    );\n  }\n\n  return options.includeTense === false\n    ? timeDesc\n    : localize(`ui.components.relative_time.${tense}`, \"time\", timeDesc);\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport \"../../components/ha-card\";\n\n@customElement(\"notification-item-template\")\nexport class HuiNotificationItemTemplate extends LitElement {\n  protected render(): TemplateResult | void {\n    return html`\n      <ha-card>\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div class=\"contents\"><slot></slot></div>\n        <div class=\"actions\"><slot name=\"actions\"></slot></div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .contents {\n        padding: 16px;\n        -ms-user-select: text;\n        -webkit-user-select: text;\n        -moz-user-select: text;\n        user-select: text;\n      }\n\n      ha-card .header {\n        /* start paper-font-headline style */\n        font-family: \"Roboto\", \"Noto\", sans-serif;\n        -webkit-font-smoothing: antialiased; /* OS X subpixel AA bleed bug */\n        text-rendering: optimizeLegibility;\n        font-size: 24px;\n        font-weight: 400;\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        /* end paper-font-headline style */\n\n        color: var(--primary-text-color);\n        padding: 16px 16px 0;\n      }\n\n      .actions {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n\n      ::slotted(.primary) {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"notification-item-template\": HuiNotificationItemTemplate;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\n\nimport \"./notification-item-template\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { PersitentNotificationEntity } from \"../../data/persistent_notification\";\n\n@customElement(\"configurator-notification-item\")\nexport class HuiConfiguratorNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: PersitentNotificationEntity;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return html`\n      <notification-item-template>\n        <span slot=\"header\">${this.hass.localize(\"domain.configurator\")}</span>\n\n        <div>\n          ${this.hass.localize(\n            \"ui.notification_drawer.click_to_configure\",\n            \"entity\",\n            this.notification.attributes.friendly_name\n          )}\n        </div>\n\n        <mwc-button slot=\"actions\" @click=\"${this._handleClick}\"\n          >${this.hass.localize(\n            `state.configurator.${this.notification.state}`\n          )}</mwc-button\n        >\n      </notification-item-template>\n    `;\n  }\n\n  private _handleClick(): void {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this.notification!.entity_id,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"configurator-notification-item\": HuiConfiguratorNotificationItem;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\n\nimport \"../../components/ha-relative-time\";\nimport \"../../components/ha-markdown\";\nimport \"./notification-item-template\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { PersistentNotification } from \"../../data/persistent_notification\";\n\n@customElement(\"persistent-notification-item\")\nexport class HuiPersistentNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: PersistentNotification;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return html`\n      <notification-item-template>\n        <span slot=\"header\">\n          ${this.notification.title || this.notification.notification_id}\n        </span>\n\n        <ha-markdown content=\"${this.notification.message}\"></ha-markdown>\n\n        <div class=\"time\">\n          <span>\n            <ha-relative-time\n              .hass=\"${this.hass}\"\n              .datetime=\"${this.notification.created_at}\"\n            ></ha-relative-time>\n            <paper-tooltip\n              >${this._computeTooltip(\n                this.hass,\n                this.notification\n              )}</paper-tooltip\n            >\n          </span>\n        </div>\n\n        <mwc-button slot=\"actions\" @click=\"${this._handleDismiss}\"\n          >${this.hass.localize(\n            \"ui.card.persistent_notification.dismiss\"\n          )}</mwc-button\n        >\n      </notification-item-template>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .time {\n        display: flex;\n        justify-content: flex-end;\n        margin-top: 6px;\n      }\n      ha-relative-time {\n        color: var(--secondary-text-color);\n      }\n      a {\n        color: var(--primary-color);\n      }\n    `;\n  }\n\n  private _handleDismiss(): void {\n    this.hass!.callService(\"persistent_notification\", \"dismiss\", {\n      notification_id: this.notification!.notification_id,\n    });\n  }\n\n  private _computeTooltip(\n    hass: HomeAssistant,\n    notification: PersistentNotification\n  ): string | undefined {\n    if (!hass || !notification) {\n      return undefined;\n    }\n\n    const d = new Date(notification.created_at!);\n    return d.toLocaleDateString(hass.language, {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      minute: \"numeric\",\n      hour: \"numeric\",\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"persistent-notification-item\": HuiPersistentNotificationItem;\n  }\n}\n","import {\n  LitElement,\n  property,\n  customElement,\n  PropertyValues,\n  TemplateResult,\n  html,\n} from \"lit-element\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\n\nimport \"./configurator-notification-item\";\nimport \"./persistent-notification-item\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { PersistentNotification } from \"../../data/persistent_notification\";\n\n@customElement(\"notification-item\")\nexport class HuiNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: HassEntity | PersistentNotification;\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (!this.hass || !this.notification || changedProps.has(\"notification\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return \"entity_id\" in this.notification\n      ? html`\n          <configurator-notification-item\n            .hass=\"${this.hass}\"\n            .notification=\"${this.notification}\"\n          ></configurator-notification-item>\n        `\n      : html`\n          <persistent-notification-item\n            .hass=\"${this.hass}\"\n            .notification=\"${this.notification}\"\n          ></persistent-notification-item>\n        `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"notification-item\": HuiNotificationItem;\n  }\n}\n","import { Constructor } from \"lit-element\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\n// Not duplicate, this is for typing.\n// tslint:disable-next-line\nimport { PaperIconButtonElement } from \"@polymer/paper-icon-button/paper-icon-button\";\n\nconst paperIconButtonClass = customElements.get(\n  \"paper-icon-button\"\n) as Constructor<PaperIconButtonElement>;\n\nexport class HaPaperIconButtonPrev extends paperIconButtonClass {\n  public connectedCallback() {\n    this.icon =\n      window.getComputedStyle(this).direction === \"ltr\"\n        ? \"hass:chevron-left\"\n        : \"hass:chevron-right\";\n\n    // calling super after setting icon to have it consistently show the icon (otherwise not always shown)\n    super.connectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-icon-button-prev\": HaPaperIconButtonPrev;\n  }\n}\n\ncustomElements.define(\"ha-paper-icon-button-prev\", HaPaperIconButtonPrev);\n","import \"@polymer/app-layout/app-drawer/app-drawer\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\n\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"./notification-item\";\nimport \"../../components/ha-paper-icon-button-prev\";\n\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport LocalizeMixin from \"../../mixins/localize-mixin\";\nimport { subscribeNotifications } from \"../../data/persistent_notification\";\nimport computeDomain from \"../../common/entity/compute_domain\";\n/*\n * @appliesMixin EventsMixin\n * @appliesMixin LocalizeMixin\n */\nexport class HuiNotificationDrawer extends EventsMixin(\n  LocalizeMixin(PolymerElement)\n) {\n  static get template() {\n    return html`\n    <style include=\"paper-material-styles\">\n      app-toolbar {\n        color: var(--primary-text-color);\n        border-bottom: 1px solid var(--divider-color);\n        background-color: var(--primary-background-color);\n        min-height: 64px;\n        width: calc(100% - 32px);\n      }\n\n      .notifications {\n        overflow-y: auto;\n        padding-top: 16px;\n      }\n\n      .notification {\n        padding: 0 16px 16px;\n      }\n\n      .empty {\n        padding: 16px;\n        text-align: center;\n      }\n    </style>\n    <app-drawer id='drawer' opened=\"{{open}}\" disable-swipe>\n      <app-toolbar>\n        <div main-title>[[localize('ui.notification_drawer.title')]]</div>\n        <ha-paper-icon-button-prev on-click=\"_closeDrawer\"></paper-icon-button>\n      </app-toolbar>\n      <div class=\"notifications\">\n        <template is=\"dom-if\" if=\"[[!_empty(notifications)]]\">\n          <dom-repeat items=\"[[notifications]]\">\n            <template>\n              <div class=\"notification\">\n                <notification-item hass=\"[[hass]]\" notification=\"[[item]]\"></notification-item>\n              </div>\n            </template>\n          </dom-repeat>\n        </template>\n        <template is=\"dom-if\" if=\"[[_empty(notifications)]]\">\n          <div class=\"empty\">[[localize('ui.notification_drawer.empty')]]<div>\n        </template>\n      </div>\n    </app-drawer>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      open: {\n        type: Boolean,\n        observer: \"_openChanged\",\n      },\n      notifications: {\n        type: Array,\n        computed: \"_computeNotifications(open, hass, _notificationsBackend)\",\n      },\n      _notificationsBackend: {\n        type: Array,\n        value: [],\n      },\n    };\n  }\n\n  ready() {\n    super.ready();\n    window.addEventListener(\"location-changed\", () => {\n      // close drawer when we navigate away.\n      if (this.open) {\n        this.open = false;\n      }\n    });\n  }\n\n  _closeDrawer(ev) {\n    ev.stopPropagation();\n    this.open = false;\n  }\n\n  _empty(notifications) {\n    return notifications.length === 0;\n  }\n\n  _openChanged(open) {\n    if (open) {\n      // Render closed then animate open\n      this._unsubNotifications = subscribeNotifications(\n        this.hass.connection,\n        (notifications) => {\n          this._notificationsBackend = notifications;\n        }\n      );\n    } else if (this._unsubNotifications) {\n      this._unsubNotifications();\n      this._unsubNotifications = undefined;\n    }\n  }\n\n  _computeNotifications(open, hass, notificationsBackend) {\n    if (!open) {\n      return [];\n    }\n\n    const configuratorEntities = Object.keys(hass.states)\n      .filter((entityId) => computeDomain(entityId) === \"configurator\")\n      .map((entityId) => hass.states[entityId]);\n\n    return notificationsBackend.concat(configuratorEntities);\n  }\n\n  showDialog({ narrow }) {\n    this.style.setProperty(\n      \"--app-drawer-width\",\n      narrow ? window.innerWidth + \"px\" : \"500px\"\n    );\n    this.$.drawer.open();\n  }\n}\ncustomElements.define(\"notification-drawer\", HuiNotificationDrawer);\n"],"sourceRoot":""}