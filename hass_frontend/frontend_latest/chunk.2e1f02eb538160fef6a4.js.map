{"version":3,"sources":["webpack:///./src/components/ha-fab.ts","webpack:///./src/panels/lovelace/common/compute-unused-entities.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts","webpack:///./src/panels/lovelace/editor/select-view/show-select-view-dialog.ts"],"names":["MwcFab","customElements","get","_decorate","customElement","_initialize","_MwcFab","F","[object Object]","args","super","this","d","kind","key","value","classes","mdc-fab--mini","mini","mdc-fab--exited","exited","mdc-fab--extended","extended","showLabel","label","html","ripple","classMap","disabled","icon","showIconAtEnd","EXCLUDED_DOMAINS","addFromAction","entities","actionConfig","action","service_data","entity_id","entityIds","Array","isArray","entityId","add","addEntityId","entity","camera_image","tap_action","hold_action","addEntities","obj","forEach","card","cards","elements","badges","badge","computeUnusedEntities","hass","config","usedEntities","Set","views","view","computeUsedEntities","Object","keys","states","filter","has","includes","split","sort","HuiUnusedEntities","_LitElement","decorators","property","lovelace","memoizeOne","narrow","columns","title","localize","sortable","filterable","filterKey","direction","template","stateObj","_handleEntityClicked","friendly_name","domain","last_changed","type","lastChanged","changedProperties","_get","_getPrototypeOf","prototype","call","_getUnusedEntities","mode","editMode","_columns","_unusedEntities","map","assign","computeStateName","computeDomain","_handleSelectionChanged","rtl","computeRTL","_selectView","_selectedEntities","_config","ev","changedSelection","detail","id","selected","push","index","indexOf","splice","target","closest","getAttribute","fireEvent","element","selectViewDialogParams","viewSelectedCallback","_addCard","dialogTag","dialogImport","Promise","all","__webpack_require__","e","then","bind","dialogParams","showEditCardDialog","path","static","css","LitElement"],"mappings":"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","file":"chunk.2e1f02eb538160fef6a4.js","sourcesContent":["import { classMap } from \"lit-html/directives/class-map\";\nimport { html, customElement } from \"lit-element\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive.js\";\n\nimport \"@material/mwc-fab\";\nimport { Constructor } from \"../types\";\n// tslint:disable-next-line\nimport { Fab } from \"@material/mwc-fab\";\n// tslint:disable-next-line\nconst MwcFab = customElements.get(\"mwc-fab\") as Constructor<Fab>;\n\n@customElement(\"ha-fab\")\nexport class HaFab extends MwcFab {\n  // We override the render method because we don't have an icon font and mwc-fab doesn't support our svg-icon sets.\n  // Based on version mwc-fab 0.8\n  protected render() {\n    const classes = {\n      \"mdc-fab--mini\": this.mini,\n      \"mdc-fab--exited\": this.exited,\n      \"mdc-fab--extended\": this.extended,\n    };\n    const showLabel = this.label !== \"\" && this.extended;\n    return html`\n      <button\n        .ripple=\"${ripple()}\"\n        class=\"mdc-fab ${classMap(classes)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-label=\"${this.label || this.icon}\"\n      >\n        ${showLabel && this.showIconAtEnd ? this.label : \"\"}\n        ${this.icon\n          ? html`\n              <ha-icon .icon=${this.icon}></ha-icon>\n            `\n          : \"\"}\n        ${showLabel && !this.showIconAtEnd ? this.label : \"\"}\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { LovelaceConfig, ActionConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\n\nconst EXCLUDED_DOMAINS = [\"zone\", \"persistent_notification\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    !actionConfig.service_data ||\n    !actionConfig.service_data.entity_id\n  ) {\n    return;\n  }\n  let entityIds = actionConfig.service_data.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nconst computeUsedEntities = (config) => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): string[] => {\n  const usedEntities = computeUsedEntities(config);\n  return Object.keys(hass.states)\n    .filter(\n      (entity) =>\n        !usedEntities.has(entity) &&\n        !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    )\n    .sort();\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  PropertyValues,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { classMap } from \"lit-html/directives/class-map\";\n\nimport memoizeOne from \"memoize-one\";\n\nimport \"../../../../components/ha-fab\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-relative-time\";\nimport \"../../../../components/ha-icon\";\n\nimport \"../../../../components/data-table/ha-data-table\";\n// tslint:disable-next-line\nimport {\n  SelectionChangedEvent,\n  DataTableColumnContainer,\n} from \"../../../../components/data-table/ha-data-table\";\n\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\n\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\nimport { showSelectViewDialog } from \"../select-view/show-select-view-dialog\";\nimport { showEditCardDialog } from \"../card-editor/show-edit-card-dialog\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport { Lovelace } from \"../../types\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property() public lovelace?: Lovelace;\n\n  @property() public hass?: HomeAssistant;\n\n  @property() public narrow?: boolean;\n\n  @property() private _unusedEntities: string[] = [];\n\n  private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTableColumnContainer = {\n      entity: {\n        title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity\"),\n        sortable: true,\n        filterable: true,\n        filterKey: \"friendly_name\",\n        direction: \"asc\",\n        template: (stateObj) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            <state-badge\n              .hass=${this.hass!}\n              .stateObj=${stateObj}\n            ></state-badge>\n            ${stateObj.friendly_name}\n          </div>\n        `,\n      },\n    };\n\n    if (narrow) {\n      return columns;\n    }\n\n    columns.entity_id = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity_id\"),\n      sortable: true,\n      filterable: true,\n    };\n    columns.domain = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.domain\"),\n      sortable: true,\n      filterable: true,\n    };\n    columns.last_changed = {\n      title: this.hass!.localize(\n        \"ui.panel.lovelace.unused_entities.last_changed\"\n      ),\n      type: \"numeric\",\n      sortable: true,\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        header=\"${this.hass.localize(\n          \"ui.panel.lovelace.unused_entities.title\"\n        )}\"\n      >\n        <div class=\"card-content\">\n          ${this.hass.localize(\n            \"ui.panel.lovelace.unused_entities.available_entities\"\n          )}\n          ${this.lovelace.mode === \"storage\"\n            ? html`\n                <br />${this.hass.localize(\n                  \"ui.panel.lovelace.unused_entities.select_to_add\"\n                )}\n              `\n            : \"\"}\n        </div>\n      </ha-card>\n      <ha-data-table\n        .columns=${this._columns(this.narrow!)}\n        .data=${this._unusedEntities.map((entity) => {\n          const stateObj = this.hass!.states[entity];\n          return {\n            entity_id: entity,\n            entity: {\n              ...stateObj,\n              friendly_name: computeStateName(stateObj),\n            },\n            domain: computeDomain(entity),\n            last_changed: stateObj!.last_changed,\n          };\n        })}\n        .id=${\"entity_id\"}\n        .selectable=${this.lovelace!.mode === \"storage\"}\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n      ${this.lovelace.mode === \"storage\"\n        ? html`\n            <ha-fab\n              class=\"${classMap({\n                rtl: computeRTL(this.hass),\n              })}\"\n              icon=\"hass:plus\"\n              label=\"${this.hass.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\"\n              @click=\"${this._selectView}\"\n            ></ha-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    this._unusedEntities = computeUnusedEntities(this.hass, this._config!);\n  }\n\n  private _handleSelectionChanged(ev: CustomEvent): void {\n    const changedSelection = ev.detail as SelectionChangedEvent;\n    const entity = changedSelection.id;\n    if (changedSelection.selected) {\n      this._selectedEntities.push(entity);\n    } else {\n      const index = this._selectedEntities.indexOf(entity);\n      if (index !== -1) {\n        this._selectedEntities.splice(index, 1);\n      }\n    }\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = (ev.target as HTMLElement)\n      .closest(\"tr\")!\n      .getAttribute(\"data-row-id\")!;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  private _selectView(): void {\n    showSelectViewDialog(this, {\n      lovelace: this.lovelace!,\n      viewSelectedCallback: (view) => this._addCard(view),\n    });\n  }\n\n  private _addCard(view: number): void {\n    showEditCardDialog(this, {\n      lovelace: this.lovelace!,\n      path: [view],\n      entities: this._selectedEntities,\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        padding: 16px;\n      }\n      ha-fab {\n        position: sticky;\n        float: right;\n        bottom: 16px;\n        z-index: 1;\n      }\n      ha-fab.rtl {\n        float: left;\n      }\n      ha-card {\n        margin-bottom: 16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n","import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { Lovelace } from \"../../types\";\n\nexport interface SelectViewDialogParams {\n  lovelace: Lovelace;\n  viewSelectedCallback: (view: number) => void;\n}\n\nexport const showSelectViewDialog = (\n  element: HTMLElement,\n  selectViewDialogParams: SelectViewDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-select-view\",\n    dialogImport: () =>\n      import(\n        /* webpackChunkName: \"hui-dialog-select-view\" */ \"./hui-dialog-select-view\"\n      ),\n    dialogParams: selectViewDialogParams,\n  });\n};\n"],"sourceRoot":""}