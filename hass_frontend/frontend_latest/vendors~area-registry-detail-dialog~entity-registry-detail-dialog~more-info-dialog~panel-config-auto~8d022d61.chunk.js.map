{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-form-element-behavior/iron-form-element-behavior.js","webpack:///./node_modules/@polymer/iron-validatable-behavior/iron-validatable-behavior.js","webpack:///./node_modules/@polymer/paper-input/paper-input-addon-behavior.js","webpack:///./node_modules/@polymer/paper-input/paper-input-behavior.js","webpack:///./node_modules/@polymer/paper-input/paper-input-char-counter.js","webpack:///./node_modules/@polymer/paper-input/paper-input-container.js","webpack:///./node_modules/@polymer/paper-input/paper-input-error.js"],"names":["IronFormElementBehavior","properties","name","type","String","value","notify","required","Boolean","attached","detached","IronValidatableBehaviorMeta","IronValidatableBehavior","validator","invalid","reflectToAttribute","observer","registered","IronMeta","_invalidChanged","setAttribute","removeAttribute","_validator","byKey","hasValidator","validate","undefined","_getValidity","PaperInputAddonBehavior","fire","update","state","PaperInputHelper","NextLabelID","NextAddonID","NextInputID","PaperInputBehaviorImpl","label","disabled","allowedPattern","list","pattern","errorMessage","charCounter","noLabelFloat","alwaysFloatLabel","autoValidate","autocomplete","autofocus","inputmode","minlength","Number","maxlength","min","max","step","placeholder","readonly","size","autocapitalize","autocorrect","autosave","results","accept","multiple","_ariaDescribedBy","_ariaLabelledBy","_inputId","listeners","keyBindings","hostAttributes","tabindex","inputElement","$","input","_generateInputId","$$","_focusableElement","created","_typesThatHaveText","_updateAriaLabelledBy","PolymerElement","indexOf","_appendStringWithSpace","str","more","_onAddonAttached","event","target","dom","rootTarget","id","_focusBlurHandler","IronControlState","call","focused","_shiftTabPressed","focus","_onShiftTabDown","oldTabIndex","getAttribute","async","_handleAutoValidate","updateValueAndPreserveCaret","newValue","start","selectionStart","selectionEnd","e","_computeAlwaysFloatLabel","root","querySelector","labelledBy","_onChange","shadowRoot","sourceEvent","node","bubbles","cancelable","_autofocusChanged","activeElement","document","isActiveElementValid","HTMLElement","isSomeElementActive","body","documentElement","PaperInputBehavior","IronA11yKeysBehavior","Polymer","_template","html","is","behaviors","_charCounterStr","counter","toString","length","hasAttribute","template","head","appendChild","content","attrForValue","readOnly","_addons","Array","_inputHasContent","_inputSelector","_boundOnFocus","Function","_onFocus","bind","_boundOnBlur","_onBlur","_boundOnInput","_onInput","_boundValueChanged","_onValueChanged","_valueChangedEvent","_propertyForValue","dashToCamelCase","_inputElement","_inputElementValue","ready","__isFirstValueUpdate","addEventListener","_handleValueAndAutoValidate","_handleValue","push","isAttached","_setFocused","checkValidity","updateAddons","valid","_onIronInputValidate","addon","index","_computeInputContentClass","cls","labelAndInputContainer","style","position","_computeUnderlineClass","_computeAddOnContentClass","_setInvalid"],"mappings":"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","file":"vendors~area-registry-detail-dialog~entity-registry-detail-dialog~more-info-dialog~panel-config-auto~8d022d61.chunk.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n  IronFormElementBehavior adds a `name`, `value` and `required` properties to\n  a custom element. It mostly exists for backcompatibility with Polymer 1.x, and\n  is probably not something you want to use.\n\n  @demo demo/index.html\n  @polymerBehavior\n */\nexport const IronFormElementBehavior = {\n\n  properties: {\n    /**\n     * The name of this element.\n     */\n    name: {type: String},\n\n    /**\n     * The value for this element.\n     * @type {*}\n     */\n    value: {notify: true, type: String},\n\n    /**\n     * Set to true to mark the input as required. If used in a form, a\n     * custom element that uses this behavior should also use\n     * IronValidatableBehavior and define a custom validation method.\n     * Otherwise, a `required` element will always be considered valid.\n     * It's also strongly recommended to provide a visual style for the element\n     * when its value is invalid.\n     */\n    required: {type: Boolean, value: false},\n  },\n\n  // Empty implementations for backcompatibility.\n  attached: function() {},\n  detached: function() {}\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronMeta} from '@polymer/iron-meta/iron-meta.js';\n\n/**\n * Singleton IronMeta instance.\n */\nexport let IronValidatableBehaviorMeta = null;\n\n/**\n * `Use IronValidatableBehavior` to implement an element that validates\n * user input. Use the related `IronValidatorBehavior` to add custom\n * validation logic to an iron-input.\n *\n * By default, an `<iron-form>` element validates its fields when the user\n * presses the submit button. To validate a form imperatively, call the form's\n * `validate()` method, which in turn will call `validate()` on all its\n * children. By using `IronValidatableBehavior`, your custom element\n * will get a public `validate()`, which will return the validity of the\n * element, and a corresponding `invalid` attribute, which can be used for\n * styling.\n *\n * To implement the custom validation logic of your element, you must override\n * the protected `_getValidity()` method of this behaviour, rather than\n * `validate()`. See\n * [this](https://github.com/PolymerElements/iron-form/blob/master/demo/simple-element.html)\n * for an example.\n *\n * ### Accessibility\n *\n * Changing the `invalid` property, either manually or by calling `validate()`\n * will update the `aria-invalid` attribute.\n *\n * @demo demo/index.html\n * @polymerBehavior\n */\nexport const IronValidatableBehavior = {\n\n  properties: {\n    /**\n     * Name of the validator to use.\n     */\n    validator: {type: String},\n\n    /**\n     * True if the last call to `validate` is invalid.\n     */\n    invalid: {\n      notify: true,\n      reflectToAttribute: true,\n      type: Boolean,\n      value: false,\n      observer: '_invalidChanged'\n    },\n  },\n\n  registered: function() {\n    IronValidatableBehaviorMeta = new IronMeta({type: 'validator'});\n  },\n\n  _invalidChanged: function() {\n    if (this.invalid) {\n      this.setAttribute('aria-invalid', 'true');\n    } else {\n      this.removeAttribute('aria-invalid');\n    }\n  },\n\n  /* Recompute this every time it's needed, because we don't know if the\n   * underlying IronValidatableBehaviorMeta has changed. */\n  get _validator() {\n    return IronValidatableBehaviorMeta &&\n        IronValidatableBehaviorMeta.byKey(this.validator);\n  },\n\n  /**\n   * @return {boolean} True if the validator `validator` exists.\n   */\n  hasValidator: function() {\n    return this._validator != null;\n  },\n\n  /**\n   * Returns true if the `value` is valid, and updates `invalid`. If you want\n   * your element to have custom validation logic, do not override this method;\n   * override `_getValidity(value)` instead.\n\n   * @param {Object} value Deprecated: The value to be validated. By default,\n   * it is passed to the validator's `validate()` function, if a validator is\n   set.\n   * If this argument is not specified, then the element's `value` property\n   * is used, if it exists.\n   * @return {boolean} True if `value` is valid.\n   */\n  validate: function(value) {\n    // If this is an element that also has a value property, and there was\n    // no explicit value argument passed, use the element's property instead.\n    if (value === undefined && this.value !== undefined)\n      this.invalid = !this._getValidity(this.value);\n    else\n      this.invalid = !this._getValidity(value);\n    return !this.invalid;\n  },\n\n  /**\n   * Returns true if `value` is valid.  By default, it is passed\n   * to the validator's `validate()` function, if a validator is set. You\n   * should override this method if you want to implement custom validity\n   * logic for your element.\n   *\n   * @param {Object} value The value to be validated.\n   * @return {boolean} True if `value` is valid.\n   */\n\n  _getValidity: function(value) {\n    if (this.hasValidator()) {\n      return this._validator.validate(value);\n    }\n    return true;\n  }\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\n/**\n * Use `Polymer.PaperInputAddonBehavior` to implement an add-on for\n * `<paper-input-container>`. A add-on appears below the input, and may display\n * information based on the input value and validity such as a character counter\n * or an error message.\n * @polymerBehavior\n */\nexport const PaperInputAddonBehavior = {\n  attached: function() {\n    this.fire('addon-attached');\n  },\n\n  /**\n   * The function called by `<paper-input-container>` when the input value or\n   * validity changes.\n   * @param {{\n   *   invalid: boolean,\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined)\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function(state) {}\n\n};\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronA11yKeysBehavior} from '@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js';\nimport {IronControlState} from '@polymer/iron-behaviors/iron-control-state.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {PolymerElement} from '@polymer/polymer/polymer-element.js';\n\n// Generate unique, monotonically increasing IDs for labels (needed by\n// aria-labelledby) and add-ons.\nexport const PaperInputHelper = {};\n\nPaperInputHelper.NextLabelID = 1;\nPaperInputHelper.NextAddonID = 1;\nPaperInputHelper.NextInputID = 1;\n\n/**\n * Use `PaperInputBehavior` to implement inputs with `<paper-input-container>`.\n * This behavior is implemented by `<paper-input>`. It exposes a number of\n * properties from `<paper-input-container>` and `<input is=\"iron-input\">` and\n * they should be bound in your template.\n *\n * The input element can be accessed by the `inputElement` property if you need\n * to access properties or methods that are not exposed.\n * @polymerBehavior PaperInputBehavior\n */\nexport const PaperInputBehaviorImpl = {\n\n  properties: {\n    /**\n     * Fired when the input changes due to user interaction.\n     *\n     * @event change\n     */\n\n    /**\n     * The label for this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * `<label>`'s content and `hidden` property, e.g.\n     * `<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`\n     */\n    label: {type: String},\n\n    /**\n     * The value for this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<iron-input>`'s `bindValue`\n     * property, or the value property of your input that is `notify:true`.\n     * @type {*}\n     */\n    value: {notify: true, type: String},\n\n    /**\n     * Set to true to disable this input. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * both the `<paper-input-container>`'s and the input's `disabled` property.\n     */\n    disabled: {type: Boolean, value: false},\n\n    /**\n     * Returns true if the value is invalid. If you're using PaperInputBehavior\n     * to implement your own paper-input-like element, bind this to both the\n     * `<paper-input-container>`'s and the input's `invalid` property.\n     *\n     * If `autoValidate` is true, the `invalid` attribute is managed\n     * automatically, which can clobber attempts to manage it manually.\n     */\n    invalid: {type: Boolean, value: false, notify: true},\n\n    /**\n     * Set this to specify the pattern allowed by `preventInvalidInput`. If\n     * you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\n     * property.\n     */\n    allowedPattern: {type: String},\n\n    /**\n     * The type of the input. The supported types are the\n     * [native input's\n     * types](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n     * (Polymer 2)\n     * `<iron-input>`'s `type` property.\n     */\n    type: {type: String},\n\n    /**\n     * The datalist of the input (if any). This should match the id of an\n     * existing `<datalist>`. If you're using PaperInputBehavior to implement\n     * your own paper-input-like element, bind this to the `<input\n     * is=\"iron-input\">`'s `list` property.\n     */\n    list: {type: String},\n\n    /**\n     * A pattern to validate the `input` with. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element, bind\n     * this to the `<input is=\"iron-input\">`'s `pattern` property.\n     */\n    pattern: {type: String},\n\n    /**\n     * Set to true to mark the input as required. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element, bind\n     * this to the `<input is=\"iron-input\">`'s `required` property.\n     */\n    required: {type: Boolean, value: false},\n\n    /**\n     * The error message to display when the input is invalid. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element,\n     * bind this to the `<paper-input-error>`'s content, if using.\n     */\n    errorMessage: {type: String},\n\n    /**\n     * Set to true to show a character counter.\n     */\n    charCounter: {type: Boolean, value: false},\n\n    /**\n     * Set to true to disable the floating label. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element, bind\n     * this to the `<paper-input-container>`'s `noLabelFloat` property.\n     */\n    noLabelFloat: {type: Boolean, value: false},\n\n    /**\n     * Set to true to always float the label. If you're using PaperInputBehavior\n     * to implement your own paper-input-like element, bind this to the\n     * `<paper-input-container>`'s `alwaysFloatLabel` property.\n     */\n    alwaysFloatLabel: {type: Boolean, value: false},\n\n    /**\n     * Set to true to auto-validate the input value. If you're using\n     * PaperInputBehavior to implement your own paper-input-like element, bind\n     * this to the `<paper-input-container>`'s `autoValidate` property.\n     */\n    autoValidate: {type: Boolean, value: false},\n\n    /**\n     * Name of the validator to use. If you're using PaperInputBehavior to\n     * implement your own paper-input-like element, bind this to\n     * the `<input is=\"iron-input\">`'s `validator` property.\n     */\n    validator: {type: String},\n\n    // HTMLInputElement attributes for binding if needed\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\n     * property.\n     */\n    autocomplete: {type: String, value: 'off'},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autofocus`\n     * property.\n     */\n    autofocus: {type: Boolean, observer: '_autofocusChanged'},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `inputmode`\n     * property.\n     */\n    inputmode: {type: String},\n\n    /**\n     * The minimum length of the input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `minlength`\n     * property.\n     */\n    minlength: {type: Number},\n\n    /**\n     * The maximum length of the input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `maxlength`\n     * property.\n     */\n    maxlength: {type: Number},\n\n    /**\n     * The minimum (numeric or date-time) input value.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `min` property.\n     */\n    min: {type: String},\n\n    /**\n     * The maximum (numeric or date-time) input value.\n     * Can be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `max` property.\n     */\n    max: {type: String},\n\n    /**\n     * Limits the numeric or date-time increments.\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `step` property.\n     */\n    step: {type: String},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `name` property.\n     */\n    name: {type: String},\n\n    /**\n     * A placeholder string in addition to the label. If this is set, the label\n     * will always float.\n     */\n    placeholder: {\n      type: String,\n      // need to set a default so _computeAlwaysFloatLabel is run\n      value: ''\n    },\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `readonly`\n     * property.\n     */\n    readonly: {type: Boolean, value: false},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `size` property.\n     */\n    size: {type: Number},\n\n    // Nonstandard attributes for binding if needed\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\n     * property.\n     *\n     * @type {string}\n     */\n    autocapitalize: {type: String, value: 'none'},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\n     * property.\n     */\n    autocorrect: {type: String, value: 'off'},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `autosave`\n     * property, used with type=search.\n     */\n    autosave: {type: String},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `results` property,\n     * used with type=search.\n     */\n    results: {type: Number},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the `<input is=\"iron-input\">`'s `accept` property,\n     * used with type=file.\n     */\n    accept: {type: String},\n\n    /**\n     * If you're using PaperInputBehavior to implement your own paper-input-like\n     * element, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\n     * used with type=file.\n     */\n    multiple: {type: Boolean},\n\n    /** @private */\n    _ariaDescribedBy: {type: String, value: ''},\n\n    /** @private */\n    _ariaLabelledBy: {type: String, value: ''},\n\n    /** @private */\n    _inputId: {type: String, value: ''}\n  },\n\n  listeners: {\n    'addon-attached': '_onAddonAttached',\n  },\n\n  /**\n   * @type {!Object}\n   */\n  keyBindings: {'shift+tab:keydown': '_onShiftTabDown'},\n\n  /** @private */\n  hostAttributes: {tabindex: 0},\n\n  /**\n   * Returns a reference to the input element.\n   * @return {!HTMLElement}\n   */\n  get inputElement() {\n    // Chrome generates audit errors if an <input type=\"password\"> has a\n    // duplicate ID, which is almost always true in Shady DOM. Generate\n    // a unique ID instead.\n    if (!this.$) {\n      this.$ = {}\n    }\n    if (!this.$.input) {\n      this._generateInputId();\n      this.$.input = this.$$('#' + this._inputId);\n    }\n    return this.$.input;\n  },\n\n  /**\n   * Returns a reference to the focusable element.\n   * @return {!HTMLElement}\n   */\n  get _focusableElement() {\n    return this.inputElement;\n  },\n\n  created: function() {\n    // These types have some default placeholder text; overlapping\n    // the label on top of it looks terrible. Auto-float the label in this case.\n    this._typesThatHaveText =\n        ['date', 'datetime', 'datetime-local', 'month', 'time', 'week', 'file'];\n  },\n\n  attached: function() {\n    this._updateAriaLabelledBy();\n\n    // In the 2.0 version of the element, this is handled in `onIronInputReady`,\n    // i.e. after the native input has finished distributing. In the 1.0\n    // version, the input is in the shadow tree, so it's already available.\n    if (!PolymerElement && this.inputElement &&\n        this._typesThatHaveText.indexOf(this.inputElement.type) !== -1) {\n      this.alwaysFloatLabel = true;\n    }\n  },\n\n  _appendStringWithSpace: function(str, more) {\n    if (str) {\n      str = str + ' ' + more;\n    } else {\n      str = more;\n    }\n    return str;\n  },\n\n  _onAddonAttached: function(event) {\n    var target = dom(event).rootTarget;\n    if (target.id) {\n      this._ariaDescribedBy =\n          this._appendStringWithSpace(this._ariaDescribedBy, target.id);\n    } else {\n      var id = 'paper-input-add-on-' + PaperInputHelper.NextAddonID++;\n      target.id = id;\n      this._ariaDescribedBy =\n          this._appendStringWithSpace(this._ariaDescribedBy, id);\n    }\n  },\n\n  /**\n   * Validates the input element and sets an error style if needed.\n   *\n   * @return {boolean}\n   */\n  validate: function() {\n    return this.inputElement.validate();\n  },\n\n  /**\n   * Forward focus to inputElement. Overriden from IronControlState.\n   */\n  _focusBlurHandler: function(event) {\n    IronControlState._focusBlurHandler.call(this, event);\n\n    // Forward the focus to the nested input.\n    if (this.focused && !this._shiftTabPressed && this._focusableElement) {\n      this._focusableElement.focus();\n    }\n  },\n\n  /**\n   * Handler that is called when a shift+tab keypress is detected by the menu.\n   *\n   * @param {CustomEvent} event A key combination event.\n   */\n  _onShiftTabDown: function(event) {\n    var oldTabIndex = this.getAttribute('tabindex');\n    this._shiftTabPressed = true;\n    this.setAttribute('tabindex', '-1');\n    this.async(function() {\n      this.setAttribute('tabindex', oldTabIndex);\n      this._shiftTabPressed = false;\n    }, 1);\n  },\n\n  /**\n   * If `autoValidate` is true, then validates the element.\n   */\n  _handleAutoValidate: function() {\n    if (this.autoValidate)\n      this.validate();\n  },\n\n  /**\n   * Restores the cursor to its original position after updating the value.\n   * @param {string} newValue The value that should be saved.\n   */\n  updateValueAndPreserveCaret: function(newValue) {\n    // Not all elements might have selection, and even if they have the\n    // right properties, accessing them might throw an exception (like for\n    // <input type=number>)\n    try {\n      var start = this.inputElement.selectionStart;\n      this.value = newValue;\n\n      // The cursor automatically jumps to the end after re-setting the value,\n      // so restore it to its original position.\n      this.inputElement.selectionStart = start;\n      this.inputElement.selectionEnd = start;\n    } catch (e) {\n      // Just set the value and give up on the caret.\n      this.value = newValue;\n    }\n  },\n\n  _computeAlwaysFloatLabel: function(alwaysFloatLabel, placeholder) {\n    return placeholder || alwaysFloatLabel;\n  },\n\n  _updateAriaLabelledBy: function() {\n    var label = dom(this.root).querySelector('label');\n    if (!label) {\n      this._ariaLabelledBy = '';\n      return;\n    }\n    var labelledBy;\n    if (label.id) {\n      labelledBy = label.id;\n    } else {\n      labelledBy = 'paper-input-label-' + PaperInputHelper.NextLabelID++;\n      label.id = labelledBy;\n    }\n    this._ariaLabelledBy = labelledBy;\n  },\n\n  _generateInputId: function() {\n    if (!this._inputId || this._inputId === '') {\n      this._inputId = 'input-' + PaperInputHelper.NextInputID++;\n    }\n  },\n\n  _onChange: function(event) {\n    // In the Shadow DOM, the `change` event is not leaked into the\n    // ancestor tree, so we must do this manually.\n    // See\n    // https://w3c.github.io/webcomponents/spec/shadow/#events-that-are-not-leaked-into-ancestor-trees.\n    if (this.shadowRoot) {\n      this.fire(\n          event.type,\n          {sourceEvent: event},\n          {node: this, bubbles: event.bubbles, cancelable: event.cancelable});\n    }\n  },\n\n  _autofocusChanged: function() {\n    // Firefox doesn't respect the autofocus attribute if it's applied after\n    // the page is loaded (Chrome/WebKit do respect it), preventing an\n    // autofocus attribute specified in markup from taking effect when the\n    // element is upgraded. As a workaround, if the autofocus property is set,\n    // and the focus hasn't already been moved elsewhere, we take focus.\n    if (this.autofocus && this._focusableElement) {\n      // In IE 11, the default document.activeElement can be the page's\n      // outermost html element, but there are also cases (under the\n      // polyfill?) in which the activeElement is not a real HTMLElement, but\n      // just a plain object. We identify the latter case as having no valid\n      // activeElement.\n      var activeElement = document.activeElement;\n      var isActiveElementValid = activeElement instanceof HTMLElement;\n\n      // Has some other element has already taken the focus?\n      var isSomeElementActive = isActiveElementValid &&\n          activeElement !== document.body &&\n          activeElement !== document.documentElement; /* IE 11 */\n      if (!isSomeElementActive) {\n        // No specific element has taken the focus yet, so we can take it.\n        this._focusableElement.focus();\n      }\n    }\n  }\n};\n\n/** @polymerBehavior */\nexport const PaperInputBehavior =\n    [IronControlState, IronA11yKeysBehavior, PaperInputBehaviorImpl];\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-styles/typography.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputAddonBehavior} from './paper-input-addon-behavior.js';\n\n/*\n`<paper-input-char-counter>` is a character counter for use with\n`<paper-input-container>`. It shows the number of characters entered in the\ninput and the max length if it is specified.\n\n    <paper-input-container>\n      <input maxlength=\"20\">\n      <paper-input-char-counter></paper-input-char-counter>\n    </paper-input-container>\n\n### Styling\n\nThe following mixin is available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-char-counter` | Mixin applied to the element | `{}`\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        float: right;\n\n        @apply --paper-font-caption;\n        @apply --paper-input-char-counter;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      :host(:dir(rtl)) {\n        float: left;\n      }\n    </style>\n\n    <span>[[_charCounterStr]]</span>\n`,\n\n  is: 'paper-input-char-counter',\n  behaviors: [PaperInputAddonBehavior],\n  properties: {_charCounterStr: {type: String, value: '0'}},\n\n  /**\n   * This overrides the update function in PaperInputAddonBehavior.\n   * @param {{\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined),\n   *   invalid: boolean\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function(state) {\n    if (!state.inputElement) {\n      return;\n    }\n\n    state.value = state.value || '';\n\n    var counter = state.value.toString().length.toString();\n\n    if (state.inputElement.hasAttribute('maxlength')) {\n      counter += '/' + state.inputElement.getAttribute('maxlength');\n    }\n\n    this._charCounterStr = counter;\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/iron-flex-layout/iron-flex-layout.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {dom} from '@polymer/polymer/lib/legacy/polymer.dom.js';\nimport {dashToCamelCase} from '@polymer/polymer/lib/utils/case-map.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nconst template = html`\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n      --paper-input-container-shared-input-style: {\n        position: relative; /* to make a stacking context */\n        outline: none;\n        box-shadow: none;\n        padding: 0;\n        margin: 0;\n        width: 100%;\n        max-width: 100%;\n        background: transparent;\n        border: none;\n        color: var(--paper-input-container-input-color, var(--primary-text-color));\n        -webkit-appearance: none;\n        text-align: inherit;\n        vertical-align: var(--paper-input-container-input-align, bottom);\n\n        @apply --paper-font-subhead;\n      };\n    }\n  </style>\n</custom-style>\n`;\ntemplate.setAttribute('style', 'display: none;');\ndocument.head.appendChild(template.content);\n\n/*\n`<paper-input-container>` is a container for a `<label>`, an `<iron-input>` or\n`<textarea>` and optional add-on elements such as an error message or character\ncounter, used to implement Material Design text fields.\n\nFor example:\n\n    <paper-input-container>\n      <label slot=\"label\">Your name</label>\n      <iron-input slot=\"input\">\n        <input>\n      </iron-input>\n      // In Polymer 1.0, you would use `<input is=\"iron-input\" slot=\"input\">`\ninstead of the above.\n    </paper-input-container>\n\nYou can style the nested `<input>` however you want; if you want it to look like\na Material Design input, you can style it with the\n--paper-input-container-shared-input-style mixin.\n\nDo not wrap `<paper-input-container>` around elements that already include it,\nsuch as `<paper-input>`. Doing so may cause events to bounce infinitely between\nthe container and its contained element.\n\n### Listening for input changes\n\nBy default, it listens for changes on the `bind-value` attribute on its children\nnodes and perform tasks such as auto-validating and label styling when the\n`bind-value` changes. You can configure the attribute it listens to with the\n`attr-for-value` attribute.\n\n### Using a custom input element\n\nYou can use a custom input element in a `<paper-input-container>`, for example\nto implement a compound input field like a social security number input. The\ncustom input element should have the `paper-input-input` class, have a\n`notify:true` value property and optionally implements\n`Polymer.IronValidatableBehavior` if it is validatable.\n\n    <paper-input-container attr-for-value=\"ssn-value\">\n      <label slot=\"label\">Social security number</label>\n      <ssn-input slot=\"input\" class=\"paper-input-input\"></ssn-input>\n    </paper-input-container>\n\n\nIf you're using a `<paper-input-container>` imperatively, it's important to make\nsure that you attach its children (the `iron-input` and the optional `label`)\nbefore you attach the `<paper-input-container>` itself, so that it can be set up\ncorrectly.\n\n### Validation\n\nIf the `auto-validate` attribute is set, the input container will validate the\ninput and update the container styling when the input value changes.\n\n### Add-ons\n\nAdd-ons are child elements of a `<paper-input-container>` with the `add-on`\nattribute and implements the `Polymer.PaperInputAddonBehavior` behavior. They\nare notified when the input value or validity changes, and may implement\nfunctionality such as error messages or character counters. They appear at the\nbottom of the input.\n\n### Prefixes and suffixes\nThese are child elements of a `<paper-input-container>` with the `prefix`\nor `suffix` attribute, and are displayed inline with the input, before or after.\n\n    <paper-input-container>\n      <div slot=\"prefix\">$</div>\n      <label slot=\"label\">Total</label>\n      <iron-input slot=\"input\">\n        <input>\n      </iron-input>\n      // In Polymer 1.0, you would use `<input is=\"iron-input\" slot=\"input\">`\ninstead of the above. <paper-icon-button slot=\"suffix\"\nicon=\"clear\"></paper-icon-button>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`\n`--paper-input-container-focus-color` | Label and underline color when the input is focused | `--primary-color`\n`--paper-input-container-invalid-color` | Label and underline color when the input is is invalid | `--error-color`\n`--paper-input-container-input-color` | Input foreground color | `--primary-text-color`\n`--paper-input-container` | Mixin applied to the container | `{}`\n`--paper-input-container-disabled` | Mixin applied to the container when it's disabled | `{}`\n`--paper-input-container-label` | Mixin applied to the label | `{}`\n`--paper-input-container-label-focus` | Mixin applied to the label when the input is focused | `{}`\n`--paper-input-container-label-floating` | Mixin applied to the label when floating | `{}`\n`--paper-input-container-input` | Mixin applied to the input | `{}`\n`--paper-input-container-input-align` | The vertical-align property of the input | `bottom`\n`--paper-input-container-input-disabled` | Mixin applied to the input when the component is disabled | `{}`\n`--paper-input-container-input-focus` | Mixin applied to the input when focused | `{}`\n`--paper-input-container-input-invalid` | Mixin applied to the input when invalid | `{}`\n`--paper-input-container-input-webkit-spinner` | Mixin applied to the webkit spinner | `{}`\n`--paper-input-container-input-webkit-clear` | Mixin applied to the webkit clear button | `{}`\n`--paper-input-container-input-webkit-calendar-picker-indicator` | Mixin applied to the webkit calendar picker indicator | `{}`\n`--paper-input-container-ms-clear` | Mixin applied to the Internet Explorer clear button | `{}`\n`--paper-input-container-underline` | Mixin applied to the underline | `{}`\n`--paper-input-container-underline-focus` | Mixin applied to the underline when the input is focused | `{}`\n`--paper-input-container-underline-disabled` | Mixin applied to the underline when the input is disabled | `{}`\n`--paper-input-prefix` | Mixin applied to the input prefix | `{}`\n`--paper-input-suffix` | Mixin applied to the input suffix | `{}`\n\nThis element is `display:block` by default, but you can set the `inline`\nattribute to make it `display:inline-block`.\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        padding: 8px 0;\n        @apply --paper-input-container;\n      }\n\n      :host([inline]) {\n        display: inline-block;\n      }\n\n      :host([disabled]) {\n        pointer-events: none;\n        opacity: 0.33;\n\n        @apply --paper-input-container-disabled;\n      }\n\n      :host([hidden]) {\n        display: none !important;\n      }\n\n      [hidden] {\n        display: none !important;\n      }\n\n      .floated-label-placeholder {\n        @apply --paper-font-caption;\n      }\n\n      .underline {\n        height: 2px;\n        position: relative;\n      }\n\n      .focused-line {\n        @apply --layout-fit;\n        border-bottom: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n\n        -webkit-transform-origin: center center;\n        transform-origin: center center;\n        -webkit-transform: scale3d(0,1,1);\n        transform: scale3d(0,1,1);\n\n        @apply --paper-input-container-underline-focus;\n      }\n\n      .underline.is-highlighted .focused-line {\n        -webkit-transform: none;\n        transform: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n\n        @apply --paper-transition-easing;\n      }\n\n      .underline.is-invalid .focused-line {\n        border-color: var(--paper-input-container-invalid-color, var(--error-color));\n        -webkit-transform: none;\n        transform: none;\n        -webkit-transition: -webkit-transform 0.25s;\n        transition: transform 0.25s;\n\n        @apply --paper-transition-easing;\n      }\n\n      .unfocused-line {\n        @apply --layout-fit;\n        border-bottom: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        @apply --paper-input-container-underline;\n      }\n\n      :host([disabled]) .unfocused-line {\n        border-bottom: 1px dashed;\n        border-color: var(--paper-input-container-color, var(--secondary-text-color));\n        @apply --paper-input-container-underline-disabled;\n      }\n\n      .input-wrapper {\n        @apply --layout-horizontal;\n        @apply --layout-center;\n        position: relative;\n      }\n\n      .input-content {\n        @apply --layout-flex-auto;\n        @apply --layout-relative;\n        max-width: 100%;\n      }\n\n      .input-content ::slotted(label),\n      .input-content ::slotted(.paper-input-label) {\n        position: absolute;\n        top: 0;\n        left: 0;\n        width: 100%;\n        font: inherit;\n        color: var(--paper-input-container-color, var(--secondary-text-color));\n        -webkit-transition: -webkit-transform 0.25s, width 0.25s;\n        transition: transform 0.25s, width 0.25s;\n        -webkit-transform-origin: left top;\n        transform-origin: left top;\n        /* Fix for safari not focusing 0-height date/time inputs with -webkit-apperance: none; */\n        min-height: 1px;\n\n        @apply --paper-font-common-nowrap;\n        @apply --paper-font-subhead;\n        @apply --paper-input-container-label;\n        @apply --paper-transition-easing;\n      }\n\n      .input-content.label-is-floating ::slotted(label),\n      .input-content.label-is-floating ::slotted(.paper-input-label) {\n        -webkit-transform: translateY(-75%) scale(0.75);\n        transform: translateY(-75%) scale(0.75);\n\n        /* Since we scale to 75/100 of the size, we actually have 100/75 of the\n        original space now available */\n        width: 133%;\n\n        @apply --paper-input-container-label-floating;\n      }\n\n      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(label),\n      :host(:dir(rtl)) .input-content.label-is-floating ::slotted(.paper-input-label) {\n        right: 0;\n        left: auto;\n        -webkit-transform-origin: right top;\n        transform-origin: right top;\n      }\n\n      .input-content.label-is-highlighted ::slotted(label),\n      .input-content.label-is-highlighted ::slotted(.paper-input-label) {\n        color: var(--paper-input-container-focus-color, var(--primary-color));\n\n        @apply --paper-input-container-label-focus;\n      }\n\n      .input-content.is-invalid ::slotted(label),\n      .input-content.is-invalid ::slotted(.paper-input-label) {\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n      }\n\n      .input-content.label-is-hidden ::slotted(label),\n      .input-content.label-is-hidden ::slotted(.paper-input-label) {\n        visibility: hidden;\n      }\n\n      .input-content ::slotted(input),\n      .input-content ::slotted(iron-input),\n      .input-content ::slotted(textarea),\n      .input-content ::slotted(iron-autogrow-textarea),\n      .input-content ::slotted(.paper-input-input) {\n        @apply --paper-input-container-shared-input-style;\n        /* The apply shim doesn't apply the nested color custom property,\n          so we have to re-apply it here. */\n        color: var(--paper-input-container-input-color, var(--primary-text-color));\n        @apply --paper-input-container-input;\n      }\n\n      .input-content ::slotted(input)::-webkit-outer-spin-button,\n      .input-content ::slotted(input)::-webkit-inner-spin-button {\n        @apply --paper-input-container-input-webkit-spinner;\n      }\n\n      .input-content.focused ::slotted(input),\n      .input-content.focused ::slotted(iron-input),\n      .input-content.focused ::slotted(textarea),\n      .input-content.focused ::slotted(iron-autogrow-textarea),\n      .input-content.focused ::slotted(.paper-input-input) {\n        @apply --paper-input-container-input-focus;\n      }\n\n      .input-content.is-invalid ::slotted(input),\n      .input-content.is-invalid ::slotted(iron-input),\n      .input-content.is-invalid ::slotted(textarea),\n      .input-content.is-invalid ::slotted(iron-autogrow-textarea),\n      .input-content.is-invalid ::slotted(.paper-input-input) {\n        @apply --paper-input-container-input-invalid;\n      }\n\n      .prefix ::slotted(*) {\n        display: inline-block;\n        @apply --paper-font-subhead;\n        @apply --layout-flex-none;\n        @apply --paper-input-prefix;\n      }\n\n      .suffix ::slotted(*) {\n        display: inline-block;\n        @apply --paper-font-subhead;\n        @apply --layout-flex-none;\n\n        @apply --paper-input-suffix;\n      }\n\n      /* Firefox sets a min-width on the input, which can cause layout issues */\n      .input-content ::slotted(input) {\n        min-width: 0;\n      }\n\n      .input-content ::slotted(textarea) {\n        resize: none;\n      }\n\n      .add-on-content {\n        position: relative;\n      }\n\n      .add-on-content.is-invalid ::slotted(*) {\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n      }\n\n      .add-on-content.is-highlighted ::slotted(*) {\n        color: var(--paper-input-container-focus-color, var(--primary-color));\n      }\n    </style>\n\n    <div class=\"floated-label-placeholder\" aria-hidden=\"true\" hidden=\"[[noLabelFloat]]\">&nbsp;</div>\n\n    <div class=\"input-wrapper\">\n      <span class=\"prefix\"><slot name=\"prefix\"></slot></span>\n\n      <div class$=\"[[_computeInputContentClass(noLabelFloat,alwaysFloatLabel,focused,invalid,_inputHasContent)]]\" id=\"labelAndInputContainer\">\n        <slot name=\"label\"></slot>\n        <slot name=\"input\"></slot>\n      </div>\n\n      <span class=\"suffix\"><slot name=\"suffix\"></slot></span>\n    </div>\n\n    <div class$=\"[[_computeUnderlineClass(focused,invalid)]]\">\n      <div class=\"unfocused-line\"></div>\n      <div class=\"focused-line\"></div>\n    </div>\n\n    <div class$=\"[[_computeAddOnContentClass(focused,invalid)]]\">\n      <slot name=\"add-on\"></slot>\n    </div>\n`,\n\n  is: 'paper-input-container',\n\n  properties: {\n    /**\n     * Set to true to disable the floating label. The label disappears when the\n     * input value is not null.\n     */\n    noLabelFloat: {type: Boolean, value: false},\n\n    /**\n     * Set to true to always float the floating label.\n     */\n    alwaysFloatLabel: {type: Boolean, value: false},\n\n    /**\n     * The attribute to listen for value changes on.\n     */\n    attrForValue: {type: String, value: 'bind-value'},\n\n    /**\n     * Set to true to auto-validate the input value when it changes.\n     */\n    autoValidate: {type: Boolean, value: false},\n\n    /**\n     * True if the input is invalid. This property is set automatically when the\n     * input value changes if auto-validating, or when the `iron-input-validate`\n     * event is heard from a child.\n     */\n    invalid: {observer: '_invalidChanged', type: Boolean, value: false},\n\n    /**\n     * True if the input has focus.\n     */\n    focused: {readOnly: true, type: Boolean, value: false, notify: true},\n\n    _addons: {\n      type: Array\n      // do not set a default value here intentionally - it will be initialized\n      // lazily when a distributed child is attached, which may occur before\n      // configuration for this element in polyfill.\n    },\n\n    _inputHasContent: {type: Boolean, value: false},\n\n    _inputSelector:\n        {type: String, value: 'input,iron-input,textarea,.paper-input-input'},\n\n    _boundOnFocus: {\n      type: Function,\n      value: function() {\n        return this._onFocus.bind(this);\n      }\n    },\n\n    _boundOnBlur: {\n      type: Function,\n      value: function() {\n        return this._onBlur.bind(this);\n      }\n    },\n\n    _boundOnInput: {\n      type: Function,\n      value: function() {\n        return this._onInput.bind(this);\n      }\n    },\n\n    _boundValueChanged: {\n      type: Function,\n      value: function() {\n        return this._onValueChanged.bind(this);\n      }\n    }\n  },\n\n  listeners: {\n    'addon-attached': '_onAddonAttached',\n    'iron-input-validate': '_onIronInputValidate'\n  },\n\n  get _valueChangedEvent() {\n    return this.attrForValue + '-changed';\n  },\n\n  get _propertyForValue() {\n    return dashToCamelCase(this.attrForValue);\n  },\n\n  get _inputElement() {\n    return dom(this).querySelector(this._inputSelector);\n  },\n\n  get _inputElementValue() {\n    return this._inputElement[this._propertyForValue] ||\n        this._inputElement.value;\n  },\n\n  ready: function() {\n    // Paper-input treats a value of undefined differently at startup than\n    // the rest of the time (specifically: it does not validate it at startup,\n    // but it does after that. We need to track whether the first time we\n    // encounter the value is basically this first time, so that we can validate\n    // it correctly the rest of the time. See\n    // https://github.com/PolymerElements/paper-input/issues/605\n    this.__isFirstValueUpdate = true;\n    if (!this._addons) {\n      this._addons = [];\n    }\n    this.addEventListener('focus', this._boundOnFocus, true);\n    this.addEventListener('blur', this._boundOnBlur, true);\n  },\n\n  attached: function() {\n    if (this.attrForValue) {\n      this._inputElement.addEventListener(\n          this._valueChangedEvent, this._boundValueChanged);\n    } else {\n      this.addEventListener('input', this._onInput);\n    }\n\n    // Only validate when attached if the input already has a value.\n    if (this._inputElementValue && this._inputElementValue != '') {\n      this._handleValueAndAutoValidate(this._inputElement);\n    } else {\n      this._handleValue(this._inputElement);\n    }\n  },\n\n  /** @private */\n  _onAddonAttached: function(event) {\n    if (!this._addons) {\n      this._addons = [];\n    }\n    var target = event.target;\n    if (this._addons.indexOf(target) === -1) {\n      this._addons.push(target);\n      if (this.isAttached) {\n        this._handleValue(this._inputElement);\n      }\n    }\n  },\n\n  /** @private */\n  _onFocus: function() {\n    this._setFocused(true);\n  },\n\n  /** @private */\n  _onBlur: function() {\n    this._setFocused(false);\n    this._handleValueAndAutoValidate(this._inputElement);\n  },\n\n  /** @private */\n  _onInput: function(event) {\n    this._handleValueAndAutoValidate(event.target);\n  },\n\n  /** @private */\n  _onValueChanged: function(event) {\n    var input = event.target;\n\n    // Paper-input treats a value of undefined differently at startup than\n    // the rest of the time (specifically: it does not validate it at startup,\n    // but it does after that. If this is in fact the bootup case, ignore\n    // validation, just this once.\n    if (this.__isFirstValueUpdate) {\n      this.__isFirstValueUpdate = false;\n      if (input.value === undefined || input.value === '') {\n        return;\n      }\n    }\n\n    this._handleValueAndAutoValidate(event.target);\n  },\n\n  /** @private */\n  _handleValue: function(inputElement) {\n    var value = this._inputElementValue;\n\n    // type=\"number\" hack needed because this.value is empty until it's valid\n    if (value || value === 0 ||\n        (inputElement.type === 'number' && !inputElement.checkValidity())) {\n      this._inputHasContent = true;\n    } else {\n      this._inputHasContent = false;\n    }\n\n    this.updateAddons(\n        {inputElement: inputElement, value: value, invalid: this.invalid});\n  },\n\n  /** @private */\n  _handleValueAndAutoValidate: function(inputElement) {\n    if (this.autoValidate && inputElement) {\n      var valid;\n\n      if (inputElement.validate) {\n        valid = inputElement.validate(this._inputElementValue);\n      } else {\n        valid = inputElement.checkValidity();\n      }\n      this.invalid = !valid;\n    }\n\n    // Call this last to notify the add-ons.\n    this._handleValue(inputElement);\n  },\n\n  /** @private */\n  _onIronInputValidate: function(event) {\n    this.invalid = this._inputElement.invalid;\n  },\n\n  /** @private */\n  _invalidChanged: function() {\n    if (this._addons) {\n      this.updateAddons({invalid: this.invalid});\n    }\n  },\n\n  /**\n   * Call this to update the state of add-ons.\n   * @param {Object} state Add-on state.\n   */\n  updateAddons: function(state) {\n    for (var addon, index = 0; addon = this._addons[index]; index++) {\n      addon.update(state);\n    }\n  },\n\n  /** @private */\n  _computeInputContentClass: function(\n      noLabelFloat, alwaysFloatLabel, focused, invalid, _inputHasContent) {\n    var cls = 'input-content';\n    if (!noLabelFloat) {\n      var label = this.querySelector('label');\n\n      if (alwaysFloatLabel || _inputHasContent) {\n        cls += ' label-is-floating';\n        // If the label is floating, ignore any offsets that may have been\n        // applied from a prefix element.\n        this.$.labelAndInputContainer.style.position = 'static';\n\n        if (invalid) {\n          cls += ' is-invalid';\n        } else if (focused) {\n          cls += ' label-is-highlighted';\n        }\n      } else {\n        // When the label is not floating, it should overlap the input element.\n        if (label) {\n          this.$.labelAndInputContainer.style.position = 'relative';\n        }\n        if (invalid) {\n          cls += ' is-invalid';\n        }\n      }\n    } else {\n      if (_inputHasContent) {\n        cls += ' label-is-hidden';\n      }\n      if (invalid) {\n        cls += ' is-invalid';\n      }\n    }\n    if (focused) {\n      cls += ' focused';\n    }\n    return cls;\n  },\n\n  /** @private */\n  _computeUnderlineClass: function(focused, invalid) {\n    var cls = 'underline';\n    if (invalid) {\n      cls += ' is-invalid';\n    } else if (focused) {\n      cls += ' is-highlighted'\n    }\n    return cls;\n  },\n\n  /** @private */\n  _computeAddOnContentClass: function(focused, invalid) {\n    var cls = 'add-on-content';\n    if (invalid) {\n      cls += ' is-invalid';\n    } else if (focused) {\n      cls += ' is-highlighted'\n    }\n    return cls;\n  }\n});\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\nimport '@polymer/paper-styles/default-theme.js';\nimport '@polymer/paper-styles/typography.js';\n\nimport {Polymer} from '@polymer/polymer/lib/legacy/polymer-fn.js';\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\n\nimport {PaperInputAddonBehavior} from './paper-input-addon-behavior.js';\n\n/*\n`<paper-input-error>` is an error message for use with\n`<paper-input-container>`. The error is displayed when the\n`<paper-input-container>` is `invalid`.\n\n    <paper-input-container>\n      <input pattern=\"[0-9]*\">\n      <paper-input-error slot=\"add-on\">Only numbers are\nallowed!</paper-input-error>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | The foreground color of the error | `--error-color`\n`--paper-input-error` | Mixin applied to the error | `{}`\n*/\nPolymer({\n  _template: html`\n    <style>\n      :host {\n        display: inline-block;\n        visibility: hidden;\n\n        color: var(--paper-input-container-invalid-color, var(--error-color));\n\n        @apply --paper-font-caption;\n        @apply --paper-input-error;\n        position: absolute;\n        left:0;\n        right:0;\n      }\n\n      :host([invalid]) {\n        visibility: visible;\n      }\n\n      #a11yWrapper {\n        visibility: hidden;\n      }\n\n      :host([invalid]) #a11yWrapper {\n        visibility: visible;\n      }\n    </style>\n\n    <!--\n    If the paper-input-error element is directly referenced by an\n    \\`aria-describedby\\` attribute, such as when used as a paper-input add-on,\n    then applying \\`visibility: hidden;\\` to the paper-input-error element itself\n    does not hide the error.\n\n    For more information, see:\n    https://www.w3.org/TR/accname-1.1/#mapping_additional_nd_description\n    -->\n    <div id=\"a11yWrapper\">\n      <slot></slot>\n    </div>\n`,\n\n  is: 'paper-input-error',\n  behaviors: [PaperInputAddonBehavior],\n\n  properties: {\n    /**\n     * True if the error is showing.\n     */\n    invalid: {readOnly: true, reflectToAttribute: true, type: Boolean}\n  },\n\n  /**\n   * This overrides the update function in PaperInputAddonBehavior.\n   * @param {{\n   *   inputElement: (Element|undefined),\n   *   value: (string|undefined),\n   *   invalid: boolean\n   * }} state -\n   *     inputElement: The input element.\n   *     value: The input value.\n   *     invalid: True if the input value is invalid.\n   */\n  update: function(state) {\n    this._setInvalid(state.invalid);\n  }\n});\n"],"sourceRoot":""}