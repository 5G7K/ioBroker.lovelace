{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/panels/lovelace/editor/config-elements/config-elements-style.ts","webpack:///./src/components/entity/ha-entity-picker.ts","webpack:///./src/panels/lovelace/editor/config-elements/hui-weather-forecast-card-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","Object","index_es","types","entity-id","value","includes","icon","configElementStyle","rowRenderer","root","_owner","model","firstElementChild","innerHTML","querySelector","stateObj","item","textContent","_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_8__","entity_id","HaEntityPicker","lit_element__WEBPACK_IMPORTED_MODULE_9__","[object Object]","this","_getStates","memoize_one__WEBPACK_IMPORTED_MODULE_6__","hass","domainFilter","entityFilter","states","entityIds","keys","filter","eid","substr","indexOf","sort","map","key","changedProps","super","updated","has","_opened","_hass","_value","allowCustomEntity","_openedChanged","_valueChanged","autofocus","undefined","label","localize","disabled","length","ev","detail","setTimeout","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_10__","styles","tslib__WEBPACK_IMPORTED_MODULE_0__","type","Boolean","attribute","customElements","define","cardConfigStruct","_common_structs_struct__WEBPACK_IMPORTED_MODULE_3__","entity","name","HuiWeatherForecastCardEditor","lit_element__WEBPACK_IMPORTED_MODULE_1__","config","_config","_entity","_name","_config_elements_style__WEBPACK_IMPORTED_MODULE_5__","target","configValue","assign","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_4__"],"mappings":"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","file":"chunk.4c379a9ea7d93a39e836.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","import { html } from \"lit-element\";\n\nexport const configElementStyle = html`\n  <style>\n    paper-toggle-button {\n      padding-top: 16px;\n    }\n    .side-by-side {\n      display: flex;\n    }\n    .side-by-side > * {\n      flex: 1;\n      padding-right: 4px;\n    }\n    .suffix {\n      margin: 0 8px;\n    }\n  </style>\n`;\n","import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-item/paper-icon-item\";\nimport \"@polymer/paper-item/paper-item-body\";\nimport \"@vaadin/vaadin-combo-box/vaadin-combo-box-light\";\nimport memoizeOne from \"memoize-one\";\n\nimport \"./state-badge\";\n\nimport computeStateName from \"../../common/entity/compute_state_name\";\nimport {\n  LitElement,\n  TemplateResult,\n  html,\n  css,\n  CSSResult,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\nexport type HaEntityPickerEntityFilterFunc = (entityId: HassEntity) => boolean;\n\nconst rowRenderer = (\n  root: HTMLElement,\n  _owner,\n  model: { item: HassEntity }\n) => {\n  if (!root.firstElementChild) {\n    root.innerHTML = `\n      <style>\n        paper-icon-item {\n          margin: -10px;\n          padding: 0;\n        }\n      </style>\n      <paper-icon-item>\n        <state-badge state-obj=\"[[item]]\" slot=\"item-icon\"></state-badge>\n        <paper-item-body two-line=\"\">\n          <div class='name'>[[_computeStateName(item)]]</div>\n          <div secondary>[[item.entity_id]]</div>\n        </paper-item-body>\n      </paper-icon-item>\n    `;\n  }\n\n  root.querySelector(\"state-badge\")!.stateObj = model.item;\n  root.querySelector(\".name\")!.textContent = computeStateName(model.item);\n  root.querySelector(\"[secondary]\")!.textContent = model.item.entity_id;\n};\n\nclass HaEntityPicker extends LitElement {\n  @property({ type: Boolean }) public autofocus?: boolean;\n  @property({ type: Boolean }) public disabled?: boolean;\n  @property({ type: Boolean, attribute: \"allow-custom-entity\" })\n  public allowCustomEntity;\n  @property() public hass?: HomeAssistant;\n  @property() public label?: string;\n  @property() public value?: string;\n  @property({ attribute: \"domain-filter\" }) public domainFilter?: string;\n  @property() public entityFilter?: HaEntityPickerEntityFilterFunc;\n  @property({ type: Boolean }) private _opened?: boolean;\n  @property() private _hass?: HomeAssistant;\n\n  private _getStates = memoizeOne(\n    (\n      hass: this[\"hass\"],\n      domainFilter: this[\"domainFilter\"],\n      entityFilter: this[\"entityFilter\"]\n    ) => {\n      let states: HassEntity[] = [];\n\n      if (!hass) {\n        return [];\n      }\n      let entityIds = Object.keys(hass.states);\n\n      if (domainFilter) {\n        entityIds = entityIds.filter(\n          (eid) => eid.substr(0, eid.indexOf(\".\")) === domainFilter\n        );\n      }\n\n      states = entityIds.sort().map((key) => hass!.states[key]);\n\n      if (entityFilter) {\n        states = states.filter(\n          (stateObj) =>\n            // We always want to include the entity of the current value\n            stateObj.entity_id === this.value || entityFilter!(stateObj)\n        );\n      }\n      return states;\n    }\n  );\n\n  protected updated(changedProps: PropertyValues) {\n    super.updated(changedProps);\n\n    if (changedProps.has(\"hass\") && !this._opened) {\n      this._hass = this.hass;\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    const states = this._getStates(\n      this._hass,\n      this.domainFilter,\n      this.entityFilter\n    );\n\n    return html`\n      <vaadin-combo-box-light\n        item-value-path=\"entity_id\"\n        item-label-path=\"entity_id\"\n        .items=${states}\n        .value=${this._value}\n        .allowCustomValue=${this.allowCustomEntity}\n        .renderer=${rowRenderer}\n        @opened-changed=${this._openedChanged}\n        @value-changed=${this._valueChanged}\n      >\n        <paper-input\n          .autofocus=${this.autofocus}\n          .label=${this.label === undefined && this._hass\n            ? this._hass.localize(\"ui.components.entity.entity-picker.entity\")\n            : this.label}\n          .value=${this._value}\n          .disabled=${this.disabled}\n          class=\"input\"\n          autocapitalize=\"none\"\n          autocomplete=\"off\"\n          autocorrect=\"off\"\n          spellcheck=\"false\"\n        >\n          ${this.value\n            ? html`\n                <paper-icon-button\n                  aria-label=\"Clear\"\n                  slot=\"suffix\"\n                  class=\"clear-button\"\n                  icon=\"hass:close\"\n                  no-ripple\n                >\n                  Clear\n                </paper-icon-button>\n              `\n            : \"\"}\n          ${states.length > 0\n            ? html`\n                <paper-icon-button\n                  aria-label=\"Show entities\"\n                  slot=\"suffix\"\n                  class=\"toggle-button\"\n                  .icon=${this._opened ? \"hass:menu-up\" : \"hass:menu-down\"}\n                >\n                  Toggle\n                </paper-icon-button>\n              `\n            : \"\"}\n        </paper-input>\n      </vaadin-combo-box-light>\n    `;\n  }\n\n  private get _value() {\n    return this.value || \"\";\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>) {\n    this._opened = ev.detail.value;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    const newValue = ev.detail.value;\n    if (newValue !== this._value) {\n      this.value = ev.detail.value;\n      setTimeout(() => {\n        fireEvent(this, \"value-changed\", { value: this.value });\n        fireEvent(this, \"change\");\n      }, 0);\n    }\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input > paper-icon-button {\n        width: 24px;\n        height: 24px;\n        padding: 2px;\n        color: var(--secondary-text-color);\n      }\n      [hidden] {\n        display: none;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-picker\", HaEntityPicker);\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-entity-picker\": HaEntityPicker;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\n\nimport \"../../../../components/entity/ha-entity-picker\";\n\nimport { struct } from \"../../common/structs/struct\";\nimport { EntitiesEditorEvent, EditorTarget } from \"../types\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { WeatherForecastCardConfig } from \"../../cards/types\";\n\nconst cardConfigStruct = struct({\n  type: \"string\",\n  entity: \"string?\",\n  name: \"string?\",\n});\n\n@customElement(\"hui-weather-forecast-card-editor\")\nexport class HuiWeatherForecastCardEditor extends LitElement\n  implements LovelaceCardEditor {\n  @property() public hass?: HomeAssistant;\n\n  @property() private _config?: WeatherForecastCardConfig;\n\n  public setConfig(config: WeatherForecastCardConfig): void {\n    config = cardConfigStruct(config);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass) {\n      return html``;\n    }\n\n    return html`\n      ${configElementStyle}\n      <div class=\"card-config\">\n        <div class=\"side-by-side\">\n          <paper-input\n            label=\"Name\"\n            .value=\"${this._name}\"\n            .configValue=\"${\"name\"}\"\n            @value-changed=\"${this._valueChanged}\"\n          ></paper-input>\n          <ha-entity-picker\n            .hass=\"${this.hass}\"\n            .value=\"${this._entity}\"\n            .configValue=${\"entity\"}\n            domain-filter=\"weather\"\n            @change=\"${this._valueChanged}\"\n            allow-custom-entity\n          ></ha-entity-picker>\n        </div>\n      </div>\n    `;\n  }\n\n  private _valueChanged(ev: EntitiesEditorEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    if (this[`_${target.configValue}`] === target.value) {\n      return;\n    }\n    if (target.configValue) {\n      if (target.value === \"\") {\n        delete this._config[target.configValue!];\n      } else {\n        this._config = {\n          ...this._config,\n          [target.configValue!]: target.value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: this._config });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-weather-forecast-card-editor\": HuiWeatherForecastCardEditor;\n  }\n}\n"],"sourceRoot":""}