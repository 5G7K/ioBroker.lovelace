{"version":3,"sources":["webpack:///./src/panels/dev-template/ha-panel-dev-template.js"],"names":["HaPanelDevTemplate","PolymerElement","template","html","properties","hass","type","Object","error","Boolean","value","rendering","String","observer","processed","computeFormClasses","narrow","computeRenderedClasses","templateChanged","_debouncer","Debouncer","debounce","timeOut","after","renderTemplate","callApi","then","bind","body","message","customElements","define"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAEA,MAAMA,kBAAN,SAAiCC,+EAAjC,CAAgD;AAC9C,aAAWC,QAAX,GAAsB;AACpB,WAAOC,wEAAK;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KAAZ;AAqGD;;AAED,aAAWC,UAAX,GAAwB;AACtB,WAAO;AACLC,UAAI,EAAE;AACJC,YAAI,EAAEC;AADF,OADD;AAKLC,WAAK,EAAE;AACLF,YAAI,EAAEG,OADD;AAELC,aAAK,EAAE;AAFF,OALF;AAULC,eAAS,EAAE;AACTL,YAAI,EAAEG,OADG;AAETC,aAAK,EAAE;AAFE,OAVN;AAeLR,cAAQ,EAAE;AACRI,YAAI,EAAEM,MADE;;AAER;AACAF,aAAK,EAAG;;;;;;;;;;;;;;;;;;;;eAHA;;AAwBR;AACAG,gBAAQ,EAAE;AAzBF,OAfL;AA2CLC,eAAS,EAAE;AACTR,YAAI,EAAEM,MADG;AAETF,aAAK,EAAE;AAFE;AA3CN,KAAP;AAgDD;;AAEDK,oBAAkB,CAACC,MAAD,EAAS;AACzB,WAAOA,MAAM,GAAG,aAAH,GAAmB,+BAAhC;AACD;;AAEDC,wBAAsB,CAACT,KAAD,EAAQ;AAC5B,WAAOA,KAAK,GAAG,gBAAH,GAAsB,UAAlC;AACD;;AAEDU,iBAAe,GAAG;AAChB,QAAI,KAAKV,KAAT,EAAgB;AACd,WAAKA,KAAL,GAAa,KAAb;AACD;;AACD,SAAKW,UAAL,GAAkBC,6EAAS,CAACC,QAAV,CAChB,KAAKF,UADW,EAEhBG,wEAAO,CAACC,KAAR,CAAc,GAAd,CAFgB,EAGhB,MAAM;AACJ,WAAKC,cAAL;AACD,KALe,CAAlB;AAOD;;AAEDA,gBAAc,GAAG;AACf,SAAKb,SAAL,GAAiB,IAAjB;AAEA,SAAKN,IAAL,CAAUoB,OAAV,CAAkB,MAAlB,EAA0B,UAA1B,EAAsC;AAAEvB,cAAQ,EAAE,KAAKA;AAAjB,KAAtC,EAAmEwB,IAAnE,CACE,UAASZ,SAAT,EAAoB;AAClB,WAAKA,SAAL,GAAiBA,SAAjB;AACA,WAAKH,SAAL,GAAiB,KAAjB;AACD,KAHD,CAGEgB,IAHF,CAGO,IAHP,CADF,EAKE,UAASnB,KAAT,EAAgB;AACd,WAAKM,SAAL,GACGN,KAAK,IAAIA,KAAK,CAACoB,IAAf,IAAuBpB,KAAK,CAACoB,IAAN,CAAWC,OAAnC,IACA,kCAFF;AAGA,WAAKrB,KAAL,GAAa,IAAb;AACA,WAAKG,SAAL,GAAiB,KAAjB;AACD,KAND,CAMEgB,IANF,CAMO,IANP,CALF;AAaD;;AAjM6C;;AAoMhDG,cAAc,CAACC,MAAf,CAAsB,uBAAtB,EAA+C/B,kBAA/C,E","file":"panel-dev-template.chunk.js","sourcesContent":["import \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@polymer/paper-input/paper-textarea\";\nimport \"@polymer/paper-spinner/paper-spinner\";\nimport { timeOut } from \"@polymer/polymer/lib/utils/async\";\nimport { Debouncer } from \"@polymer/polymer/lib/utils/debounce\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"../../components/ha-menu-button\";\nimport \"../../resources/ha-style\";\n\nclass HaPanelDevTemplate extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"ha-style iron-flex iron-positioning\"></style>\n      <style>\n        :host {\n          -ms-user-select: initial;\n          -webkit-user-select: initial;\n          -moz-user-select: initial;\n        }\n\n        .content {\n          padding: 16px;\n          direction: ltr;\n        }\n\n        .edit-pane {\n          margin-right: 16px;\n        }\n\n        .edit-pane a {\n          color: var(--dark-primary-color);\n        }\n\n        .horizontal .edit-pane {\n          max-width: 50%;\n        }\n\n        .render-pane {\n          position: relative;\n          max-width: 50%;\n        }\n\n        .render-spinner {\n          position: absolute;\n          top: 8px;\n          right: 8px;\n        }\n\n        paper-textarea {\n          --paper-input-container-input: {\n            @apply --paper-font-code1;\n          }\n        }\n\n        .rendered {\n          @apply --paper-font-code1;\n          clear: both;\n          white-space: pre-wrap;\n        }\n\n        .rendered.error {\n          color: red;\n        }\n      </style>\n\n      <app-header-layout has-scrolling-region>\n        <app-header slot=\"header\" fixed>\n          <app-toolbar>\n            <ha-menu-button></ha-menu-button>\n            <div main-title>Templates</div>\n          </app-toolbar>\n        </app-header>\n\n        <div class$=\"[[computeFormClasses(narrow)]]\">\n          <div class=\"edit-pane\">\n            <p>\n              Templates are rendered using the Jinja2 template engine with some\n              Home Assistant specific extensions.\n            </p>\n            <ul>\n              <li>\n                <a\n                  href=\"http://jinja.pocoo.org/docs/dev/templates/\"\n                  target=\"_blank\"\n                  >Jinja2 template documentation</a\n                >\n              </li>\n              <li>\n                <a\n                  href=\"https://home-assistant.io/docs/configuration/templating/\"\n                  target=\"_blank\"\n                  >Home Assistant template extensions</a\n                >\n              </li>\n            </ul>\n            <paper-textarea\n              label=\"Template editor\"\n              value=\"{{template}}\"\n              autofocus\n            ></paper-textarea>\n          </div>\n\n          <div class=\"render-pane\">\n            <paper-spinner\n              class=\"render-spinner\"\n              active=\"[[rendering]]\"\n            ></paper-spinner>\n            <pre class$=\"[[computeRenderedClasses(error)]]\">[[processed]]</pre>\n          </div>\n        </div>\n      </app-header-layout>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: {\n        type: Object,\n      },\n\n      error: {\n        type: Boolean,\n        value: false,\n      },\n\n      rendering: {\n        type: Boolean,\n        value: false,\n      },\n\n      template: {\n        type: String,\n        /* eslint-disable max-len */\n        value: `Imitate available variables:\n{% set my_test_json = {\n  \"temperature\": 25,\n  \"unit\": \"Â°C\"\n} %}\n\nThe temperature is {{ my_test_json.temperature }} {{ my_test_json.unit }}.\n\n{% if is_state(\"device_tracker.paulus\", \"home\") and\n      is_state(\"device_tracker.anne_therese\", \"home\") -%}\n  You are both home, you silly\n{%- else -%}\n  Anne Therese is at {{ states(\"device_tracker.anne_therese\") }}\n  Paulus is at {{ states(\"device_tracker.paulus\") }}\n{%- endif %}\n\nFor loop example:\n{% for state in states.sensor -%}\n  {%- if loop.first %}The {% elif loop.last %} and the {% else %}, the {% endif -%}\n  {{ state.name | lower }} is {{state.state_with_unit}}\n{%- endfor %}.`,\n        /* eslint-enable max-len */\n        observer: \"templateChanged\",\n      },\n\n      processed: {\n        type: String,\n        value: \"\",\n      },\n    };\n  }\n\n  computeFormClasses(narrow) {\n    return narrow ? \"content fit\" : \"content fit layout horizontal\";\n  }\n\n  computeRenderedClasses(error) {\n    return error ? \"error rendered\" : \"rendered\";\n  }\n\n  templateChanged() {\n    if (this.error) {\n      this.error = false;\n    }\n    this._debouncer = Debouncer.debounce(\n      this._debouncer,\n      timeOut.after(500),\n      () => {\n        this.renderTemplate();\n      }\n    );\n  }\n\n  renderTemplate() {\n    this.rendering = true;\n\n    this.hass.callApi(\"POST\", \"template\", { template: this.template }).then(\n      function(processed) {\n        this.processed = processed;\n        this.rendering = false;\n      }.bind(this),\n      function(error) {\n        this.processed =\n          (error && error.body && error.body.message) ||\n          \"Unknown error rendering template\";\n        this.error = true;\n        this.rendering = false;\n      }.bind(this)\n    );\n  }\n}\n\ncustomElements.define(\"ha-panel-dev-template\", HaPanelDevTemplate);\n"],"sourceRoot":""}