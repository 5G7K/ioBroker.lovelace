{"version":3,"sources":["webpack:///./src/common/datetime/relative_time.ts","webpack:///./src/common/string/compare.ts","webpack:///./src/components/entity/state-info.js","webpack:///./src/components/ha-relative-time.js","webpack:///./src/dialogs/domain-toggler/show-dialog-domain-toggler.ts","webpack:///./src/panels/config/cloud/ha-config-cloud-google-assistant.ts"],"names":["tests","langKey","relativeTime","dateObj","localize","options","compareTime","Date","delta","getTime","tense","Math","abs","timeDesc","i","length","floor","undefined","includeTense","compare","a","b","caseInsensitiveCompare","toLowerCase","StateInfo","stateObj","computeStateName","hass","computeRTL","html","styleTemplate","stateBadgeTemplate","infoTemplate","Object","inDialog","type","Boolean","value","rtl","reflectToAttribute","computed","PolymerElement","customElements","define","HaRelativeTime","datetime","String","observer","datetimeObj","parsedDateTime","updateRelative","bind","updateInterval","setInterval","clearInterval","newVal","root","dom","innerHTML","LocalizeMixin","loadDomainTogglerDialog","showDomainTogglerDialog","element","dialogParams","fireEvent","dialogTag","dialogImport","DEFAULT_CONFIG_EXPOSE","configIsExposed","config","should_expose","CloudGoogleAssistant","customElement","property","memoizeOne","filter","generateFilter","include_domains","include_entities","exclude_domains","exclude_entities","_entities","emptyFilter","isEmptyFilter","cloudStatus","google_entities","filterFunc","_getEntityFilterFunc","selected","cards","map","entity","states","entity_id","_entityConfigs","isExposed","_showMoreInfo","traits","trait","substr","lastIndexOf","join","_exposeChanged","might_2fa","disable_2fa","_disable2FAChanged","narrow","_openDomainToggler","changedProps","_fetchData","has","prefs","google_entity_configs","fetchCloudGoogleEntities","entities","sort","stateA","stateB","ev","entityId","currentTarget","newExposed","detail","_updateExposed","curExposed","_updateConfig","_ensureEntitySync","newDisable2FA","curDisable2FA","values","updateCloudGoogleEntityConfig","updatedConfig","_ensureStatusReload","domains","computeDomain","idx","self","indexOf","toggleDomain","domain","turnOn","forEach","_popstateReloadStatusAttached","parent","parentElement","window","addEventListener","once","_popstateSyncAttached","showToast","message","cloudSyncGoogleAssistant","css","LitElement"],"mappings":"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","file":"1.chunk.js","sourcesContent":["import { LocalizeFunc } from \"../translations/localize\";\n\n/**\n * Calculate a string representing a date object as relative time from now.\n *\n * Example output: 5 minutes ago, in 3 days.\n */\nconst tests = [60, 60, 24, 7];\nconst langKey = [\"second\", \"minute\", \"hour\", \"day\"];\n\nexport default function relativeTime(\n  dateObj: Date,\n  localize: LocalizeFunc,\n  options: {\n    compareTime?: Date;\n    includeTense?: boolean;\n  } = {}\n): string {\n  const compareTime = options.compareTime || new Date();\n  let delta = (compareTime.getTime() - dateObj.getTime()) / 1000;\n  const tense = delta >= 0 ? \"past\" : \"future\";\n  delta = Math.abs(delta);\n\n  let timeDesc;\n\n  for (let i = 0; i < tests.length; i++) {\n    if (delta < tests[i]) {\n      delta = Math.floor(delta);\n      timeDesc = localize(\n        `ui.components.relative_time.duration.${langKey[i]}`,\n        \"count\",\n        delta\n      );\n      break;\n    }\n\n    delta /= tests[i];\n  }\n\n  if (timeDesc === undefined) {\n    delta = Math.floor(delta);\n    timeDesc = localize(\n      \"ui.components.relative_time.duration.week\",\n      \"count\",\n      delta\n    );\n  }\n\n  return options.includeTense === false\n    ? timeDesc\n    : localize(`ui.components.relative_time.${tense}`, \"time\", timeDesc);\n}\n","export const compare = (a: string, b: string) => {\n  if (a < b) {\n    return -1;\n  }\n  if (a > b) {\n    return 1;\n  }\n\n  return 0;\n};\n\nexport const caseInsensitiveCompare = (a: string, b: string) =>\n  compare(a.toLowerCase(), b.toLowerCase());\n","import { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"../ha-relative-time\";\nimport \"./state-badge\";\nimport computeStateName from \"../../common/entity/compute_state_name\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\n\nclass StateInfo extends PolymerElement {\n  static get template() {\n    return html`\n      ${this.styleTemplate} ${this.stateBadgeTemplate} ${this.infoTemplate}\n    `;\n  }\n\n  static get styleTemplate() {\n    return html`\n      <style>\n        :host {\n          @apply --paper-font-body1;\n          min-width: 120px;\n          white-space: nowrap;\n        }\n\n        state-badge {\n          float: left;\n        }\n\n        :host([rtl]) state-badge {\n          float: right;\n        }\n\n        .info {\n          margin-left: 56px;\n        }\n\n        :host([rtl]) .info {\n          margin-right: 56px;\n          margin-left: 0;\n          text-align: right;\n        }\n\n        .name {\n          @apply --paper-font-common-nowrap;\n          color: var(--primary-text-color);\n          line-height: 40px;\n        }\n\n        .name[in-dialog],\n        :host([secondary-line]) .name {\n          line-height: 20px;\n        }\n\n        .time-ago,\n        .extra-info,\n        .extra-info > * {\n          @apply --paper-font-common-nowrap;\n          color: var(--secondary-text-color);\n        }\n      </style>\n    `;\n  }\n\n  static get stateBadgeTemplate() {\n    return html`\n      <state-badge state-obj=\"[[stateObj]]\"></state-badge>\n    `;\n  }\n\n  static get infoTemplate() {\n    return html`\n      <div class=\"info\">\n        <div class=\"name\" in-dialog$=\"[[inDialog]]\">\n          [[computeStateName(stateObj)]]\n        </div>\n\n        <template is=\"dom-if\" if=\"[[inDialog]]\">\n          <div class=\"time-ago\">\n            <ha-relative-time\n              hass=\"[[hass]]\"\n              datetime=\"[[stateObj.last_changed]]\"\n            ></ha-relative-time>\n          </div>\n        </template>\n        <template is=\"dom-if\" if=\"[[!inDialog]]\">\n          <div class=\"extra-info\"><slot> </slot></div>\n        </template>\n      </div>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      stateObj: Object,\n      inDialog: {\n        type: Boolean,\n        value: () => false,\n      },\n      rtl: {\n        type: Boolean,\n        reflectToAttribute: true,\n        computed: \"computeRTL(hass)\",\n      },\n    };\n  }\n\n  computeStateName(stateObj) {\n    return computeStateName(stateObj);\n  }\n\n  computeRTL(hass) {\n    return computeRTL(hass);\n  }\n}\n\ncustomElements.define(\"state-info\", StateInfo);\n","import { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport relativeTime from \"../common/datetime/relative_time\";\n\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaRelativeTime extends LocalizeMixin(PolymerElement) {\n  static get properties() {\n    return {\n      hass: Object,\n      datetime: {\n        type: String,\n        observer: \"datetimeChanged\",\n      },\n\n      datetimeObj: {\n        type: Object,\n        observer: \"datetimeObjChanged\",\n      },\n\n      parsedDateTime: Object,\n    };\n  }\n\n  constructor() {\n    super();\n    this.updateRelative = this.updateRelative.bind(this);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // update every 60 seconds\n    this.updateInterval = setInterval(this.updateRelative, 60000);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    clearInterval(this.updateInterval);\n  }\n\n  datetimeChanged(newVal) {\n    this.parsedDateTime = newVal ? new Date(newVal) : null;\n\n    this.updateRelative();\n  }\n\n  datetimeObjChanged(newVal) {\n    this.parsedDateTime = newVal;\n\n    this.updateRelative();\n  }\n\n  updateRelative() {\n    const root = dom(this);\n    if (!this.parsedDateTime) {\n      root.innerHTML = this.localize(\"ui.components.relative_time.never\");\n    } else {\n      root.innerHTML = relativeTime(this.parsedDateTime, this.localize);\n    }\n  }\n}\n\ncustomElements.define(\"ha-relative-time\", HaRelativeTime);\n","import { fireEvent } from \"../../common/dom/fire_event\";\n\nexport interface HaDomainTogglerDialogParams {\n  domains: string[];\n  toggleDomain: (domain: string, turnOn: boolean) => void;\n}\n\nexport const loadDomainTogglerDialog = () =>\n  import(/* webpackChunkName: \"dialog-domain-toggler\" */ \"./dialog-domain-toggler\");\n\nexport const showDomainTogglerDialog = (\n  element: HTMLElement,\n  dialogParams: HaDomainTogglerDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"dialog-domain-toggler\",\n    dialogImport: loadDomainTogglerDialog,\n    dialogParams,\n  });\n};\n","import {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-toggle-button\";\nimport \"@polymer/paper-icon-button\";\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../layouts/hass-loading-screen\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/entity/state-info\";\nimport { HomeAssistant } from \"../../../types\";\nimport {\n  GoogleEntity,\n  fetchCloudGoogleEntities,\n  CloudStatusLoggedIn,\n  CloudPreferences,\n  updateCloudGoogleEntityConfig,\n  cloudSyncGoogleAssistant,\n  GoogleEntityConfig,\n} from \"../../../data/cloud\";\nimport memoizeOne from \"memoize-one\";\nimport {\n  generateFilter,\n  isEmptyFilter,\n  EntityFilter,\n} from \"../../../common/entity/entity_filter\";\nimport { compare } from \"../../../common/string/compare\";\nimport computeStateName from \"../../../common/entity/compute_state_name\";\nimport { fireEvent } from \"../../../common/dom/fire_event\";\nimport { showToast } from \"../../../util/toast\";\nimport { PolymerChangedEvent } from \"../../../polymer-types\";\nimport { showDomainTogglerDialog } from \"../../../dialogs/domain-toggler/show-dialog-domain-toggler\";\nimport computeDomain from \"../../../common/entity/compute_domain\";\n\nconst DEFAULT_CONFIG_EXPOSE = true;\n\nconst configIsExposed = (config: GoogleEntityConfig) =>\n  config.should_expose === undefined\n    ? DEFAULT_CONFIG_EXPOSE\n    : config.should_expose;\n\n@customElement(\"ha-config-cloud-google-assistant\")\nclass CloudGoogleAssistant extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public cloudStatus!: CloudStatusLoggedIn;\n  @property() public narrow!: boolean;\n  @property() private _entities?: GoogleEntity[];\n  @property()\n  private _entityConfigs: CloudPreferences[\"google_entity_configs\"] = {};\n  private _popstateSyncAttached = false;\n  private _popstateReloadStatusAttached = false;\n\n  private _getEntityFilterFunc = memoizeOne((filter: EntityFilter) =>\n    generateFilter(\n      filter.include_domains,\n      filter.include_entities,\n      filter.exclude_domains,\n      filter.exclude_entities\n    )\n  );\n\n  protected render(): TemplateResult | void {\n    if (this._entities === undefined) {\n      return html`\n        <hass-loading-screen></hass-loading-screen>\n      `;\n    }\n    const emptyFilter = isEmptyFilter(this.cloudStatus.google_entities);\n    const filterFunc = this._getEntityFilterFunc(\n      this.cloudStatus.google_entities\n    );\n    let selected = 0;\n    const cards = this._entities.map((entity) => {\n      const stateObj = this.hass.states[entity.entity_id];\n      const config = this._entityConfigs[entity.entity_id] || {};\n      const isExposed = emptyFilter\n        ? configIsExposed(config)\n        : filterFunc(entity.entity_id);\n      if (isExposed) {\n        selected++;\n      }\n\n      return html`\n        <ha-card>\n          <div class=\"card-content\">\n            <state-info\n              .hass=${this.hass}\n              .stateObj=${stateObj}\n              secondary-line\n              @click=${this._showMoreInfo}\n            >\n              ${entity.traits\n                .map((trait) => trait.substr(trait.lastIndexOf(\".\") + 1))\n                .join(\", \")}\n            </state-info>\n            <paper-toggle-button\n              .entityId=${entity.entity_id}\n              .disabled=${!emptyFilter}\n              .checked=${isExposed}\n              @checked-changed=${this._exposeChanged}\n            >\n              Expose to Google Assistant\n            </paper-toggle-button>\n            ${entity.might_2fa\n              ? html`\n                  <paper-toggle-button\n                    .entityId=${entity.entity_id}\n                    .checked=${Boolean(config.disable_2fa)}\n                    @checked-changed=${this._disable2FAChanged}\n                  >\n                    Disable two factor authentication\n                  </paper-toggle-button>\n                `\n              : \"\"}\n          </div>\n        </ha-card>\n      `;\n    });\n\n    return html`\n      <hass-subpage header=\"Google Assistant\">\n        <span slot=\"toolbar-icon\">\n          ${selected}${!this.narrow\n            ? html`\n                selected\n              `\n            : \"\"}\n        </span>\n        <paper-icon-button\n          slot=\"toolbar-icon\"\n          icon=\"hass:tune\"\n          @click=${this._openDomainToggler}\n        ></paper-icon-button>\n        ${!emptyFilter\n          ? html`\n              <div class=\"banner\">\n                Editing which entities are exposed via this UI is disabled\n                because you have configured entity filters in\n                configuration.yaml.\n              </div>\n            `\n          : \"\"}\n        <div class=\"content\">\n          ${cards}\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this._fetchData();\n  }\n\n  protected updated(changedProps) {\n    super.updated(changedProps);\n    if (changedProps.has(\"cloudStatus\")) {\n      this._entityConfigs = this.cloudStatus.prefs.google_entity_configs;\n    }\n  }\n\n  private async _fetchData() {\n    const entities = await fetchCloudGoogleEntities(this.hass);\n    entities.sort((a, b) => {\n      const stateA = this.hass.states[a.entity_id];\n      const stateB = this.hass.states[b.entity_id];\n      return compare(\n        stateA ? computeStateName(stateA) : a.entity_id,\n        stateB ? computeStateName(stateB) : b.entity_id\n      );\n    });\n    this._entities = entities;\n  }\n\n  private _showMoreInfo(ev) {\n    const entityId = ev.currentTarget.stateObj.entity_id;\n    fireEvent(this, \"hass-more-info\", { entityId });\n  }\n\n  private async _exposeChanged(ev: PolymerChangedEvent<boolean>) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newExposed = ev.detail.value;\n    await this._updateExposed(entityId, newExposed);\n  }\n\n  private async _updateExposed(entityId: string, newExposed: boolean) {\n    const curExposed = configIsExposed(this._entityConfigs[entityId] || {});\n    if (newExposed === curExposed) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      should_expose: newExposed,\n    });\n    this._ensureEntitySync();\n  }\n\n  private async _disable2FAChanged(ev: PolymerChangedEvent<boolean>) {\n    const entityId = (ev.currentTarget as any).entityId;\n    const newDisable2FA = ev.detail.value;\n    const curDisable2FA = Boolean(\n      (this._entityConfigs[entityId] || {}).disable_2fa\n    );\n    if (newDisable2FA === curDisable2FA) {\n      return;\n    }\n    await this._updateConfig(entityId, {\n      disable_2fa: newDisable2FA,\n    });\n  }\n\n  private async _updateConfig(entityId: string, values: GoogleEntityConfig) {\n    const updatedConfig = await updateCloudGoogleEntityConfig(\n      this.hass,\n      entityId,\n      values\n    );\n    this._entityConfigs = {\n      ...this._entityConfigs,\n      [entityId]: updatedConfig,\n    };\n    this._ensureStatusReload();\n  }\n\n  private _openDomainToggler() {\n    showDomainTogglerDialog(this, {\n      domains: this._entities!.map((entity) =>\n        computeDomain(entity.entity_id)\n      ).filter((value, idx, self) => self.indexOf(value) === idx),\n      toggleDomain: (domain, turnOn) => {\n        this._entities!.forEach((entity) => {\n          if (computeDomain(entity.entity_id) === domain) {\n            this._updateExposed(entity.entity_id, turnOn);\n          }\n        });\n      },\n    });\n  }\n\n  private _ensureStatusReload() {\n    if (this._popstateReloadStatusAttached) {\n      return;\n    }\n    this._popstateReloadStatusAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => fireEvent(parent, \"ha-refresh-cloud-status\"),\n      { once: true }\n    );\n  }\n\n  private _ensureEntitySync() {\n    if (this._popstateSyncAttached) {\n      return;\n    }\n    this._popstateSyncAttached = true;\n    // Cache parent because by the time popstate happens,\n    // this element is detached\n    const parent = this.parentElement!;\n    window.addEventListener(\n      \"popstate\",\n      () => {\n        showToast(parent, { message: \"Synchronizing changes to Google.\" });\n        cloudSyncGoogleAssistant(this.hass);\n      },\n      { once: true }\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .banner {\n        color: var(--primary-text-color);\n        background-color: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        padding: 16px 8px;\n        text-align: center;\n      }\n      .content {\n        display: flex;\n        flex-wrap: wrap;\n        padding: 4px;\n        --paper-toggle-button-label-spacing: 16px;\n      }\n      ha-card {\n        margin: 4px;\n        width: 100%;\n        max-width: 300px;\n      }\n      .card-content {\n        padding-bottom: 12px;\n      }\n      state-info {\n        cursor: pointer;\n      }\n      paper-toggle-button {\n        padding: 8px 0;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-config-cloud-google-assistant\": CloudGoogleAssistant;\n  }\n}\n"],"sourceRoot":""}