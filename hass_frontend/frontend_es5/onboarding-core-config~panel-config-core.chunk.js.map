{"version":3,"sources":["webpack:///./src/common/dom/setup-leaflet-map.ts","webpack:///./src/components/map/ha-location-editor.ts","webpack:///./src/components/timezone-datalist.ts","webpack:///./src/data/core.ts"],"names":["setupLeafletMap","mapElement","parentNode","Error","Leaflet","Icon","Default","imagePath","map","style","document","createElement","setAttribute","appendChild","setView","tileLayer","Browser","retina","attribution","subdomains","minZoom","maxZoom","addTo","LocationEditor","customElement","property","_leafletMap","location","fitZoom","html","changedProps","_initMap","_updateMarker","_ignoreFitToMap","fitMap","undefined","shadowRoot","querySelector","_mapEl","addEventListener","ev","_updateLocation","latlng","invalidateSize","lat","lng","fireEvent","bubbles","_locationMarker","remove","setLatLng","marker","draggable","target","getLatLng","addLayer","css","LitElement","createTimezoneListEl","list","id","Object","keys","timezones","forEach","key","option","value","innerHTML","saveCoreConfig","hass","values","callWS","type","detectCoreConfig"],"mappings":"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","file":"onboarding-core-config~panel-config-core.chunk.js","sourcesContent":["import { Map } from \"leaflet\";\n\n// Sets up a Leaflet map on the provided DOM element\nexport type LeafletModuleType = typeof import(\"leaflet\");\n\nexport const setupLeafletMap = async (\n  mapElement: HTMLElement\n): Promise<[Map, LeafletModuleType]> => {\n  if (!mapElement.parentNode) {\n    throw new Error(\"Cannot setup Leaflet map on disconnected element\");\n  }\n  // tslint:disable-next-line\n  const Leaflet = (await import(/* webpackChunkName: \"leaflet\" */ \"leaflet\")) as LeafletModuleType;\n  Leaflet.Icon.Default.imagePath = \"/static/images/leaflet/images/\";\n\n  const map = Leaflet.map(mapElement);\n  const style = document.createElement(\"link\");\n  style.setAttribute(\"href\", \"/static/images/leaflet/leaflet.css\");\n  style.setAttribute(\"rel\", \"stylesheet\");\n  mapElement.parentNode.appendChild(style);\n  map.setView([52.3731339, 4.8903147], 13);\n  Leaflet.tileLayer(\n    `https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}${\n      Leaflet.Browser.retina ? \"@2x.png\" : \".png\"\n    }`,\n    {\n      attribution:\n        '&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>',\n      subdomains: \"abcd\",\n      minZoom: 0,\n      maxZoom: 20,\n    }\n  ).addTo(map);\n\n  return [map, Leaflet];\n};\n","import {\n  LitElement,\n  property,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  customElement,\n  PropertyValues,\n} from \"lit-element\";\nimport { Marker, Map, LeafletMouseEvent, DragEndEvent, LatLng } from \"leaflet\";\nimport {\n  setupLeafletMap,\n  LeafletModuleType,\n} from \"../../common/dom/setup-leaflet-map\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\n\n@customElement(\"ha-location-editor\")\nclass LocationEditor extends LitElement {\n  @property() public location?: [number, number];\n  public fitZoom = 16;\n\n  private _ignoreFitToMap?: [number, number];\n\n  // tslint:disable-next-line\n  private Leaflet?: LeafletModuleType;\n  private _leafletMap?: Map;\n  private _locationMarker?: Marker;\n\n  public fitMap(): void {\n    if (!this._leafletMap || !this.location) {\n      return;\n    }\n    this._leafletMap.setView(this.location, this.fitZoom);\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      <div id=\"map\"></div>\n    `;\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._initMap();\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    super.updated(changedProps);\n\n    // Still loading.\n    if (!this.Leaflet) {\n      return;\n    }\n\n    this._updateMarker();\n    if (!this._ignoreFitToMap || this._ignoreFitToMap !== this.location) {\n      this.fitMap();\n    }\n    this._ignoreFitToMap = undefined;\n  }\n\n  private get _mapEl(): HTMLDivElement {\n    return this.shadowRoot!.querySelector(\"div\")!;\n  }\n\n  private async _initMap(): Promise<void> {\n    [this._leafletMap, this.Leaflet] = await setupLeafletMap(this._mapEl);\n    this._leafletMap.addEventListener(\n      \"click\",\n      // @ts-ignore\n      (ev: LeafletMouseEvent) => this._updateLocation(ev.latlng)\n    );\n    this._updateMarker();\n    this.fitMap();\n    this._leafletMap.invalidateSize();\n  }\n\n  private _updateLocation(latlng: LatLng) {\n    this.location = this._ignoreFitToMap = [latlng.lat, latlng.lng];\n    fireEvent(this, \"change\", undefined, { bubbles: false });\n  }\n\n  private _updateMarker(): void {\n    if (!this.location) {\n      if (this._locationMarker) {\n        this._locationMarker.remove();\n        this._locationMarker = undefined;\n      }\n      return;\n    }\n\n    if (this._locationMarker) {\n      this._locationMarker.setLatLng(this.location);\n      return;\n    }\n    this._locationMarker = this.Leaflet!.marker(this.location, {\n      draggable: true,\n    });\n    this._locationMarker.addEventListener(\n      \"dragend\",\n      // @ts-ignore\n      (ev: DragEndEvent) => this._updateLocation(ev.target.getLatLng())\n    );\n    this._leafletMap!.addLayer(this._locationMarker);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: block;\n        height: 300px;\n      }\n      #map {\n        height: 100%;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-location-editor\": LocationEditor;\n  }\n}\n","import timezones from \"google-timezones-json\";\n\nexport const createTimezoneListEl = () => {\n  const list = document.createElement(\"datalist\");\n  list.id = \"timezones\";\n  Object.keys(timezones).forEach((key) => {\n    const option = document.createElement(\"option\");\n    option.value = key;\n    option.innerHTML = timezones[key];\n    list.appendChild(option);\n  });\n  return list;\n};\n","import { HomeAssistant } from \"../types\";\nimport { HassConfig } from \"home-assistant-js-websocket\";\n\nexport interface ConfigUpdateValues {\n  location_name: string;\n  latitude: number;\n  longitude: number;\n  elevation: number;\n  unit_system: \"metric\" | \"imperial\";\n  time_zone: string;\n}\n\nexport const saveCoreConfig = (\n  hass: HomeAssistant,\n  values: Partial<ConfigUpdateValues>\n) =>\n  hass.callWS<HassConfig>({\n    type: \"config/core/update\",\n    ...values,\n  });\n\nexport const detectCoreConfig = (hass: HomeAssistant) =>\n  hass.callWS<Partial<ConfigUpdateValues>>({\n    type: \"config/core/detect\",\n  });\n"],"sourceRoot":""}