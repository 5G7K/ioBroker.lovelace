{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/resources/codemirror.ondemand.ts","webpack:///./src/components/ha-code-editor.ts","webpack:///./src/panels/lovelace/hui-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","loaded","_decorate","customElement","_initialize","_UpdatingElement","HaCodeEditor","_UpdatingElement2","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","_assertThisInitialized","_inherits","F","kind","key","decorators","property","_value","codemirror","getValue","shadowRoot","querySelector","_get","prototype","refresh","autofocus","focus","changedProps","has","setOption","mode","setValue","_calcGutters","_setScrollBarDirection","classList","toggle","error","_load","codeMirror","_this2","regeneratorRuntime","async","_context","prev","next","awrap","Promise","all","e","then","bind","abrupt","stop","sent","attachShadow","innerHTML","codeMirrorCss","lineNumbers","tabSize","viewportMargin","Infinity","extraKeys","Tab","Shift-Tab","gutters","on","_onChange","newValue","fireEvent","rtl","getWrapperElement","UpdatingElement","lovelaceStruct","title","views","resources","optional","LovelaceFullConfigEditor","LitElement","hass","lovelace","closeEditor","_saving","_changed","haStyle","css","_templateObject2","html","_templateObject","_closeEditor","localize","classMap","saved","_handleSave","computeRTL","_yamlChanged","yamlEditor","safeDump","config","getDoc","isClean","_generation","window","onbeforeunload","confirm","hasComments","safeLoad","alert","t0","t1","saveConfig","t2","changeGeneration","customElements","define"],"mappings":"oGAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAIO,IAAMA,EAASC,YAAY,CAChCC,MAAO,CACLC,YCNG,SAAoBC,GACzB,MAAqB,iBAAVA,EACF,iCAEJA,EAAMC,SAAS,MACX,qDDEPC,KEPG,SAAgBF,GACrB,MAAqB,iBAAVA,EACF,4BAEJA,EAAMC,SAAS,MACX,gFCAX,IAAIE,u3PCYJC,CAAA,CADCC,YAAc,mBACf,SAAAC,EAAAC,GAAA,IAAaC,EAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,+FAAAC,CAAAC,KAAAL,GAAA,QAAAM,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAR,uEAAAS,CAAAP,MAAAH,EAAAW,EAAAb,IAAAc,KAAAC,MAAAb,EAAA,CAAAG,MAAAW,OAAAP,KAAAX,EAAAmB,EAAAd,MAAA,yOAAAe,CAAAlB,EAAAD,GAAAC,EAAA,UAAAmB,EAAanB,EAAbd,EAAA,EAAAkC,KAAA,QAAAC,IAAA,aAAA7B,WAAA,IAAA4B,KAAA,QAAAE,WAAA,CAEGC,eAFHF,IAAA,OAAA7B,WAAA,IAAA4B,KAAA,QAAAE,WAAA,CAGGC,eAHHF,IAAA,YAAA7B,MAAA,kBAGiC,IAHjC,CAAA4B,KAAA,QAAAE,WAAA,CAIGC,eAJHF,IAAA,MAAA7B,MAAA,kBAI2B,IAJ3B,CAAA4B,KAAA,QAAAE,WAAA,CAKGC,eALHF,IAAA,QAAA7B,MAAA,kBAK6B,IAL7B,CAAA4B,KAAA,QAAAE,WAAA,CAMGC,eANHF,IAAA,SAAA7B,MAAA,iBAM+B,KAN/B,CAAA4B,KAAA,MAAAC,IAAA,QAAA7B,MAQE,SAAiBA,GACfa,KAAKmB,OAAShC,IATlB,CAAA4B,KAAA,MAAAC,IAAA,QAAA7B,MAYE,WACE,OAAOa,KAAKoB,WAAapB,KAAKoB,WAAWC,WAAarB,KAAKmB,SAb/D,CAAAJ,KAAA,MAAAC,IAAA,cAAA7B,MAgBE,WACE,QAAOa,KAAKsB,WAAYC,cAAc,qBAjB1C,CAAAR,KAAA,SAAAC,IAAA,oBAAA7B,MAoBE,WACEqC,EAAAhB,EArBSb,EAqBT8B,WAAA,oBAAAzB,MAAAS,KAAAT,MACKA,KAAKoB,aAGVpB,KAAKoB,WAAWM,WACO,IAAnB1B,KAAK2B,WACP3B,KAAKoB,WAAWQ,WA3BtB,CAAAb,KAAA,SAAAC,IAAA,SAAA7B,MA+BE,SAAiB0C,GACfL,EAAAhB,EAhCSb,EAgCT8B,WAAA,SAAAzB,MAAAS,KAAAT,KAAa6B,GAER7B,KAAKoB,aAINS,EAAaC,IAAI,SACnB9B,KAAKoB,WAAWW,UAAU,OAAQ/B,KAAKgC,MAErCH,EAAaC,IAAI,cACnB9B,KAAKoB,WAAWW,UAAU,aAAgC,IAAnB/B,KAAK2B,WAE1CE,EAAaC,IAAI,WAAa9B,KAAKmB,SAAWnB,KAAKb,OACrDa,KAAKoB,WAAWa,SAASjC,KAAKmB,QAE5BU,EAAaC,IAAI,SACnB9B,KAAKoB,WAAWW,UAAU,UAAW/B,KAAKkC,gBAC1ClC,KAAKmC,0BAEHN,EAAaC,IAAI,UACnB9B,KAAKoC,UAAUC,OAAO,cAAerC,KAAKsC,UApDhD,CAAAvB,KAAA,SAAAC,IAAA,eAAA7B,MAwDE,SAAuB0C,GACrBL,EAAAhB,EAzDSb,EAyDT8B,WAAA,eAAAzB,MAAAS,KAAAT,KAAmB6B,GACnB7B,KAAKuC,UA1DT,CAAAxB,KAAA,SAAAC,IAAA,QAAA7B,MA6DE,eAAAG,EAAAkD,EAAAlB,EAAAmB,EAAAzC,KAAA,OAAA0C,mBAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAAAJ,mBAAAK,MDvE4BL,mBAAAC,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACvBxD,IACHA,EAAS0D,QAAAC,IAAA,CAAArE,EAAAsE,EAAA,KAAAtE,EAAAsE,EAAA,MAAAC,KAAAvE,EAAAwE,KAAA,YAFiBR,EAAAS,OAAA,SAIrB/D,GAJqB,wBAAAsD,EAAAU,WCuE5B,OACQhE,EADRsD,EAAAW,KAGQf,EAAalD,EAAOkD,YAEpBlB,EAAatB,KAAKwD,aAAa,CAAExB,KAAM,UAEjCyB,UAAZ,wBAAA9C,OAEIrB,EAAOoE,cAFX,qiCAiCA1D,KAAKoB,WAAaoB,EAAWlB,EAAY,CACvCnC,MAAOa,KAAKmB,OACZwC,aAAa,EACbC,QAAS,EACT5B,KAAMhC,KAAKgC,KACXL,WAA8B,IAAnB3B,KAAK2B,UAChBkC,eAAgBC,IAChBC,UAAW,CACTC,IAAK,aACLC,YAAa,cAEfC,QAASlE,KAAKkC,iBAEhBlC,KAAKmC,yBACLnC,KAAKoB,WAAY+C,GAAG,UAAW,kBAAM1B,EAAK2B,cAtD5C,wBAAAxB,EAAAU,SAAA,KAAAtD,QA7DF,CAAAe,KAAA,SAAAC,IAAA,YAAA7B,MAsHE,WACE,IAAMkF,EAAWrE,KAAKb,MAClBkF,IAAarE,KAAKmB,SAGtBnB,KAAKmB,OAASkD,EACdC,YAAUtE,KAAM,gBAAiB,CAAEb,MAAOa,KAAKmB,YA5HnD,CAAAJ,KAAA,SAAAC,IAAA,eAAA7B,MA+HE,WACE,OAAOa,KAAKuE,IAAM,CAAC,aAAc,0BAA4B,KAhIjE,CAAAxD,KAAA,SAAAC,IAAA,yBAAA7B,MAmIE,WACMa,KAAKoB,YACPpB,KAAKoB,WAAWoD,oBAAoBpC,UAAUC,OAAO,MAAOrC,KAAKuE,UArIrCE,ysFCMlC,IAAMC,EAAiB3F,IAAM,UAAW,CACtC4F,MAAO,UACPC,MAAO,CAAC,UACRC,UAAW9F,IAAO+F,SAAS,CAAC,aAGxBC,meAMkB,2PANeC,gDASnC,MAAO,CACLC,KAAM,GACNC,SAAU,GACVC,YAAa,GACbC,QAAS,GACTC,SAAU,mCA2DZ,MAAO,CACLC,IACAC,YAFKC,4CAtDP,OAAOC,YAAPC,IAMoB1F,KAAK2F,aAGb3F,KAAKiF,KAAMW,SACX,8CAKAC,YAAS,CACTC,OAAyB,IAAlB9F,KAAKoF,UAAwC,IAAlBpF,KAAKqF,WAGvCrF,KAAKqF,SACHrF,KAAKiF,KAAMW,SACT,uDAEF5F,KAAKiF,KAAMW,SACT,6CAGqB5F,KAAK+F,YAC7B/F,KAAKiF,KAAMW,SACZ,4CASGI,YAAWhG,KAAKiF,MACdjF,KAAKiF,KACIjF,KAAKiG,aACPjG,KAAK+F,oDAS7B/F,KAAKkG,WAAW/G,MAAQgH,mBAASnG,KAAKkF,SAAUkB,+CA8ChDpG,KAAKqF,UAAYrF,KAAKkG,WACnB9E,WAAYiF,SACZC,QAAQtG,KAAKuG,aACZvG,KAAKqF,WAAamB,OAAOC,eAC3BD,OAAOC,eAAiB,WACtB,OAAO,IAECzG,KAAKqF,UAAYmB,OAAOC,iBAClCD,OAAOC,eAAiB,6CAKtBzG,KAAKqF,WAEJqB,QACC1G,KAAKiF,KAAKW,SACR,kEAORY,OAAOC,eAAiB,KACpBzG,KAAKmF,aACPnF,KAAKmF,8IAKPnF,KAAKoF,SAAU,GAEXpF,KAAKkG,WAAWS,+BAEfD,QACC1G,KAAKiF,KAAKW,SACR,2HAUNzG,EAAQyH,mBAAS5G,KAAKkG,WAAW/G,8DAEjC0H,MACE7G,KAAKiF,KAAKW,SACR,uDACA,QAFFhD,EAAAkE,KAMF9G,KAAKoF,SAAU,uCAIfjG,EAAQuF,EAAevF,6DAEvB0H,MACE7G,KAAKiF,KAAKW,SACR,2DACA,QAFFhD,EAAAmE,oFASI/G,KAAKkF,SAAU8B,WAAW7H,+DAEhC0H,MACE7G,KAAKiF,KAAKW,SACR,sDACA,QAFFhD,EAAAqE,aAOJjH,KAAKuG,YAAcvG,KAAKkG,WACrB9E,WAAYiF,SACZa,kBAAiB,GACpBV,OAAOC,eAAiB,KACxBzG,KAAKoF,SAAU,EACfpF,KAAKqF,UAAW,4GAIhB,OAAOrF,KAAKsB,WAAYC,cAAc,uDAU1C4F,eAAeC,OAAO,aAAcrC","file":"chunk.8b344c5b53625584da2f.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","interface LoadedCodeMirror {\n  codeMirror: any;\n  codeMirrorCss: any;\n}\n\nlet loaded: Promise<LoadedCodeMirror>;\n\nexport const loadCodeMirror = async (): Promise<LoadedCodeMirror> => {\n  if (!loaded) {\n    loaded = import(/* webpackChunkName: \"codemirror\" */ \"./codemirror\");\n  }\n  return loaded;\n};\n","import { loadCodeMirror } from \"../resources/codemirror.ondemand\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  UpdatingElement,\n  property,\n  customElement,\n  PropertyValues,\n} from \"lit-element\";\nimport { Editor } from \"codemirror\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends UpdatingElement {\n  public codemirror?: Editor;\n  @property() public mode?: string;\n  @property() public autofocus = false;\n  @property() public rtl = false;\n  @property() public error = false;\n  @property() private _value = \"\";\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.getValue() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    return this.shadowRoot!.querySelector(\"span.cm-comment\") ? true : false;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    this.codemirror.refresh();\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.setOption(\"mode\", this.mode);\n    }\n    if (changedProps.has(\"autofocus\")) {\n      this.codemirror.setOption(\"autofocus\", this.autofocus !== false);\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.setValue(this._value);\n    }\n    if (changedProps.has(\"rtl\")) {\n      this.codemirror.setOption(\"gutters\", this._calcGutters());\n      this._setScrollBarDirection();\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._load();\n  }\n\n  private async _load(): Promise<void> {\n    const loaded = await loadCodeMirror();\n\n    const codeMirror = loaded.codeMirror;\n\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n    shadowRoot!.innerHTML = `\n    <style>\n      ${loaded.codeMirrorCss}\n      .CodeMirror {\n        height: var(--code-mirror-height, auto);\n        direction: var(--code-mirror-direction, ltr);\n      }\n      .CodeMirror-scroll {\n        max-height: var(--code-mirror-max-height, --code-mirror-height);\n      }\n      .CodeMirror-gutters {\n        border-right: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        background-color: var(--paper-dialog-background-color, var(--primary-background-color));\n        transition: 0.2s ease border-right;\n      }\n      :host(.error-state) .CodeMirror-gutters {\n        border-color: var(--error-state-color, red);\n      }\n      .CodeMirror-focused .CodeMirror-gutters {\n        border-right: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n      }\n      .CodeMirror-linenumber {\n        color: var(--paper-dialog-color, var(--primary-text-color));\n      }\n      .rtl .CodeMirror-vscrollbar {\n        right: auto;\n        left: 0px;\n      }\n      .rtl-gutter {\n        width: 20px;\n      }\n    </style>`;\n\n    this.codemirror = codeMirror(shadowRoot, {\n      value: this._value,\n      lineNumbers: true,\n      tabSize: 2,\n      mode: this.mode,\n      autofocus: this.autofocus !== false,\n      viewportMargin: Infinity,\n      extraKeys: {\n        Tab: \"indentMore\",\n        \"Shift-Tab\": \"indentLess\",\n      },\n      gutters: this._calcGutters(),\n    });\n    this._setScrollBarDirection();\n    this.codemirror!.on(\"changes\", () => this._onChange());\n  }\n\n  private _onChange(): void {\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  private _calcGutters(): string[] {\n    return this.rtl ? [\"rtl-gutter\", \"CodeMirror-linenumbers\"] : [];\n  }\n\n  private _setScrollBarDirection(): void {\n    if (this.codemirror) {\n      this.codemirror.getWrapperElement().classList.toggle(\"rtl\", this.rtl);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import { LitElement, html, TemplateResult, CSSResult, css } from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { safeDump, safeLoad } from \"js-yaml\";\n\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\n\nimport { struct } from \"./common/structs/struct\";\nimport { Lovelace } from \"./types\";\n\nimport \"../../components/ha-icon\";\nimport { haStyle } from \"../../resources/styles\";\nimport \"../../components/ha-code-editor\";\n// This is not a duplicate import, one is for types, one is for element.\n// tslint:disable-next-line\nimport { HaCodeEditor } from \"../../components/ha-code-editor\";\nimport { HomeAssistant } from \"../../types\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\n\nconst lovelaceStruct = struct.interface({\n  title: \"string?\",\n  views: [\"object\"],\n  resources: struct.optional([\"object\"]),\n});\n\nclass LovelaceFullConfigEditor extends LitElement {\n  public hass!: HomeAssistant;\n  public lovelace?: Lovelace;\n  public closeEditor?: () => void;\n  private _saving?: boolean;\n  private _changed?: boolean;\n  private _generation = 1;\n\n  static get properties() {\n    return {\n      hass: {},\n      lovelace: {},\n      closeEditor: {},\n      _saving: {},\n      _changed: {},\n    };\n  }\n\n  public render(): TemplateResult | void {\n    return html`\n      <app-header-layout>\n        <app-header>\n          <app-toolbar>\n            <paper-icon-button\n              icon=\"hass:close\"\n              @click=\"${this._closeEditor}\"\n            ></paper-icon-button>\n            <div main-title>\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.header\"\n              )}\n            </div>\n            <div\n              class=\"save-button\n              ${classMap({\n                saved: this._saving! === false || this._changed === true,\n              })}\"\n            >\n              ${this._changed\n                ? this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.unsaved_changes\"\n                  )\n                : this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.saved\"\n                  )}\n            </div>\n            <mwc-button raised @click=\"${this._handleSave}\"\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.save\"\n              )}</mwc-button\n            >\n          </app-toolbar>\n        </app-header>\n        <div class=\"content\">\n          <ha-code-editor\n            mode=\"yaml\"\n            autofocus\n            .rtl=${computeRTL(this.hass)}\n            .hass=\"${this.hass}\"\n            @value-changed=\"${this._yamlChanged}\"\n            @editor-save=\"${this._handleSave}\"\n          >\n          </ha-code-editor>\n        </div>\n      </app-header-layout>\n    `;\n  }\n\n  protected firstUpdated() {\n    this.yamlEditor.value = safeDump(this.lovelace!.config);\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        :host {\n          --code-mirror-height: 100%;\n        }\n\n        app-header-layout {\n          height: 100vh;\n        }\n\n        app-toolbar {\n          background-color: var(--dark-background-color, #455a64);\n          color: var(--dark-text-color);\n        }\n\n        .comments {\n          font-size: 16px;\n        }\n\n        .content {\n          height: calc(100vh - 68px);\n        }\n\n        hui-code-editor {\n          height: 100%;\n        }\n\n        .save-button {\n          opacity: 0;\n          font-size: 14px;\n          padding: 0px 10px;\n        }\n\n        .saved {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n\n  private _yamlChanged() {\n    this._changed = !this.yamlEditor\n      .codemirror!.getDoc()\n      .isClean(this._generation);\n    if (this._changed && !window.onbeforeunload) {\n      window.onbeforeunload = () => {\n        return true;\n      };\n    } else if (!this._changed && window.onbeforeunload) {\n      window.onbeforeunload = null;\n    }\n  }\n\n  private _closeEditor() {\n    if (this._changed) {\n      if (\n        !confirm(\n          this.hass.localize(\n            \"ui.panel.lovelace.editor.raw_editor.confirm_unsaved_changes\"\n          )\n        )\n      ) {\n        return;\n      }\n    }\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _handleSave() {\n    this._saving = true;\n\n    if (this.yamlEditor.hasComments) {\n      if (\n        !confirm(\n          this.hass.localize(\n            \"ui.panel.lovelace.editor.raw_editor.confirm_unsaved_comments\"\n          )\n        )\n      ) {\n        return;\n      }\n    }\n\n    let value;\n    try {\n      value = safeLoad(this.yamlEditor.value);\n    } catch (err) {\n      alert(\n        this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_parse_yaml\",\n          \"error\",\n          err\n        )\n      );\n      this._saving = false;\n      return;\n    }\n    try {\n      value = lovelaceStruct(value);\n    } catch (err) {\n      alert(\n        this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_invalid_config\",\n          \"error\",\n          err\n        )\n      );\n      return;\n    }\n    try {\n      await this.lovelace!.saveConfig(value);\n    } catch (err) {\n      alert(\n        this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_save_yaml\",\n          \"error\",\n          err\n        )\n      );\n    }\n    this._generation = this.yamlEditor\n      .codemirror!.getDoc()\n      .changeGeneration(true);\n    window.onbeforeunload = null;\n    this._saving = false;\n    this._changed = false;\n  }\n\n  private get yamlEditor(): HaCodeEditor {\n    return this.shadowRoot!.querySelector(\"ha-code-editor\")! as HaCodeEditor;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-editor\": LovelaceFullConfigEditor;\n  }\n}\n\ncustomElements.define(\"hui-editor\", LovelaceFullConfigEditor);\n"],"sourceRoot":""}