{"version":3,"sources":["webpack:///./node_modules/@polymer/iron-checked-element-behavior/iron-checked-element-behavior.js","webpack:///./node_modules/@polymer/paper-behaviors/paper-checked-element-behavior.js","webpack:///./node_modules/google-timezones-json/index.js"],"names":["IronCheckedElementBehaviorImpl","properties","checked","type","Boolean","value","reflectToAttribute","notify","observer","toggles","String","observers","created","_hasIronCheckedElementBehavior","_getValidity","_value","disabled","required","_requiredChanged","setAttribute","removeAttribute","_checkedChanged","active","fire","_valueChanged","undefined","IronCheckedElementBehavior","IronFormElementBehavior","IronValidatableBehavior","PaperCheckedElementBehaviorImpl","call","hasRipple","_ripple","_buttonStateChanged","PaperRippleBehavior","isAttached","PaperCheckedElementBehavior","PaperInkyFocusBehavior","module","exports","require"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAUA;AAEA;AACA;AAEA;;;;;;;;;;AASO,IAAMA,8BAA8B,GAAG;AAE5CC,YAAU,EAAE;AACV;;;;;;AAMA;;;AAGAC,WAAO,EAAE;AACPC,UAAI,EAAEC,OADC;AAEPC,WAAK,EAAE,KAFA;AAGPC,wBAAkB,EAAE,IAHb;AAIPC,YAAM,EAAE,IAJD;AAKPC,cAAQ,EAAE;AALH,KAVC;;AAkBV;;;;AAIAC,WAAO,EAAE;AAACN,UAAI,EAAEC,OAAP;AAAgBC,WAAK,EAAE,IAAvB;AAA6BC,wBAAkB,EAAE;AAAjD,KAtBC;;AAwBV;AACAD,SAAK,EAAE;AAACF,UAAI,EAAEO,MAAP;AAAeL,WAAK,EAAE,IAAtB;AAA4BG,cAAQ,EAAE;AAAtC;AAzBG,GAFgC;AA8B5CG,WAAS,EAAE,CAAC,4BAAD,CA9BiC;AAgC5CC,SAAO,EAAE,mBAAW;AAClB;AACA;AACA;AACA,SAAKC,8BAAL,GAAsC,IAAtC;AACD,GArC2C;;AAuC5C;;;;;;AAMAC,cAAY,EAAE,sBAASC,MAAT,EAAiB;AAC7B,WAAO,KAAKC,QAAL,IAAiB,CAAC,KAAKC,QAAvB,IAAmC,KAAKf,OAA/C;AACD,GA/C2C;;AAiD5C;;;AAGAgB,kBAAgB,EAAE,4BAAW;AAC3B,QAAI,KAAKD,QAAT,EAAmB;AACjB,WAAKE,YAAL,CAAkB,eAAlB,EAAmC,MAAnC;AACD,KAFD,MAEO;AACL,WAAKC,eAAL,CAAqB,eAArB;AACD;AACF,GA1D2C;;AA4D5C;;;AAGAC,iBAAe,EAAE,2BAAW;AAC1B,SAAKC,MAAL,GAAc,KAAKpB,OAAnB;AACA,SAAKqB,IAAL,CAAU,aAAV;AACD,GAlE2C;;AAoE5C;;;AAGAC,eAAa,EAAE,yBAAW;AACxB,QAAI,KAAKnB,KAAL,KAAeoB,SAAf,IAA4B,KAAKpB,KAAL,KAAe,IAA/C,EAAqD;AACnD,WAAKA,KAAL,GAAa,IAAb;AACD;AACF;AA3E2C,CAAvC;AA8EP;;AACO,IAAMqB,0BAA0B,GAAG,CACxCC,yHADwC,EAExCC,uHAFwC,EAGxC5B,8BAHwC,CAAnC,C;;;;;;;;;;;;ACvGP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;AAUA;AAEA;AAEA;AACA;AAEA;;;;;;;AAMO,IAAM6B,+BAA+B,GAAG;AAC7C;;;AAGAR,iBAAe,EAAE,2BAAW;AAC1BrB,0IAA8B,CAACqB,eAA/B,CAA+CS,IAA/C,CAAoD,IAApD;;AACA,QAAI,KAAKC,SAAL,EAAJ,EAAsB;AACpB,UAAI,KAAK7B,OAAT,EAAkB;AAChB,aAAK8B,OAAL,CAAab,YAAb,CAA0B,SAA1B,EAAqC,EAArC;AACD,OAFD,MAEO;AACL,aAAKa,OAAL,CAAaZ,eAAb,CAA6B,SAA7B;AACD;AACF;AACF,GAb4C;;AAe7C;;;AAGAa,qBAAmB,EAAE,+BAAW;AAC9BC,iFAAmB,CAACD,mBAApB,CAAwCH,IAAxC,CAA6C,IAA7C;;AACA,QAAI,KAAKd,QAAT,EAAmB;AACjB;AACD;;AACD,QAAI,KAAKmB,UAAT,EAAqB;AACnB,WAAKjC,OAAL,GAAe,KAAKoB,MAApB;AACD;AACF;AA1B4C,CAAxC;AA6BP;;AACO,IAAMc,2BAA2B,GAAG,CACzCC,oFADyC,EAEzCX,kIAFyC,EAGzCG,+BAHyC,CAApC,C;;;;;;;;;;;ACrDPS,MAAM,CAACC,OAAP,GAAiBC,mBAAO,CAAC,6EAAD,CAAxB,C","file":"vendors~onboarding-core-config~panel-config-core.chunk.js","sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronFormElementBehavior} from '@polymer/iron-form-element-behavior/iron-form-element-behavior.js';\nimport {IronValidatableBehavior} from '@polymer/iron-validatable-behavior/iron-validatable-behavior.js';\n\n/**\n * Use `IronCheckedElementBehavior` to implement a custom element that has a\n * `checked` property, which can be used for validation if the element is also\n * `required`. Element instances implementing this behavior will also be\n * registered for use in an `iron-form` element.\n *\n * @demo demo/index.html\n * @polymerBehavior IronCheckedElementBehavior\n */\nexport const IronCheckedElementBehaviorImpl = {\n\n  properties: {\n    /**\n     * Fired when the checked state changes.\n     *\n     * @event iron-change\n     */\n\n    /**\n     * Gets or sets the state, `true` is checked and `false` is unchecked.\n     */\n    checked: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true,\n      notify: true,\n      observer: '_checkedChanged'\n    },\n\n    /**\n     * If true, the button toggles the active state with each tap or press\n     * of the spacebar.\n     */\n    toggles: {type: Boolean, value: true, reflectToAttribute: true},\n\n    /* Overriden from IronFormElementBehavior */\n    value: {type: String, value: 'on', observer: '_valueChanged'}\n  },\n\n  observers: ['_requiredChanged(required)'],\n\n  created: function() {\n    // Used by `iron-form` to handle the case that an element with this behavior\n    // doesn't have a role of 'checkbox' or 'radio', but should still only be\n    // included when the form is serialized if `this.checked === true`.\n    this._hasIronCheckedElementBehavior = true;\n  },\n\n  /**\n   * Returns false if the element is required and not checked, and true\n   * otherwise.\n   * @param {*=} _value Ignored.\n   * @return {boolean} true if `required` is false or if `checked` is true.\n   */\n  _getValidity: function(_value) {\n    return this.disabled || !this.required || this.checked;\n  },\n\n  /**\n   * Update the aria-required label when `required` is changed.\n   */\n  _requiredChanged: function() {\n    if (this.required) {\n      this.setAttribute('aria-required', 'true');\n    } else {\n      this.removeAttribute('aria-required');\n    }\n  },\n\n  /**\n   * Fire `iron-changed` when the checked state changes.\n   */\n  _checkedChanged: function() {\n    this.active = this.checked;\n    this.fire('iron-change');\n  },\n\n  /**\n   * Reset value to 'on' if it is set to `undefined`.\n   */\n  _valueChanged: function() {\n    if (this.value === undefined || this.value === null) {\n      this.value = 'on';\n    }\n  }\n};\n\n/** @polymerBehavior */\nexport const IronCheckedElementBehavior = [\n  IronFormElementBehavior,\n  IronValidatableBehavior,\n  IronCheckedElementBehaviorImpl\n];\n","/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {IronCheckedElementBehavior, IronCheckedElementBehaviorImpl} from '@polymer/iron-checked-element-behavior/iron-checked-element-behavior.js';\n\nimport {PaperInkyFocusBehavior} from './paper-inky-focus-behavior.js';\nimport {PaperRippleBehavior} from './paper-ripple-behavior.js';\n\n/**\n * Use `PaperCheckedElementBehavior` to implement a custom element that has a\n * `checked` property similar to `IronCheckedElementBehavior` and is compatible\n * with having a ripple effect.\n * @polymerBehavior PaperCheckedElementBehavior\n */\nexport const PaperCheckedElementBehaviorImpl = {\n  /**\n   * Synchronizes the element's checked state with its ripple effect.\n   */\n  _checkedChanged: function() {\n    IronCheckedElementBehaviorImpl._checkedChanged.call(this);\n    if (this.hasRipple()) {\n      if (this.checked) {\n        this._ripple.setAttribute('checked', '');\n      } else {\n        this._ripple.removeAttribute('checked');\n      }\n    }\n  },\n\n  /**\n   * Synchronizes the element's `active` and `checked` state.\n   */\n  _buttonStateChanged: function() {\n    PaperRippleBehavior._buttonStateChanged.call(this);\n    if (this.disabled) {\n      return;\n    }\n    if (this.isAttached) {\n      this.checked = this.active;\n    }\n  }\n};\n\n/** @polymerBehavior */\nexport const PaperCheckedElementBehavior = [\n  PaperInkyFocusBehavior,\n  IronCheckedElementBehavior,\n  PaperCheckedElementBehaviorImpl\n];\n","module.exports = require('./timezones.json');"],"sourceRoot":""}