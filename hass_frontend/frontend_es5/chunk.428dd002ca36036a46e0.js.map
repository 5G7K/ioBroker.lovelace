{"version":3,"sources":["webpack:///./src/components/ha-fab.ts","webpack:///./src/common/search/search-input.ts","webpack:///./mdc-data-table/constants.ts","webpack:///./mdc-data-table/foundation.ts","webpack:///./src/components/ha-checkbox.ts","webpack:///./src/components/ha-data-table.ts","webpack:///./src/panels/lovelace/common/compute-unused-entities.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts","webpack:///./src/panels/lovelace/editor/select-view/show-select-view-dialog.ts"],"names":["_super","HaFab","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","render","classes","mdc-fab--mini","this","mini","mdc-fab--exited","exited","mdc-fab--extended","extended","showLabel","label","Object","_material_mwc_base_base_element__WEBPACK_IMPORTED_MODULE_1__","templateObject_2","_material_mwc_ripple_ripple_directive_js__WEBPACK_IMPORTED_MODULE_2__","disabled","icon","showIconAtEnd","templateObject_1","customElements","get","SearchInput","lit_html__WEBPACK_IMPORTED_MODULE_1__","filter","_filterInputChanged","_clearSearch","_filterChanged","value","_dom_fire_event__WEBPACK_IMPORTED_MODULE_3__","String","e","target","defineProperty","lit_element__WEBPACK_IMPORTED_MODULE_2__","templateObject_3","cssClasses","strings","foundation_MDCDataTableFoundation","MDCDataTableFoundation","adapter","call","tslib_es6","defaultAdapter","addClassAtRowIndex","getRowCount","getRowElements","getRowIdAtIndex","getRowIndexByChildElement","getSelectedRowCount","isCheckboxAtRowIndexChecked","isHeaderRowCheckboxChecked","isRowsSelectable","notifyRowSelectionChanged","notifySelectedAll","notifyUnselectedAll","registerHeaderRowCheckbox","registerRowCheckboxes","removeClassAtRowIndex","setAttributeAtRowIndex","setHeaderRowCheckboxChecked","setHeaderRowCheckboxIndeterminate","setRowCheckboxCheckedAtIndex","layout","adapter_","setHeaderRowCheckboxState_","layoutAsync","_a","sent","getRows","setSelectedRowIds","rowIds","rowIndex","rowId","isSelected","indexOf","selectRowAtIndex_","getSelectedRowIds","selectedRowIds","push","handleHeaderRowCheckboxChange","isHeaderChecked","handleRowCheckboxChange","event","selected","foundation","HaCheckbox","firstUpdated","style","setProperty","mwc_checkbox_css","lit_element","HaDataTable","_this","apply","arguments","columns","data","selectable","id","mdcFoundationClass","_filterable","_headerChecked","_headerIndeterminate","_checkedRows","_filter","_sortDirection","_filterSortData","memoize_one_esm","direction","sortColumn","_memSortData","_memFilterData","ucFilter","toUpperCase","row","entries","some","columnEntry","key","column","filterable","filterKey","includes","sorted","slice","sort","a","b","valA","valB","updated","properties","has","columnId","values","_sortColumn","base_element","templateObject_8","ha_data_table_templateObject_1","_handleSearchChange","_handleHeaderRowCheckboxChange","map","mdc-data-table__cell--numeric","Boolean","type","sortable","not-sorted","templateObject_4","_handleHeaderClick","title","repeat","templateObject_7","_handleRowClick","templateObject_5","_handleRowCheckboxChange","templateObject_6","template","createAdapter","rowElements","classList","add","length","_getRowIdAtIndex","el","Array","closest","remove","attr","setAttribute","checked","indeterminate","_setRowChecked","getAttribute","ev","undefined","fire_event","_headerCheckbox","mdcFoundation","checkbox","bubbles","concat","index","splice","detail","templateObject_9","EXCLUDED_DOMAINS","addFromAction","entities","actionConfig","action","service_data","entity_id","entityIds","isArray","_i","entityIds_1","entityId","addEntityId","entity","camera_image","tap_action","hold_action","addEntities","obj","forEach","card","cards","elements","badges","badge","computeUnusedEntities","hass","config","usedEntities","Set","views","view","computeUsedEntities","keys","states","split","hui_unused_entities_HuiUnusedEntities","HuiUnusedEntities","_unusedEntities","_selectedEntities","_columns","narrow","stateObj","hui_unused_entities_templateObject_1","_handleEntityClicked","friendly_name","domain","last_changed","lastChanged","hui_unused_entities_templateObject_2","lovelace","changedProperties","_getUnusedEntities","mode","editMode","hui_unused_entities_templateObject_4","hui_unused_entities_templateObject_7","hui_unused_entities_templateObject_5","compute_state_name","compute_domain","_handleSelectionChanged","hui_unused_entities_templateObject_6","class_map","rtl","compute_rtl","localize","_selectView","hui_unused_entities_templateObject_3","_config","changedSelection","element","selectViewDialogParams","viewSelectedCallback","_addCard","dialogTag","dialogImport","__webpack_require__","then","bind","dialogParams","show_edit_card_dialog","path","hui_unused_entities_templateObject_8"],"mappings":"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","file":"chunk.428dd002ca36036a46e0.js","sourcesContent":["import {\n  classMap,\n  html,\n  customElement,\n  Constructor,\n} from \"@material/mwc-base/base-element\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive.js\";\n\nimport \"@material/mwc-fab\";\n// tslint:disable-next-line\nimport { Fab } from \"@material/mwc-fab\";\n// tslint:disable-next-line\nconst MwcFab = customElements.get(\"mwc-fab\") as Constructor<Fab>;\n\n@customElement(\"ha-fab\")\nexport class HaFab extends MwcFab {\n  // We override the render method because we don't have an icon font and mwc-fab doesn't support our svg-icon sets.\n  // Based on version mwc-fab 0.8\n  protected render() {\n    const classes = {\n      \"mdc-fab--mini\": this.mini,\n      \"mdc-fab--exited\": this.exited,\n      \"mdc-fab--extended\": this.extended,\n    };\n    const showLabel = this.label !== \"\" && this.extended;\n    return html`\n      <button\n        .ripple=\"${ripple()}\"\n        class=\"mdc-fab ${classMap(classes)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-label=\"${this.label || this.icon}\"\n      >\n        ${showLabel && this.showIconAtEnd ? this.label : \"\"}\n        ${this.icon\n          ? html`\n              <ha-icon .icon=${this.icon}></ha-icon>\n            `\n          : \"\"}\n        ${showLabel && !this.showIconAtEnd ? this.label : \"\"}\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { TemplateResult, html } from \"lit-html\";\nimport {\n  css,\n  CSSResult,\n  customElement,\n  LitElement,\n  property,\n} from \"lit-element\";\nimport { fireEvent } from \"../dom/fire_event\";\nimport \"@polymer/iron-icon/iron-icon\";\nimport \"@polymer/paper-input/paper-input\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@material/mwc-button\";\n\n@customElement(\"search-input\")\nclass SearchInput extends LitElement {\n  @property() private filter?: string;\n\n  protected render(): TemplateResult | void {\n    return html`\n      <div class=\"search-container\">\n        <paper-input\n          autofocus\n          label=\"Search\"\n          .value=${this.filter}\n          @value-changed=${this._filterInputChanged}\n        >\n          <iron-icon\n            icon=\"hass:magnify\"\n            slot=\"prefix\"\n            class=\"prefix\"\n          ></iron-icon>\n          ${this.filter &&\n            html`\n              <paper-icon-button\n                slot=\"suffix\"\n                class=\"suffix\"\n                @click=${this._clearSearch}\n                icon=\"hass:close\"\n                alt=\"Clear\"\n                title=\"Clear\"\n              ></paper-icon-button>\n            `}\n        </paper-input>\n      </div>\n    `;\n  }\n\n  private async _filterChanged(value: string) {\n    fireEvent(this, \"value-changed\", { value: String(value) });\n  }\n\n  private async _filterInputChanged(e) {\n    this._filterChanged(e.target.value);\n  }\n\n  private async _clearSearch() {\n    this._filterChanged(\"\");\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      paper-input {\n        flex: 1 1 auto;\n        margin: 0 16px;\n      }\n      .search-container {\n        display: inline-flex;\n        width: 100%;\n        align-items: center;\n      }\n      .prefix {\n        margin: 8px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"search-input\": SearchInput;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nexport const cssClasses = {\n  CELL: \"mdc-data-table__cell\",\n  CELL_NUMERIC: \"mdc-data-table__cell--numeric\",\n  CONTENT: \"mdc-data-table__content\",\n  HEADER_ROW: \"mdc-data-table__header-row\",\n  HEADER_ROW_CHECKBOX: \"mdc-data-table__header-row-checkbox\",\n  ROOT: \"mdc-data-table\",\n  ROW: \"mdc-data-table__row\",\n  ROW_CHECKBOX: \"mdc-data-table__row-checkbox\",\n  ROW_SELECTED: \"mdc-data-table__row--selected\",\n};\n\nexport const strings = {\n  ARIA_SELECTED: \"aria-selected\",\n  DATA_ROW_ID_ATTR: \"data-row-id\",\n  HEADER_ROW_CHECKBOX_SELECTOR: `.${cssClasses.HEADER_ROW_CHECKBOX}`,\n  ROW_CHECKBOX_SELECTOR: `.${cssClasses.ROW_CHECKBOX}`,\n  ROW_SELECTED_SELECTOR: `.${cssClasses.ROW_SELECTED}`,\n  ROW_SELECTOR: `.${cssClasses.ROW}`,\n};\n\nexport const events = {\n  ROW_SELECTION_CHANGED: \"MDCDataTable:rowSelectionChanged\",\n  SELECTED_ALL: \"MDCDataTable:selectedAll\",\n  UNSELECTED_ALL: \"MDCDataTable:unselectedAll\",\n};\n","/**\n * @license\n * Copyright 2019 Google Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\n\nimport { MDCFoundation } from \"@material/base/foundation\";\nimport { MDCDataTableAdapter } from \"./adapter\";\nimport { cssClasses, strings } from \"./constants\";\n\nexport class MDCDataTableFoundation extends MDCFoundation<MDCDataTableAdapter> {\n  static get defaultAdapter(): MDCDataTableAdapter {\n    return {\n      addClassAtRowIndex: () => undefined,\n      getRowCount: () => 0,\n      getRowElements: () => [],\n      getRowIdAtIndex: () => \"\",\n      getRowIndexByChildElement: () => 0,\n      getSelectedRowCount: () => 0,\n      isCheckboxAtRowIndexChecked: () => false,\n      isHeaderRowCheckboxChecked: () => false,\n      isRowsSelectable: () => false,\n      notifyRowSelectionChanged: () => undefined,\n      notifySelectedAll: () => undefined,\n      notifyUnselectedAll: () => undefined,\n      registerHeaderRowCheckbox: () => undefined,\n      registerRowCheckboxes: () => undefined,\n      removeClassAtRowIndex: () => undefined,\n      setAttributeAtRowIndex: () => undefined,\n      setHeaderRowCheckboxChecked: () => undefined,\n      setHeaderRowCheckboxIndeterminate: () => undefined,\n      setRowCheckboxCheckedAtIndex: () => undefined,\n    };\n  }\n\n  constructor(adapter?: Partial<MDCDataTableAdapter>) {\n    super({ ...MDCDataTableFoundation.defaultAdapter, ...adapter });\n  }\n\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is synchronous.\n   */\n  layout() {\n    if (this.adapter_.isRowsSelectable()) {\n      this.adapter_.registerHeaderRowCheckbox();\n      this.adapter_.registerRowCheckboxes();\n\n      this.setHeaderRowCheckboxState_();\n    }\n  }\n\n  /**\n   * Re-initializes header row checkbox and row checkboxes when selectable rows are added or removed from table.\n   * Use this if registering checkbox is asynchronous.\n   */\n  async layoutAsync(): Promise<void> {\n    if (this.adapter_.isRowsSelectable()) {\n      await this.adapter_.registerHeaderRowCheckbox();\n      await this.adapter_.registerRowCheckboxes();\n\n      this.setHeaderRowCheckboxState_();\n    }\n  }\n\n  /**\n   * @return Returns array of row elements.\n   */\n  getRows(): Element[] {\n    return this.adapter_.getRowElements();\n  }\n\n  /**\n   * Sets selected row ids. Overwrites previously selected rows.\n   * @param rowIds Array of row ids that needs to be selected.\n   */\n  setSelectedRowIds(rowIds: string[]) {\n    for (let rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      const rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n\n      let isSelected = false;\n      if (rowId && rowIds.indexOf(rowId) >= 0) {\n        isSelected = true;\n      }\n\n      this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isSelected);\n      this.selectRowAtIndex_(rowIndex, isSelected);\n    }\n\n    this.setHeaderRowCheckboxState_();\n  }\n\n  /**\n   * @return Returns array of selected row ids.\n   */\n  getSelectedRowIds(): Array<string | null> {\n    const selectedRowIds: Array<string | null> = [];\n    for (let rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      if (this.adapter_.isCheckboxAtRowIndexChecked(rowIndex)) {\n        selectedRowIds.push(this.adapter_.getRowIdAtIndex(rowIndex));\n      }\n    }\n\n    return selectedRowIds;\n  }\n\n  /**\n   * Handles header row checkbox change event.\n   */\n  handleHeaderRowCheckboxChange() {\n    const isHeaderChecked = this.adapter_.isHeaderRowCheckboxChecked();\n\n    for (let rowIndex = 0; rowIndex < this.adapter_.getRowCount(); rowIndex++) {\n      this.adapter_.setRowCheckboxCheckedAtIndex(rowIndex, isHeaderChecked);\n      this.selectRowAtIndex_(rowIndex, isHeaderChecked);\n    }\n\n    if (isHeaderChecked) {\n      this.adapter_.notifySelectedAll();\n    } else {\n      this.adapter_.notifyUnselectedAll();\n    }\n  }\n\n  /**\n   * Handles change event originated from row checkboxes.\n   */\n  handleRowCheckboxChange(event: Event) {\n    const rowIndex = this.adapter_.getRowIndexByChildElement(\n      event.target as HTMLInputElement\n    );\n\n    if (rowIndex === -1) {\n      return;\n    }\n\n    const selected = this.adapter_.isCheckboxAtRowIndexChecked(rowIndex);\n\n    this.selectRowAtIndex_(rowIndex, selected);\n    this.setHeaderRowCheckboxState_();\n\n    const rowId = this.adapter_.getRowIdAtIndex(rowIndex);\n    this.adapter_.notifyRowSelectionChanged({ rowId, rowIndex, selected });\n  }\n\n  /**\n   * Updates header row checkbox state based on number of rows selected.\n   */\n  private setHeaderRowCheckboxState_() {\n    if (this.adapter_.getSelectedRowCount() === this.adapter_.getRowCount()) {\n      this.adapter_.setHeaderRowCheckboxChecked(true);\n      this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n    } else if (this.adapter_.getSelectedRowCount() === 0) {\n      this.adapter_.setHeaderRowCheckboxIndeterminate(false);\n      this.adapter_.setHeaderRowCheckboxChecked(false);\n    } else {\n      this.adapter_.setHeaderRowCheckboxIndeterminate(true);\n      this.adapter_.setHeaderRowCheckboxChecked(false);\n    }\n  }\n\n  /**\n   * Sets the attributes of row element based on selection state.\n   */\n  private selectRowAtIndex_(rowIndex: number, selected: boolean) {\n    if (selected) {\n      this.adapter_.addClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter_.setAttributeAtRowIndex(\n        rowIndex,\n        strings.ARIA_SELECTED,\n        \"true\"\n      );\n    } else {\n      this.adapter_.removeClassAtRowIndex(rowIndex, cssClasses.ROW_SELECTED);\n      this.adapter_.setAttributeAtRowIndex(\n        rowIndex,\n        strings.ARIA_SELECTED,\n        \"false\"\n      );\n    }\n  }\n}\n","import { Constructor, customElement, CSSResult, css } from \"lit-element\";\nimport \"@material/mwc-checkbox\";\n// tslint:disable-next-line\nimport { Checkbox } from \"@material/mwc-checkbox\";\nimport { style } from \"@material/mwc-checkbox/mwc-checkbox-css\";\n// tslint:disable-next-line\nconst MwcCheckbox = customElements.get(\"mwc-checkbox\") as Constructor<Checkbox>;\n\n@customElement(\"ha-checkbox\")\nexport class HaCheckbox extends MwcCheckbox {\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\"--mdc-theme-secondary\", \"var(--primary-color)\");\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        .mdc-checkbox__native-control:enabled:not(:checked):not(:indeterminate)\n          ~ .mdc-checkbox__background {\n          border-color: rgba(var(--rgb-primary-text-color), 0.54);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-checkbox\": HaCheckbox;\n  }\n}\n","import { repeat } from \"lit-html/directives/repeat\";\n\nimport {\n  MDCDataTableAdapter,\n  MDCDataTableFoundation,\n} from \"../../mdc-data-table/index\"; // Because mdc-data-table published ts files, temporary load them from own repo, outside src so our linters won't complain\n\nimport {\n  BaseElement,\n  html,\n  query,\n  queryAll,\n  CSSResult,\n  css,\n  customElement,\n  property,\n  classMap,\n  TemplateResult,\n  PropertyValues,\n} from \"@material/mwc-base/base-element\";\n\nimport memoizeOne from \"memoize-one\";\n\nimport \"./ha-icon\";\nimport \"../common/search/search-input\";\nimport \"./ha-checkbox\";\n// tslint:disable-next-line\nimport { HaCheckbox } from \"./ha-checkbox\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\ndeclare global {\n  // for fire event\n  interface HASSDomEvents {\n    \"selection-changed\": SelectionChangedEvent;\n    \"row-click\": RowClickedEvent;\n    \"sorting-changed\": SortingChangedEvent;\n  }\n}\n\nexport interface RowClickedEvent {\n  id: string;\n}\n\nexport interface SelectionChangedEvent {\n  id: string;\n  selected: boolean;\n}\n\nexport interface SortingChangedEvent {\n  column: string;\n  direction: SortingDirection;\n}\n\nexport type SortingDirection = \"desc\" | \"asc\" | null;\n\nexport interface DataTabelColumnContainer {\n  [key: string]: DataTabelColumnData;\n}\n\nexport interface DataTabelColumnData {\n  title: string;\n  type?: \"numeric\";\n  sortable?: boolean;\n  filterable?: boolean;\n  filterKey?: string;\n  direction?: SortingDirection;\n  template?: (data: any) => TemplateResult;\n}\n\nexport interface DataTabelRowData {\n  [key: string]: any;\n}\n\n@customElement(\"ha-data-table\")\nexport class HaDataTable extends BaseElement {\n  @property({ type: Object }) public columns: DataTabelColumnContainer = {};\n  @property({ type: Array }) public data: DataTabelRowData[] = [];\n  @property({ type: Boolean }) public selectable = false;\n  @property({ type: String }) public id = \"id\";\n  protected mdcFoundation!: MDCDataTableFoundation;\n  protected readonly mdcFoundationClass = MDCDataTableFoundation;\n  @query(\".mdc-data-table\") protected mdcRoot!: HTMLElement;\n  @queryAll(\".mdc-data-table__row\") protected rowElements!: HTMLElement[];\n  @query(\"#header-checkbox\") private _headerCheckbox!: HaCheckbox;\n  @property({ type: Boolean }) private _filterable = false;\n  @property({ type: Boolean }) private _headerChecked = false;\n  @property({ type: Boolean }) private _headerIndeterminate = false;\n  @property({ type: Array }) private _checkedRows: string[] = [];\n  @property({ type: String }) private _filter = \"\";\n  @property({ type: String }) private _sortColumn?: string;\n  @property({ type: String }) private _sortDirection: SortingDirection = null;\n\n  private _filterSortData = memoizeOne(\n    (\n      data: DataTabelRowData[],\n      columns: DataTabelColumnContainer,\n      filter: string,\n      direction: SortingDirection,\n      sortColumn?: string\n    ) =>\n      sortColumn\n        ? this._memSortData(\n            this._memFilterData(data, columns, filter),\n            columns,\n            direction,\n            sortColumn\n          )\n        : this._memFilterData(data, columns, filter)\n  );\n\n  private _memFilterData = memoizeOne(\n    (\n      data: DataTabelRowData[],\n      columns: DataTabelColumnContainer,\n      filter: string\n    ) => {\n      if (!filter) {\n        return data;\n      }\n      const ucFilter = filter.toUpperCase();\n      return data.filter((row) => {\n        return Object.entries(columns).some((columnEntry) => {\n          const [key, column] = columnEntry;\n          if (column.filterable) {\n            if (\n              (column.filterKey ? row[key][column.filterKey] : row[key])\n                .toUpperCase()\n                .includes(ucFilter)\n            ) {\n              return true;\n            }\n          }\n          return false;\n        });\n      });\n    }\n  );\n\n  private _memSortData = memoizeOne(\n    (\n      data: DataTabelRowData[],\n      columns: DataTabelColumnContainer,\n      direction: SortingDirection,\n      sortColumn: string\n    ) => {\n      const sorted = [...data];\n      const column = columns[sortColumn];\n      return sorted.sort((a, b) => {\n        let sort = 1;\n        if (direction === \"desc\") {\n          sort = -1;\n        }\n\n        let valA = column.filterKey\n          ? a[sortColumn][column.filterKey]\n          : a[sortColumn];\n\n        let valB = column.filterKey\n          ? b[sortColumn][column.filterKey]\n          : b[sortColumn];\n\n        if (typeof valA === \"string\") {\n          valA = valA.toUpperCase();\n        }\n        if (typeof valB === \"string\") {\n          valB = valB.toUpperCase();\n        }\n\n        if (valA < valB) {\n          return sort * -1;\n        }\n        if (valA > valB) {\n          return sort * 1;\n        }\n        return 0;\n      });\n    }\n  );\n\n  protected updated(properties: PropertyValues) {\n    super.updated(properties);\n\n    if (properties.has(\"columns\")) {\n      this._filterable = Object.values(this.columns).some(\n        (column) => column.filterable\n      );\n\n      for (const columnId in this.columns) {\n        if (this.columns[columnId].direction) {\n          this._sortDirection = this.columns[columnId].direction!;\n          this._sortColumn = columnId;\n          break;\n        }\n      }\n    }\n  }\n\n  protected render() {\n    return html`\n      ${this._filterable\n        ? html`\n            <search-input\n              @value-changed=${this._handleSearchChange}\n            ></search-input>\n          `\n        : \"\"}\n      <div class=\"mdc-data-table\">\n        <table class=\"mdc-data-table__table\">\n          <thead>\n            <tr class=\"mdc-data-table__header-row\">\n              ${this.selectable\n                ? html`\n                    <th\n                      class=\"mdc-data-table__header-cell mdc-data-table__header-cell--checkbox\"\n                      role=\"columnheader\"\n                      scope=\"col\"\n                    >\n                      <ha-checkbox\n                        id=\"header-checkbox\"\n                        class=\"mdc-data-table__row-checkbox\"\n                        @change=${this._handleHeaderRowCheckboxChange}\n                        .indeterminate=${this._headerIndeterminate}\n                        .checked=${this._headerChecked}\n                      >\n                      </ha-checkbox>\n                    </th>\n                  `\n                : \"\"}\n              ${Object.entries(this.columns).map((columnEntry) => {\n                const [key, column] = columnEntry;\n                const sorted = key === this._sortColumn;\n                const classes = {\n                  \"mdc-data-table__cell--numeric\": Boolean(\n                    column.type && column.type === \"numeric\"\n                  ),\n                  sortable: Boolean(column.sortable),\n                  \"not-sorted\": Boolean(column.sortable && !sorted),\n                };\n                return html`\n                  <th\n                    class=\"mdc-data-table__header-cell ${classMap(classes)}\"\n                    role=\"columnheader\"\n                    scope=\"col\"\n                    @click=${this._handleHeaderClick}\n                    data-column-id=\"${key}\"\n                  >\n                    ${column.sortable\n                      ? html`\n                          <ha-icon\n                            .icon=${sorted && this._sortDirection === \"desc\"\n                              ? \"hass:arrow-down\"\n                              : \"hass:arrow-up\"}\n                          ></ha-icon>\n                        `\n                      : \"\"}\n                    <span>${column.title}</span>\n                  </th>\n                `;\n              })}\n            </tr>\n          </thead>\n          <tbody class=\"mdc-data-table__content\">\n            ${repeat(\n              this._filterSortData(\n                this.data,\n                this.columns,\n                this._filter,\n                this._sortDirection,\n                this._sortColumn\n              ),\n              (row: DataTabelRowData) => row[this.id],\n              (row: DataTabelRowData) => html`\n                <tr\n                  data-row-id=\"${row[this.id]}\"\n                  @click=${this._handleRowClick}\n                  class=\"mdc-data-table__row\"\n                >\n                  ${this.selectable\n                    ? html`\n                        <td\n                          class=\"mdc-data-table__cell mdc-data-table__cell--checkbox\"\n                        >\n                          <ha-checkbox\n                            class=\"mdc-data-table__row-checkbox\"\n                            @change=${this._handleRowCheckboxChange}\n                            .checked=${this._checkedRows.includes(row[this.id])}\n                          >\n                          </ha-checkbox>\n                        </td>\n                      `\n                    : \"\"}\n                  ${Object.entries(this.columns).map((columnEntry) => {\n                    const [key, column] = columnEntry;\n                    return html`\n                      <td\n                        class=\"mdc-data-table__cell ${classMap({\n                          \"mdc-data-table__cell--numeric\": Boolean(\n                            column.type && column.type === \"numeric\"\n                          ),\n                        })}\"\n                      >\n                        ${column.template\n                          ? column.template(row[key])\n                          : row[key]}\n                      </td>\n                    `;\n                  })}\n                </tr>\n              `\n            )}\n          </tbody>\n        </table>\n      </div>\n    `;\n  }\n\n  protected createAdapter(): MDCDataTableAdapter {\n    return {\n      addClassAtRowIndex: (rowIndex: number, cssClasses: string) => {\n        this.rowElements[rowIndex].classList.add(cssClasses);\n      },\n      getRowCount: () => this.data.length,\n      getRowElements: () => this.rowElements,\n      getRowIdAtIndex: (rowIndex: number) => this._getRowIdAtIndex(rowIndex),\n      getRowIndexByChildElement: (el: Element) =>\n        Array.prototype.indexOf.call(this.rowElements, el.closest(\"tr\")),\n      getSelectedRowCount: () => this._checkedRows.length,\n      isCheckboxAtRowIndexChecked: (rowIndex: number) =>\n        this._checkedRows.includes(this._getRowIdAtIndex(rowIndex)),\n      isHeaderRowCheckboxChecked: () => this._headerChecked,\n      isRowsSelectable: () => true,\n      notifyRowSelectionChanged: () => undefined,\n      notifySelectedAll: () => undefined,\n      notifyUnselectedAll: () => undefined,\n      registerHeaderRowCheckbox: () => undefined,\n      registerRowCheckboxes: () => undefined,\n      removeClassAtRowIndex: (rowIndex: number, cssClasses: string) => {\n        this.rowElements[rowIndex].classList.remove(cssClasses);\n      },\n      setAttributeAtRowIndex: (\n        rowIndex: number,\n        attr: string,\n        value: string\n      ) => {\n        this.rowElements[rowIndex].setAttribute(attr, value);\n      },\n      setHeaderRowCheckboxChecked: (checked: boolean) => {\n        this._headerChecked = checked;\n      },\n      setHeaderRowCheckboxIndeterminate: (indeterminate: boolean) => {\n        this._headerIndeterminate = indeterminate;\n      },\n      setRowCheckboxCheckedAtIndex: (rowIndex: number, checked: boolean) => {\n        this._setRowChecked(this._getRowIdAtIndex(rowIndex), checked);\n      },\n    };\n  }\n\n  private _getRowIdAtIndex(rowIndex: number): string {\n    return this.rowElements[rowIndex].getAttribute(\"data-row-id\")!;\n  }\n\n  private _handleHeaderClick(ev: Event) {\n    const columnId = (ev.target as HTMLElement)\n      .closest(\"th\")!\n      .getAttribute(\"data-column-id\")!;\n    if (!this.columns[columnId].sortable) {\n      return;\n    }\n    if (!this._sortDirection || this._sortColumn !== columnId) {\n      this._sortDirection = \"asc\";\n    } else if (this._sortDirection === \"asc\") {\n      this._sortDirection = \"desc\";\n    } else {\n      this._sortDirection = null;\n    }\n\n    this._sortColumn = this._sortDirection === null ? undefined : columnId;\n\n    fireEvent(this, \"sorting-changed\", {\n      column: columnId,\n      direction: this._sortDirection,\n    });\n  }\n\n  private _handleHeaderRowCheckboxChange() {\n    this._headerChecked = this._headerCheckbox.checked;\n    this._headerIndeterminate = this._headerCheckbox.indeterminate;\n    this.mdcFoundation.handleHeaderRowCheckboxChange();\n  }\n\n  private _handleRowCheckboxChange(ev: Event) {\n    const checkbox = ev.target as HaCheckbox;\n    const rowId = checkbox.closest(\"tr\")!.getAttribute(\"data-row-id\");\n\n    this._setRowChecked(rowId!, checkbox.checked);\n    this.mdcFoundation.handleRowCheckboxChange(ev);\n  }\n\n  private _handleRowClick(ev: Event) {\n    const rowId = (ev.target as HTMLElement)\n      .closest(\"tr\")!\n      .getAttribute(\"data-row-id\")!;\n    fireEvent(this, \"row-click\", { id: rowId }, { bubbles: false });\n  }\n\n  private _setRowChecked(rowId: string, checked: boolean) {\n    if (checked && !this._checkedRows.includes(rowId)) {\n      this._checkedRows = [...this._checkedRows, rowId];\n    } else if (!checked) {\n      const index = this._checkedRows.indexOf(rowId);\n      if (index !== -1) {\n        this._checkedRows.splice(index, 1);\n      }\n    }\n    fireEvent(this, \"selection-changed\", {\n      id: rowId,\n      selected: checked,\n    });\n  }\n\n  private _handleSearchChange(ev: CustomEvent): void {\n    this._filter = ev.detail.value;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      /* default mdc styles, colors changed, without checkbox styles */\n\n      .mdc-data-table__content {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        font-weight: 400;\n        letter-spacing: 0.0178571429em;\n        text-decoration: inherit;\n        text-transform: inherit;\n      }\n\n      .mdc-data-table {\n        background-color: var(--card-background-color);\n        border-radius: 4px;\n        border-width: 1px;\n        border-style: solid;\n        border-color: rgba(var(--rgb-primary-text-color), 0.12);\n        display: inline-flex;\n        flex-direction: column;\n        box-sizing: border-box;\n        overflow-x: auto;\n      }\n\n      .mdc-data-table__row--selected {\n        background-color: rgba(var(--rgb-primary-color), 0.04);\n      }\n\n      .mdc-data-table__row {\n        border-top-color: rgba(var(--rgb-primary-text-color), 0.12);\n      }\n\n      .mdc-data-table__row {\n        border-top-width: 1px;\n        border-top-style: solid;\n      }\n\n      .mdc-data-table__row:not(.mdc-data-table__row--selected):hover {\n        background-color: rgba(var(--rgb-primary-text-color), 0.04);\n      }\n\n      .mdc-data-table__header-cell {\n        color: var(--primary-text-color);\n      }\n\n      .mdc-data-table__cell {\n        color: var(--primary-text-color);\n      }\n\n      .mdc-data-table__header-row {\n        height: 56px;\n      }\n\n      .mdc-data-table__row {\n        height: 52px;\n      }\n\n      .mdc-data-table__cell,\n      .mdc-data-table__header-cell {\n        padding-right: 16px;\n        padding-left: 16px;\n      }\n\n      .mdc-data-table__header-cell--checkbox,\n      .mdc-data-table__cell--checkbox {\n        /* @noflip */\n        padding-left: 16px;\n        /* @noflip */\n        padding-right: 0;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell--checkbox,\n      .mdc-data-table__header-cell--checkbox[dir=\"rtl\"],\n      [dir=\"rtl\"] .mdc-data-table__cell--checkbox,\n      .mdc-data-table__cell--checkbox[dir=\"rtl\"] {\n        /* @noflip */\n        padding-left: 0;\n        /* @noflip */\n        padding-right: 16px;\n      }\n\n      .mdc-data-table__table {\n        width: 100%;\n        border: 0;\n        white-space: nowrap;\n        border-collapse: collapse;\n      }\n\n      .mdc-data-table__cell {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.25rem;\n        font-weight: 400;\n        letter-spacing: 0.0178571429em;\n        text-decoration: inherit;\n        text-transform: inherit;\n      }\n\n      .mdc-data-table__cell--numeric {\n        text-align: right;\n      }\n      [dir=\"rtl\"] .mdc-data-table__cell--numeric,\n      .mdc-data-table__cell--numeric[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: left;\n      }\n\n      .mdc-data-table__header-cell {\n        font-family: Roboto, sans-serif;\n        -moz-osx-font-smoothing: grayscale;\n        -webkit-font-smoothing: antialiased;\n        font-size: 0.875rem;\n        line-height: 1.375rem;\n        font-weight: 500;\n        letter-spacing: 0.0071428571em;\n        text-decoration: inherit;\n        text-transform: inherit;\n        text-align: left;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell,\n      .mdc-data-table__header-cell[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: right;\n      }\n\n      .mdc-data-table__header-cell--numeric {\n        text-align: right;\n      }\n      [dir=\"rtl\"] .mdc-data-table__header-cell--numeric,\n      .mdc-data-table__header-cell--numeric[dir=\"rtl\"] {\n        /* @noflip */\n        text-align: left;\n      }\n\n      /* custom from here */\n\n      .mdc-data-table {\n        display: block;\n      }\n      .mdc-data-table__header-cell {\n        overflow: hidden;\n      }\n      .mdc-data-table__header-cell.sortable {\n        cursor: pointer;\n      }\n      .mdc-data-table__header-cell.not-sorted:not(.mdc-data-table__cell--numeric)\n        span {\n        position: relative;\n        left: -24px;\n      }\n      .mdc-data-table__header-cell.not-sorted > * {\n        transition: left 0.2s ease 0s;\n      }\n      .mdc-data-table__header-cell.not-sorted ha-icon {\n        left: -36px;\n      }\n      .mdc-data-table__header-cell.not-sorted:not(.mdc-data-table__cell--numeric):hover\n        span {\n        left: 0px;\n      }\n      .mdc-data-table__header-cell:hover.not-sorted ha-icon {\n        left: 0px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-data-table\": HaDataTable;\n  }\n}\n","import { LovelaceConfig, ActionConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\n\nconst EXCLUDED_DOMAINS = [\"zone\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    !actionConfig.service_data ||\n    !actionConfig.service_data.entity_id\n  ) {\n    return;\n  }\n  let entityIds = actionConfig.service_data.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nconst computeUsedEntities = (config) => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): string[] => {\n  const usedEntities = computeUsedEntities(config);\n  return Object.keys(hass.states)\n    .filter(\n      (entity) =>\n        !usedEntities.has(entity) &&\n        !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    )\n    .sort();\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  PropertyValues,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { classMap } from \"lit-html/directives/class-map\";\n\nimport memoizeOne from \"memoize-one\";\n\nimport \"../../../../components/ha-fab\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-relative-time\";\nimport \"../../../../components/ha-icon\";\n\nimport \"../../../../components/ha-data-table\";\n// tslint:disable-next-line\nimport {\n  SelectionChangedEvent,\n  DataTabelColumnContainer,\n} from \"../../../../components/ha-data-table\";\n\nimport computeStateName from \"../../../../common/entity/compute_state_name\";\nimport computeDomain from \"../../../../common/entity/compute_domain\";\n\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\nimport { showSelectViewDialog } from \"../select-view/show-select-view-dialog\";\nimport { showEditCardDialog } from \"../card-editor/show-edit-card-dialog\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport { Lovelace } from \"../../types\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property() public lovelace?: Lovelace;\n\n  @property() public hass?: HomeAssistant;\n\n  @property() public narrow?: boolean;\n\n  @property() private _unusedEntities: string[] = [];\n\n  private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTabelColumnContainer = {\n      entity: {\n        title: \"Entity\",\n        sortable: true,\n        filterable: true,\n        filterKey: \"friendly_name\",\n        direction: \"asc\",\n        template: (stateObj) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            <state-badge\n              .hass=${this.hass!}\n              .stateObj=${stateObj}\n            ></state-badge>\n            ${stateObj.friendly_name}\n          </div>\n        `,\n      },\n    };\n\n    if (narrow) {\n      return columns;\n    }\n\n    columns.entity_id = {\n      title: \"Entity id\",\n      sortable: true,\n      filterable: true,\n    };\n    columns.domain = {\n      title: \"Domain\",\n      sortable: true,\n      filterable: true,\n    };\n    columns.last_changed = {\n      title: \"Last Changed\",\n      type: \"numeric\",\n      sortable: true,\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      <ha-card header=\"Unused entities\">\n        <div class=\"card-content\">\n          These are the entities that you have available, but are not in your\n          Lovelace UI yet.\n          ${this.lovelace.mode === \"storage\"\n            ? html`\n                <br />Select the entities you want to add to a card and then\n                click the add card button.\n              `\n            : \"\"}\n        </div>\n      </ha-card>\n      <ha-data-table\n        .columns=${this._columns(this.narrow!)}\n        .data=${this._unusedEntities.map((entity) => {\n          const stateObj = this.hass!.states[entity];\n          return {\n            entity_id: entity,\n            entity: {\n              ...stateObj,\n              friendly_name: computeStateName(stateObj),\n            },\n            domain: computeDomain(entity),\n            last_changed: stateObj!.last_changed,\n          };\n        })}\n        .id=${\"entity_id\"}\n        .selectable=${this.lovelace!.mode === \"storage\"}\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n      ${this.lovelace.mode === \"storage\"\n        ? html`\n            <ha-fab\n              class=\"${classMap({\n                rtl: computeRTL(this.hass),\n              })}\"\n              icon=\"hass:plus\"\n              label=\"${this.hass.localize(\n                \"ui.panel.lovelace.editor.edit_card.add\"\n              )}\"\n              @click=\"${this._selectView}\"\n            ></ha-fab>\n          `\n        : \"\"}\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    this._unusedEntities = computeUnusedEntities(this.hass, this._config!);\n  }\n\n  private _handleSelectionChanged(ev: CustomEvent): void {\n    const changedSelection = ev.detail as SelectionChangedEvent;\n    const entity = changedSelection.id;\n    if (changedSelection.selected) {\n      this._selectedEntities.push(entity);\n    } else {\n      const index = this._selectedEntities.indexOf(entity);\n      if (index !== -1) {\n        this._selectedEntities.splice(index, 1);\n      }\n    }\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = (ev.target as HTMLElement)\n      .closest(\"tr\")!\n      .getAttribute(\"data-row-id\")!;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  private _selectView(): void {\n    showSelectViewDialog(this, {\n      lovelace: this.lovelace!,\n      viewSelectedCallback: (view) => this._addCard(view),\n    });\n  }\n\n  private _addCard(view: number): void {\n    showEditCardDialog(this, {\n      lovelace: this.lovelace!,\n      path: [view],\n      entities: this._selectedEntities,\n    });\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        padding: 16px;\n      }\n      ha-fab {\n        position: sticky;\n        float: right;\n        bottom: 16px;\n        z-index: 1;\n      }\n      ha-fab.rtl {\n        float: left;\n      }\n      ha-card {\n        margin-bottom: 16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n","import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { Lovelace } from \"../../types\";\n\nexport interface SelectViewDialogParams {\n  lovelace: Lovelace;\n  viewSelectedCallback: (view: number) => void;\n}\n\nexport const showSelectViewDialog = (\n  element: HTMLElement,\n  selectViewDialogParams: SelectViewDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-select-view\",\n    dialogImport: () =>\n      import(\n        /* webpackChunkName: \"hui-dialog-select-view\" */ \"./hui-dialog-select-view\"\n      ),\n    dialogParams: selectViewDialogParams,\n  });\n};\n"],"sourceRoot":""}