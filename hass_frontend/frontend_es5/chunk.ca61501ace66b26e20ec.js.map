{"version":3,"sources":["webpack:///./src/mixins/events-mixin.js","webpack:///./src/components/ha-markdown.js","webpack:///./src/mixins/localize-mixin.js","webpack:///./src/components/ha-card.ts","webpack:///./src/components/ha-relative-time.js","webpack:///./src/common/datetime/relative_time.ts","webpack:///./src/dialogs/notifications/notification-item-template.ts","webpack:///./src/dialogs/notifications/configurator-notification-item.ts","webpack:///./src/dialogs/notifications/persistent-notification-item.ts","webpack:///./src/dialogs/notifications/notification-item.ts","webpack:///./src/components/ha-paper-icon-button-prev.ts","webpack:///./src/dialogs/notifications/notification-drawer.js"],"names":["EventsMixin","dedupingMixin","superClass","_superClass","_class","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","apply","arguments","_inherits","key","value","type","detail","options","fireEvent","node","loaded","svgWhiteList","HaMarkdown","PolymerElement","content","String","observer","allowSvg","Boolean","_this","_get","prototype","call","_scriptLoaded","_renderScheduled","_resize","fire","Promise","all","__webpack_require__","e","then","bind","_ref","marked","filterXSS","_render","_this2","resolve","innerHTML","gfm","tables","breaks","onIgnoreTag","tag","html","indexOf","walker","document","createTreeWalker","nextNode","currentNode","tagName","host","location","target","addEventListener","innerText","customElements","define","get","hass","Object","localize","Function","computed","HaCard","property","css","_templateObject","_templateObject2","header","_templateObject3","_templateObject4","LitElement","HaRelativeTime","updateRelative","_assertThisInitialized","LocalizeMixin","datetime","datetimeObj","parsedDateTime","updateInterval","setInterval","clearInterval","newVal","Date","root","dom","relativeTime","d","__webpack_exports__","tests","langKey","dateObj","timeDesc","length","undefined","delta","compareTime","getTime","tense","Math","abs","i","floor","concat","includeTense","_decorate","customElement","_initialize","_LitElement","F","_LitElement2","HuiNotificationItemTemplate","_getPrototypeOf2","_len","args","Array","_key","kind","static","configurator_notification_item_decorate","HuiConfiguratorNotificationItem","configurator_notification_item_classCallCheck","configurator_notification_item_getPrototypeOf","configurator_notification_item_assertThisInitialized","configurator_notification_item_inherits","decorators","notification","configurator_notification_item_templateObject2","attributes","friendly_name","_handleClick","state","configurator_notification_item_templateObject","entityId","entity_id","persistent_notification_item_decorate","HuiPersistentNotificationItem","persistent_notification_item_classCallCheck","persistent_notification_item_getPrototypeOf","persistent_notification_item_assertThisInitialized","persistent_notification_item_inherits","persistent_notification_item_templateObject2","title","notification_id","message","created_at","_computeTooltip","_handleDismiss","persistent_notification_item_templateObject","callService","toLocaleDateString","language","year","month","day","minute","hour","notification_item_decorate","HuiNotificationItem","notification_item_classCallCheck","notification_item_getPrototypeOf","notification_item_assertThisInitialized","notification_item_inherits","changedProps","has","notification_item_templateObject2","notification_item_templateObject3","notification_item_templateObject","paperIconButtonClass","HaPaperIconButtonPrev","_paperIconButtonClass","ha_paper_icon_button_prev_classCallCheck","ha_paper_icon_button_prev_possibleConstructorReturn","ha_paper_icon_button_prev_getPrototypeOf","ha_paper_icon_button_prev_inherits","icon","window","getComputedStyle","direction","HuiNotificationDrawer","_EventsMixin","notification_drawer_classCallCheck","notification_drawer_possibleConstructorReturn","notification_drawer_getPrototypeOf","notification_drawer_inherits","notification_drawer_templateObject","open","notifications","_notificationsBackend","notification_drawer_get","ev","stopPropagation","_unsubNotifications","subscribeNotifications","connection","notificationsBackend","configuratorEntities","keys","states","filter","computeDomain","map","narrow","style","setProperty","innerWidth","$","drawer"],"mappings":"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","file":"chunk.ca61501ace66b26e20ec.js","sourcesContent":["import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n// Polymer legacy event helpers used courtesy of the Polymer project.\n//\n// Copyright (c) 2017 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/* @polymerMixin */\nexport const EventsMixin = dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      /**\n   * Dispatches a custom event with an optional detail value.\n   *\n   * @param {string} type Name of event type.\n   * @param {*=} detail Detail value containing event-specific\n   *   payload.\n   * @param {{ bubbles: (boolean|undefined),\n               cancelable: (boolean|undefined),\n                composed: (boolean|undefined) }=}\n    *  options Object specifying options.  These may include:\n    *  `bubbles` (boolean, defaults to `true`),\n    *  `cancelable` (boolean, defaults to false), and\n    *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n    * @return {Event} The new event that was fired.\n    */\n      fire(type, detail, options) {\n        options = options || {};\n        return fireEvent(options.node || this, type, detail, options);\n      }\n    }\n);\n","import { PolymerElement } from \"@polymer/polymer/polymer-element\";\nimport { EventsMixin } from \"../mixins/events-mixin\";\n\nlet loaded = null;\n\n/**\n * White list allowed svg tag.\n * Only put in the tag used in QR code, can be extend in future.\n */\nconst svgWhiteList = [\"svg\", \"path\"];\n\n/*\n * @appliesMixin EventsMixin\n */\nclass HaMarkdown extends EventsMixin(PolymerElement) {\n  static get properties() {\n    return {\n      content: {\n        type: String,\n        observer: \"_render\",\n      },\n      allowSvg: {\n        type: Boolean,\n        value: false,\n      },\n    };\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // 0 = not loaded, 1 = success, 2 = error\n    this._scriptLoaded = 0;\n    this._renderScheduled = false;\n    this._resize = () => this.fire(\"iron-resize\");\n\n    if (!loaded) {\n      loaded = import(/* webpackChunkName: \"load_markdown\" */ \"../resources/load_markdown\");\n    }\n    loaded\n      .then(\n        ({ marked, filterXSS }) => {\n          this.marked = marked;\n          this.filterXSS = filterXSS;\n          this._scriptLoaded = 1;\n        },\n        () => {\n          this._scriptLoaded = 2;\n        }\n      )\n      .then(() => this._render());\n  }\n\n  _render() {\n    if (this._scriptLoaded === 0 || this._renderScheduled) return;\n\n    this._renderScheduled = true;\n\n    // debounce it to next microtask.\n    Promise.resolve().then(() => {\n      this._renderScheduled = false;\n\n      if (this._scriptLoaded === 1) {\n        this.innerHTML = this.filterXSS(\n          this.marked(this.content, {\n            gfm: true,\n            tables: true,\n            breaks: true,\n          }),\n          {\n            onIgnoreTag: this.allowSvg\n              ? (tag, html) => (svgWhiteList.indexOf(tag) >= 0 ? html : null)\n              : null,\n          }\n        );\n        this._resize();\n\n        const walker = document.createTreeWalker(\n          this,\n          1 /* SHOW_ELEMENT */,\n          null,\n          false\n        );\n\n        while (walker.nextNode()) {\n          const node = walker.currentNode;\n\n          // Open external links in a new window\n          if (node.tagName === \"A\" && node.host !== document.location.host) {\n            node.target = \"_blank\";\n\n            // Fire a resize event when images loaded to notify content resized\n          } else if (node.tagName === \"IMG\") {\n            node.addEventListener(\"load\", this._resize);\n          }\n        }\n      } else if (this._scriptLoaded === 2) {\n        this.innerText = this.content;\n      }\n    });\n  }\n}\n\ncustomElements.define(\"ha-markdown\", HaMarkdown);\n","import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n/**\n * Polymer Mixin to enable a localize function powered by language/resources from hass object.\n *\n * @polymerMixin\n */\nexport default dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      static get properties() {\n        return {\n          hass: Object,\n\n          /**\n           * Translates a string to the current `language`. Any parameters to the\n           * string should be passed in order, as follows:\n           * `localize(stringKey, param1Name, param1Value, param2Name, param2Value)`\n           */\n          localize: {\n            type: Function,\n            computed: \"__computeLocalize(hass.localize)\",\n          },\n        };\n      }\n\n      __computeLocalize(localize) {\n        return localize;\n      }\n    }\n);\n","import {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\nclass HaCard extends LitElement {\n  @property() public header?: string;\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 2px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0 2px 2px 0 rgba(0, 0, 0, 0.14),\n          0 1px 5px 0 rgba(0, 0, 0, 0.12),\n          0 3px 1px -2px rgba(0, 0, 0, 0.2)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        padding: 24px 16px 16px;\n        display: block;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`\n            <div class=\"card-header\">${this.header}</div>\n          `\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ncustomElements.define(\"ha-card\", HaCard);\n","import { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport relativeTime from \"../common/datetime/relative_time\";\n\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaRelativeTime extends LocalizeMixin(PolymerElement) {\n  static get properties() {\n    return {\n      hass: Object,\n      datetime: {\n        type: String,\n        observer: \"datetimeChanged\",\n      },\n\n      datetimeObj: {\n        type: Object,\n        observer: \"datetimeObjChanged\",\n      },\n\n      parsedDateTime: Object,\n    };\n  }\n\n  constructor() {\n    super();\n    this.updateRelative = this.updateRelative.bind(this);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // update every 60 seconds\n    this.updateInterval = setInterval(this.updateRelative, 60000);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    clearInterval(this.updateInterval);\n  }\n\n  datetimeChanged(newVal) {\n    this.parsedDateTime = newVal ? new Date(newVal) : null;\n\n    this.updateRelative();\n  }\n\n  datetimeObjChanged(newVal) {\n    this.parsedDateTime = newVal;\n\n    this.updateRelative();\n  }\n\n  updateRelative() {\n    const root = dom(this);\n    if (!this.parsedDateTime) {\n      root.innerHTML = this.localize(\"ui.components.relative_time.never\");\n    } else {\n      root.innerHTML = relativeTime(this.parsedDateTime, this.localize);\n    }\n  }\n}\n\ncustomElements.define(\"ha-relative-time\", HaRelativeTime);\n","import { LocalizeFunc } from \"../translations/localize\";\n\n/**\n * Calculate a string representing a date object as relative time from now.\n *\n * Example output: 5 minutes ago, in 3 days.\n */\nconst tests = [60, 60, 24, 7];\nconst langKey = [\"second\", \"minute\", \"hour\", \"day\"];\n\nexport default function relativeTime(\n  dateObj: Date,\n  localize: LocalizeFunc,\n  options: {\n    compareTime?: Date;\n    includeTense?: boolean;\n  } = {}\n): string {\n  const compareTime = options.compareTime || new Date();\n  let delta = (compareTime.getTime() - dateObj.getTime()) / 1000;\n  const tense = delta >= 0 ? \"past\" : \"future\";\n  delta = Math.abs(delta);\n\n  let timeDesc;\n\n  for (let i = 0; i < tests.length; i++) {\n    if (delta < tests[i]) {\n      delta = Math.floor(delta);\n      timeDesc = localize(\n        `ui.components.relative_time.duration.${langKey[i]}`,\n        \"count\",\n        delta\n      );\n      break;\n    }\n\n    delta /= tests[i];\n  }\n\n  if (timeDesc === undefined) {\n    delta = Math.floor(delta);\n    timeDesc = localize(\n      \"ui.components.relative_time.duration.week\",\n      \"count\",\n      delta\n    );\n  }\n\n  return options.includeTense === false\n    ? timeDesc\n    : localize(`ui.components.relative_time.${tense}`, \"time\", timeDesc);\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport \"../../components/ha-card\";\n\n@customElement(\"notification-item-template\")\nexport class HuiNotificationItemTemplate extends LitElement {\n  protected render(): TemplateResult | void {\n    return html`\n      <ha-card>\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div class=\"contents\"><slot></slot></div>\n        <div class=\"actions\"><slot name=\"actions\"></slot></div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .contents {\n        padding: 16px;\n        -ms-user-select: text;\n        -webkit-user-select: text;\n        -moz-user-select: text;\n        user-select: text;\n      }\n\n      ha-card .header {\n        /* start paper-font-headline style */\n        font-family: \"Roboto\", \"Noto\", sans-serif;\n        -webkit-font-smoothing: antialiased; /* OS X subpixel AA bleed bug */\n        text-rendering: optimizeLegibility;\n        font-size: 24px;\n        font-weight: 400;\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        /* end paper-font-headline style */\n\n        color: var(--primary-text-color);\n        padding: 16px 16px 0;\n      }\n\n      .actions {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n\n      ::slotted(.primary) {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"notification-item-template\": HuiNotificationItemTemplate;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\n\nimport \"./notification-item-template\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { PersitentNotificationEntity } from \"../../data/persistent_notification\";\n\n@customElement(\"configurator-notification-item\")\nexport class HuiConfiguratorNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: PersitentNotificationEntity;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return html`\n      <notification-item-template>\n        <span slot=\"header\">${this.hass.localize(\"domain.configurator\")}</span>\n\n        <div>\n          ${this.hass.localize(\n            \"ui.notification_drawer.click_to_configure\",\n            \"entity\",\n            this.notification.attributes.friendly_name\n          )}\n        </div>\n\n        <mwc-button slot=\"actions\" @click=\"${this._handleClick}\"\n          >${this.hass.localize(\n            `state.configurator.${this.notification.state}`\n          )}</mwc-button\n        >\n      </notification-item-template>\n    `;\n  }\n\n  private _handleClick(): void {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this.notification!.entity_id,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"configurator-notification-item\": HuiConfiguratorNotificationItem;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\n\nimport \"../../components/ha-relative-time\";\nimport \"../../components/ha-markdown\";\nimport \"./notification-item-template\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { PersistentNotification } from \"../../data/persistent_notification\";\n\n@customElement(\"persistent-notification-item\")\nexport class HuiPersistentNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: PersistentNotification;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return html`\n      <notification-item-template>\n        <span slot=\"header\">\n          ${this.notification.title || this.notification.notification_id}\n        </span>\n\n        <ha-markdown content=\"${this.notification.message}\"></ha-markdown>\n\n        <div class=\"time\">\n          <span>\n            <ha-relative-time\n              .hass=\"${this.hass}\"\n              .datetime=\"${this.notification.created_at}\"\n            ></ha-relative-time>\n            <paper-tooltip\n              >${this._computeTooltip(\n                this.hass,\n                this.notification\n              )}</paper-tooltip\n            >\n          </span>\n        </div>\n\n        <mwc-button slot=\"actions\" @click=\"${this._handleDismiss}\"\n          >${this.hass.localize(\n            \"ui.card.persistent_notification.dismiss\"\n          )}</mwc-button\n        >\n      </notification-item-template>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .time {\n        display: flex;\n        justify-content: flex-end;\n        margin-top: 6px;\n      }\n      ha-relative-time {\n        color: var(--secondary-text-color);\n      }\n      a {\n        color: var(--primary-color);\n      }\n    `;\n  }\n\n  private _handleDismiss(): void {\n    this.hass!.callService(\"persistent_notification\", \"dismiss\", {\n      notification_id: this.notification!.notification_id,\n    });\n  }\n\n  private _computeTooltip(\n    hass: HomeAssistant,\n    notification: PersistentNotification\n  ): string | undefined {\n    if (!hass || !notification) {\n      return undefined;\n    }\n\n    const d = new Date(notification.created_at!);\n    return d.toLocaleDateString(hass.language, {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      minute: \"numeric\",\n      hour: \"numeric\",\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"persistent-notification-item\": HuiPersistentNotificationItem;\n  }\n}\n","import {\n  LitElement,\n  property,\n  customElement,\n  PropertyValues,\n  TemplateResult,\n  html,\n} from \"lit-element\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\n\nimport \"./configurator-notification-item\";\nimport \"./persistent-notification-item\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { PersistentNotification } from \"../../data/persistent_notification\";\n\n@customElement(\"notification-item\")\nexport class HuiNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: HassEntity | PersistentNotification;\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (!this.hass || !this.notification || changedProps.has(\"notification\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return \"entity_id\" in this.notification\n      ? html`\n          <configurator-notification-item\n            .hass=\"${this.hass}\"\n            .notification=\"${this.notification}\"\n          ></configurator-notification-item>\n        `\n      : html`\n          <persistent-notification-item\n            .hass=\"${this.hass}\"\n            .notification=\"${this.notification}\"\n          ></persistent-notification-item>\n        `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"notification-item\": HuiNotificationItem;\n  }\n}\n","import { Constructor } from \"lit-element\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\n// Not duplicate, this is for typing.\n// tslint:disable-next-line\nimport { PaperIconButtonElement } from \"@polymer/paper-icon-button/paper-icon-button\";\n\nconst paperIconButtonClass = customElements.get(\n  \"paper-icon-button\"\n) as Constructor<PaperIconButtonElement>;\n\nexport class HaPaperIconButtonPrev extends paperIconButtonClass {\n  public connectedCallback() {\n    this.icon =\n      window.getComputedStyle(this).direction === \"ltr\"\n        ? \"hass:chevron-left\"\n        : \"hass:chevron-right\";\n\n    // calling super after setting icon to have it consistently show the icon (otherwise not always shown)\n    super.connectedCallback();\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-icon-button-prev\": HaPaperIconButtonPrev;\n  }\n}\n\ncustomElements.define(\"ha-paper-icon-button-prev\", HaPaperIconButtonPrev);\n","import \"@polymer/app-layout/app-drawer/app-drawer\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\n\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"./notification-item\";\nimport \"../../components/ha-paper-icon-button-prev\";\n\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport LocalizeMixin from \"../../mixins/localize-mixin\";\nimport { subscribeNotifications } from \"../../data/persistent_notification\";\nimport computeDomain from \"../../common/entity/compute_domain\";\n/*\n * @appliesMixin EventsMixin\n * @appliesMixin LocalizeMixin\n */\nexport class HuiNotificationDrawer extends EventsMixin(\n  LocalizeMixin(PolymerElement)\n) {\n  static get template() {\n    return html`\n    <style include=\"paper-material-styles\">\n      app-toolbar {\n        color: var(--primary-text-color);\n        border-bottom: 1px solid var(--divider-color);\n        background-color: var(--primary-background-color);\n        min-height: 64px;\n        width: calc(100% - 32px);\n      }\n\n      .notifications {\n        overflow-y: auto;\n        padding-top: 16px;\n      }\n\n      .notification {\n        padding: 0 16px 16px;\n      }\n\n      .empty {\n        padding: 16px;\n        text-align: center;\n      }\n    </style>\n    <app-drawer id='drawer' opened=\"{{open}}\" disable-swipe>\n      <app-toolbar>\n        <div main-title>[[localize('ui.notification_drawer.title')]]</div>\n        <ha-paper-icon-button-prev on-click=\"_closeDrawer\"></paper-icon-button>\n      </app-toolbar>\n      <div class=\"notifications\">\n        <template is=\"dom-if\" if=\"[[!_empty(notifications)]]\">\n          <dom-repeat items=\"[[notifications]]\">\n            <template>\n              <div class=\"notification\">\n                <notification-item hass=\"[[hass]]\" notification=\"[[item]]\"></notification-item>\n              </div>\n            </template>\n          </dom-repeat>\n        </template>\n        <template is=\"dom-if\" if=\"[[_empty(notifications)]]\">\n          <div class=\"empty\">[[localize('ui.notification_drawer.empty')]]<div>\n        </template>\n      </div>\n    </app-drawer>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      open: {\n        type: Boolean,\n        observer: \"_openChanged\",\n      },\n      notifications: {\n        type: Array,\n        computed: \"_computeNotifications(open, hass, _notificationsBackend)\",\n      },\n      _notificationsBackend: {\n        type: Array,\n        value: [],\n      },\n    };\n  }\n\n  ready() {\n    super.ready();\n    window.addEventListener(\"location-changed\", () => {\n      // close drawer when we navigate away.\n      if (this.open) {\n        this.open = false;\n      }\n    });\n  }\n\n  _closeDrawer(ev) {\n    ev.stopPropagation();\n    this.open = false;\n  }\n\n  _empty(notifications) {\n    return notifications.length === 0;\n  }\n\n  _openChanged(open) {\n    if (open) {\n      // Render closed then animate open\n      this._unsubNotifications = subscribeNotifications(\n        this.hass.connection,\n        (notifications) => {\n          this._notificationsBackend = notifications;\n        }\n      );\n    } else if (this._unsubNotifications) {\n      this._unsubNotifications();\n      this._unsubNotifications = undefined;\n    }\n  }\n\n  _computeNotifications(open, hass, notificationsBackend) {\n    if (!open) {\n      return [];\n    }\n\n    const configuratorEntities = Object.keys(hass.states)\n      .filter((entityId) => computeDomain(entityId) === \"configurator\")\n      .map((entityId) => hass.states[entityId]);\n\n    return notificationsBackend.concat(configuratorEntities);\n  }\n\n  showDialog({ narrow }) {\n    this.style.setProperty(\n      \"--app-drawer-width\",\n      narrow ? window.innerWidth + \"px\" : \"500px\"\n    );\n    this.$.drawer.open();\n  }\n}\ncustomElements.define(\"notification-drawer\", HuiNotificationDrawer);\n"],"sourceRoot":""}