{"version":3,"sources":["webpack:///../src/error.js","webpack:///../node_modules/kind-of/index.js","webpack:///../src/constants.js","webpack:///../src/utils.js","webpack:///../src/kinds.js","webpack:///../src/types.js","webpack:///../src/superstruct.js","webpack:///../src/index.js"],"names":["message","type","path","JSON","StructError","errors","Error","IS_STRUCT","KIND","value","defaults","isStruct","schema","kindOf","tuple","list","func","object","required","scalars","union","intersection","scalar","optional","process","obj","keys","any","values","name","validate","resolved","resolveDefaults","ret","v","allE","e","singleE","allE2","e2","first","s","String","data","en","l","result","failure","reason","isValid","ks","properties","kind","d","key","r","compile","struct","createSchema","array","element","i","valueKeys","Object","propertiesKeys","fn","types","kinds","k","length","Math","t","Kinds","TYPES","Types","undefined","isNaN","config","options","Struct","superstruct"],"mappings":"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","file":"vendors~hui-alarm-panel-card-editor~hui-entities-card-editor~hui-entity-button-card-editor~hui-gauge~ad2d78d9.chunk.js","sourcesContent":["/**\n * Define a struct error.\n *\n * @type {StructError}\n */\n\nclass StructError extends TypeError {\n  static format(attrs) {\n    const { type, path, value } = attrs\n    const message = `Expected a value of type \\`${type}\\`${\n      path.length ? ` for \\`${path.join('.')}\\`` : ''\n    } but received \\`${JSON.stringify(value)}\\`.`\n    return message\n  }\n\n  constructor(attrs) {\n    const message = StructError.format(attrs)\n    super(message)\n\n    const { data, path, value, reason, type, errors = [] } = attrs\n    this.data = data\n    this.path = path\n    this.value = value\n    this.reason = reason\n    this.type = type\n    this.errors = errors\n\n    if (!errors.length) {\n      errors.push(this)\n    }\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, this.constructor)\n    } else {\n      this.stack = new Error().stack\n    }\n  }\n}\n\n/**\n * Export.\n *\n * @type {StructError}\n */\n\nexport default StructError\n","var toString = Object.prototype.toString;\n\nmodule.exports = function kindOf(val) {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n\n  var type = typeof val;\n  if (type === 'boolean') return 'boolean';\n  if (type === 'string') return 'string';\n  if (type === 'number') return 'number';\n  if (type === 'symbol') return 'symbol';\n  if (type === 'function') {\n    return isGeneratorFn(val) ? 'generatorfunction' : 'function';\n  }\n\n  if (isArray(val)) return 'array';\n  if (isBuffer(val)) return 'buffer';\n  if (isArguments(val)) return 'arguments';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  if (isRegexp(val)) return 'regexp';\n\n  switch (ctorName(val)) {\n    case 'Symbol': return 'symbol';\n    case 'Promise': return 'promise';\n\n    // Set, Map, WeakSet, WeakMap\n    case 'WeakMap': return 'weakmap';\n    case 'WeakSet': return 'weakset';\n    case 'Map': return 'map';\n    case 'Set': return 'set';\n\n    // 8-bit typed arrays\n    case 'Int8Array': return 'int8array';\n    case 'Uint8Array': return 'uint8array';\n    case 'Uint8ClampedArray': return 'uint8clampedarray';\n\n    // 16-bit typed arrays\n    case 'Int16Array': return 'int16array';\n    case 'Uint16Array': return 'uint16array';\n\n    // 32-bit typed arrays\n    case 'Int32Array': return 'int32array';\n    case 'Uint32Array': return 'uint32array';\n    case 'Float32Array': return 'float32array';\n    case 'Float64Array': return 'float64array';\n  }\n\n  if (isGeneratorObj(val)) {\n    return 'generator';\n  }\n\n  // Non-plain objects\n  type = toString.call(val);\n  switch (type) {\n    case '[object Object]': return 'object';\n    // iterators\n    case '[object Map Iterator]': return 'mapiterator';\n    case '[object Set Iterator]': return 'setiterator';\n    case '[object String Iterator]': return 'stringiterator';\n    case '[object Array Iterator]': return 'arrayiterator';\n  }\n\n  // other\n  return type.slice(8, -1).toLowerCase().replace(/\\s/g, '');\n};\n\nfunction ctorName(val) {\n  return val.constructor ? val.constructor.name : null;\n}\n\nfunction isArray(val) {\n  if (Array.isArray) return Array.isArray(val);\n  return val instanceof Array;\n}\n\nfunction isError(val) {\n  return val instanceof Error || (typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number');\n}\n\nfunction isDate(val) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function'\n    && typeof val.getDate === 'function'\n    && typeof val.setDate === 'function';\n}\n\nfunction isRegexp(val) {\n  if (val instanceof RegExp) return true;\n  return typeof val.flags === 'string'\n    && typeof val.ignoreCase === 'boolean'\n    && typeof val.multiline === 'boolean'\n    && typeof val.global === 'boolean';\n}\n\nfunction isGeneratorFn(name, val) {\n  return ctorName(name) === 'GeneratorFunction';\n}\n\nfunction isGeneratorObj(val) {\n  return typeof val.throw === 'function'\n    && typeof val.return === 'function'\n    && typeof val.next === 'function';\n}\n\nfunction isArguments(val) {\n  try {\n    if (typeof val.length === 'number' && typeof val.callee === 'function') {\n      return true;\n    }\n  } catch (err) {\n    if (err.message.indexOf('callee') !== -1) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * If you need to support Safari 5-7 (8-10 yr-old browser),\n * take a look at https://github.com/feross/is-buffer\n */\n\nfunction isBuffer(val) {\n  if (val.constructor && typeof val.constructor.isBuffer === 'function') {\n    return val.constructor.isBuffer(val);\n  }\n  return false;\n}\n","/**\n * A private string to identify structs by.\n *\n * @type {String}\n */\n\nconst IS_STRUCT = '@@__STRUCT__@@'\n\n/**\n * A private string to refer to a struct's kind.\n *\n * @type {String}\n */\n\nconst KIND = '@@__KIND__@@'\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport { IS_STRUCT, KIND }\n","import { IS_STRUCT } from './constants'\n\n/**\n * Check if a `value` is a struct.\n *\n * @param {Any} value\n * @return {Boolean}\n */\n\nexport function isStruct(value) {\n  return !!(value && value[IS_STRUCT])\n}\n\n/**\n * Resolve `defaults`, for an optional `value`.\n *\n * @param {Function|Any} defaults\n * @param {Any} value\n * @return {Any}\n */\n\nexport function resolveDefaults(defaults, value) {\n  return typeof defaults === 'function' ? defaults(value) : defaults\n}\n","import kindOf from 'kind-of'\n\nimport { KIND } from './constants'\nimport { isStruct, resolveDefaults } from './utils'\n\n/**\n * Kind.\n *\n * @type {Kind}\n */\n\nclass Kind {\n  constructor(name, type, validate) {\n    this.name = name\n    this.type = type\n    this.validate = validate\n  }\n}\n\n/**\n * Any.\n *\n * @param {Array|Function|Object|String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction any(schema, defaults, options) {\n  if (isStruct(schema)) {\n    return schema[KIND]\n  }\n\n  if (schema instanceof Kind) {\n    return schema\n  }\n\n  switch (kindOf(schema)) {\n    case 'array': {\n      return schema.length > 1\n        ? tuple(schema, defaults, options)\n        : list(schema, defaults, options)\n    }\n\n    case 'function': {\n      return func(schema, defaults, options)\n    }\n\n    case 'object': {\n      return object(schema, defaults, options)\n    }\n\n    case 'string': {\n      let required = true\n      let type\n\n      if (schema.endsWith('?')) {\n        required = false\n        schema = schema.slice(0, -1)\n      }\n\n      if (schema.includes('|')) {\n        const scalars = schema.split(/\\s*\\|\\s*/g)\n        type = union(scalars, defaults, options)\n      } else if (schema.includes('&')) {\n        const scalars = schema.split(/\\s*&\\s*/g)\n        type = intersection(scalars, defaults, options)\n      } else {\n        type = scalar(schema, defaults, options)\n      }\n\n      if (!required) {\n        type = optional(type, undefined, options)\n      }\n\n      return type\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    throw new Error(\n      `A schema definition must be an object, array, string or function, but you passed: ${schema}`\n    )\n  } else {\n    throw new Error(`Invalid schema: ${schema}`)\n  }\n}\n\n/**\n * Dict.\n *\n * @param {Array} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction dict(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 2) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dict structs must be defined as an array with two elements, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const keys = any(schema[0], undefined, options)\n  const values = any(schema[1], undefined, options)\n  const name = 'dict'\n  const type = `dict<${keys.type},${values.type}>`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = {}\n    const errors = []\n\n    for (let k in value) {\n      const v = value[k]\n      const [e, r] = keys.validate(k)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      k = r\n      const [e2, r2] = values.validate(v)\n\n      if (e2) {\n        const allE2 = e2.errors || [e2]\n        allE2.forEach(singleE => {\n          singleE.path = [k].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[k] = r2\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enum.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction en(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Enum structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'enum'\n  const type = schema\n    .map(s => {\n      try {\n        return JSON.stringify(s)\n      } catch (e) {\n        return String(s)\n      }\n    })\n    .join(' | ')\n\n  const validate = (value = resolveDefaults(defaults)) => {\n    return schema.includes(value)\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Enums.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction enums(schema, defaults, options) {\n  const e = en(schema, undefined, options)\n  const l = list([e], defaults, options)\n  return l\n}\n\n/**\n * Function.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction func(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Function structs must be defined as a function, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const name = 'function'\n  const type = '<function>'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const result = schema(value, data)\n    let failure = { path: [], reason: null }\n    let isValid\n\n    switch (kindOf(result)) {\n      case 'boolean': {\n        isValid = result\n        break\n      }\n      case 'string': {\n        isValid = false\n        failure.reason = result\n        break\n      }\n      case 'object': {\n        isValid = false\n        failure = { ...failure, ...result }\n        break\n      }\n      default: {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            `Validator functions must return a boolean, an error reason string or an error reason object, but you passed: ${schema}`\n          )\n        } else {\n          throw new Error(`Invalid result: ${result}`)\n        }\n      }\n    }\n\n    return isValid\n      ? [undefined, value]\n      : [{ type, value, data: value, ...failure }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Instance.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction instance(schema, defaults, options) {\n  const name = 'instance'\n  const type = `instance<${schema.name}>`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value instanceof schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Interface.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction inter(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Interface structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'interface'\n  const type = `{${ks.join()}}`\n  const validate = value => {\n    const resolved = resolveDefaults(defaults)\n    value = resolved ? { ...resolved, ...value } : value\n    const errors = []\n    const ret = value\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Lazy.\n *\n * @param {Function} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction lazy(schema, defaults, options) {\n  if (kindOf(schema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Lazy structs must be defined as an function that returns a schema, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  let kind\n  let struct\n  const name = 'lazy'\n  const type = `lazy...`\n  const compile = value => {\n    struct = schema()\n    kind.name = struct.kind\n    kind.type = struct.type\n    kind.validate = struct.validate\n    return kind.validate(value)\n  }\n\n  kind = new Kind(name, type, compile)\n  return kind\n}\n\n/**\n * Dynamic.\n *\n * @param {Function} createSchema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction dynamic(createSchema, defaults, options) {\n  if (kindOf(createSchema) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Dynamic structs must be defined as a function, but you passed: ${createSchema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${createSchema}`)\n    }\n  }\n\n  const name = 'dynamic'\n  const type = 'dynamic...'\n  const validate = (value = resolveDefaults(defaults), data) => {\n    const schema = createSchema(value, data)\n\n    if (kindOf(schema) !== 'function') {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `Dynamic structs must return a schema, but you passed: ${schema}`\n        )\n      } else {\n        throw new Error(`Invalid schema: ${schema}`)\n      }\n    }\n\n    const [error, result] = schema.validate(value)\n\n    if (error) {\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * List.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction list(schema, defaults, options) {\n  if (kindOf(schema) !== 'array' || schema.length !== 1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `List structs must be defined as an array with a single element, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const array = scalar('array', undefined, options)\n  const element = any(schema[0], undefined, options)\n  const name = 'list'\n  const type = `[${element.type}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error, result] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    value = result\n    const errors = []\n    const ret = []\n\n    for (let i = 0; i < value.length; i++) {\n      const v = value[i]\n      const [e, r] = element.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Literal.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction literal(schema, defaults, options) {\n  const name = 'literal'\n  const type = `literal: ${JSON.stringify(schema)}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    return value === schema\n      ? [undefined, value]\n      : [{ data: value, path: [], value, type }]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Object.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction object(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Object structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'object'\n  const type = `{${ks.join()}}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n    const valueKeys = Object.keys(value)\n    const propertiesKeys = Object.keys(properties)\n    const keys = new Set(valueKeys.concat(propertiesKeys))\n\n    keys.forEach(key => {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      if (!kind) {\n        const e = { data: value, path: [key], value: v }\n        errors.push(e)\n        return\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        return\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    })\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Optional.\n *\n * @param {Any} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction optional(schema, defaults, options) {\n  return union([schema, 'undefined'], defaults, options)\n}\n\n/**\n * Partial.\n *\n * @param {Object} schema\n * @param {Object} defaults\n * @param {Object} options\n */\n\nfunction partial(schema, defaults, options) {\n  if (kindOf(schema) !== 'object') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Partial structs must be defined as an object, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const obj = scalar('object', undefined, options)\n  const ks = []\n  const properties = {}\n\n  for (const key in schema) {\n    ks.push(key)\n    const s = schema[key]\n    const kind = any(s, undefined, options)\n    properties[key] = kind\n  }\n\n  const name = 'partial'\n  const type = `{${ks.join()},...}`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = obj.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const errors = []\n    const ret = {}\n\n    for (const key in properties) {\n      let v = value[key]\n      const kind = properties[key]\n\n      if (v === undefined) {\n        const d = defaults && defaults[key]\n        v = resolveDefaults(d, value)\n      }\n\n      const [e, r] = kind.validate(v, value)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [key].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      if (key in value || r !== undefined) {\n        ret[key] = r\n      }\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Scalar.\n *\n * @param {String} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction scalar(schema, defaults, options) {\n  if (kindOf(schema) !== 'string') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Scalar structs must be defined as a string, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const { types } = options\n  const fn = types[schema]\n\n  if (kindOf(fn) !== 'function') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `No struct validator function found for type \"${schema}\".`\n      )\n    } else {\n      throw new Error(`Invalid type: ${schema}`)\n    }\n  }\n\n  const kind = func(fn, defaults, options)\n  const name = 'scalar'\n  const type = schema\n  const validate = value => {\n    const [error, result] = kind.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    return [undefined, result]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Tuple.\n *\n * @param {Array} schema\n * @param {Array} defaults\n * @param {Object} options\n */\n\nfunction tuple(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Tuple structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const array = scalar('array', undefined, options)\n  const name = 'tuple'\n  const type = `[${kinds.map(k => k.type).join()}]`\n  const validate = (value = resolveDefaults(defaults)) => {\n    const [error] = array.validate(value)\n\n    if (error) {\n      error.type = type\n      return [error]\n    }\n\n    const ret = []\n    const errors = []\n    const length = Math.max(value.length, kinds.length)\n\n    for (let i = 0; i < length; i++) {\n      const kind = kinds[i]\n      const v = value[i]\n\n      if (!kind) {\n        const e = { data: value, path: [i], value: v }\n        errors.push(e)\n        continue\n      }\n\n      const [e, r] = kind.validate(v)\n\n      if (e) {\n        const allE = e.errors || [e]\n        allE.forEach(singleE => {\n          singleE.path = [i].concat(singleE.path)\n          singleE.data = value\n          errors.push(singleE)\n        })\n        continue\n      }\n\n      ret[i] = r\n    }\n\n    if (errors.length) {\n      const first = errors[0]\n      first.errors = errors\n      return [first]\n    }\n\n    return [undefined, ret]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Union.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction union(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Union structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const kinds = schema.map(s => any(s, undefined, options))\n  const name = 'union'\n  const type = kinds.map(k => k.type).join(' | ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    const errors = []\n\n    for (const k of kinds) {\n      const [e, r] = k.validate(value)\n\n      if (!e) {\n        return [undefined, r]\n      }\n\n      errors.push(e)\n    }\n    errors[0].type = type\n    return errors\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Intersection.\n *\n * @param {Array} schema\n * @param {Any} defaults\n * @param {Object} options\n */\n\nfunction intersection(schema, defaults, options) {\n  if (kindOf(schema) !== 'array') {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(\n        `Intersection structs must be defined as an array, but you passed: ${schema}`\n      )\n    } else {\n      throw new Error(`Invalid schema: ${schema}`)\n    }\n  }\n\n  const types = schema.map(s => any(s, undefined, options))\n  const name = 'intersection'\n  const type = types.map(t => t.type).join(' & ')\n  const validate = (value = resolveDefaults(defaults)) => {\n    let v = value\n\n    for (const t of types) {\n      const [e, r] = t.validate(v)\n\n      if (e) {\n        e.type = type\n        return [e]\n      }\n\n      v = r\n    }\n\n    return [undefined, v]\n  }\n\n  return new Kind(name, type, validate)\n}\n\n/**\n * Kinds.\n *\n * @type {Object}\n */\n\nconst Kinds = {\n  any,\n  dict,\n  enum: en,\n  enums,\n  function: func,\n  instance,\n  interface: inter,\n  lazy,\n  list,\n  literal,\n  object,\n  optional,\n  partial,\n  scalar,\n  tuple,\n  union,\n  intersection,\n  dynamic,\n}\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Kinds\n","import kindOf from 'kind-of'\n\n/**\n * The types that `kind-of` supports.\n *\n * @type {Array}\n */\n\nconst TYPES = [\n  'arguments',\n  'array',\n  'boolean',\n  'buffer',\n  'error',\n  'float32array',\n  'float64array',\n  'function',\n  'generatorfunction',\n  'int16array',\n  'int32array',\n  'int8array',\n  'map',\n  'null',\n  'number',\n  'object',\n  'promise',\n  'regexp',\n  'set',\n  'string',\n  'symbol',\n  'uint16array',\n  'uint32array',\n  'uint8array',\n  'uint8clampedarray',\n  'undefined',\n  'weakmap',\n  'weakset',\n]\n\n/**\n * The default types that Superstruct ships with.\n *\n * @type {Object}\n */\n\nconst Types = {\n  any: value => value !== undefined,\n}\n\nTYPES.forEach(type => {\n  Types[type] = value => kindOf(value) === type\n})\n\n/**\n * Handle the 'date' case specially, to throw out invalid `Date` objects.\n *\n * @param {Mixed} value\n * @return {Boolean}\n */\n\nTypes.date = value => kindOf(value) === 'date' && !isNaN(value)\n\n/**\n * Export.\n *\n * @type {Object}\n */\n\nexport default Types\n","import Kinds from './kinds'\nimport StructError from './error'\nimport Types from './types'\nimport { isStruct } from './utils'\nimport { IS_STRUCT, KIND } from './constants'\n\n/**\n * Create a struct factory with a `config`.\n *\n * @param {Object} config\n * @return {Function}\n */\n\nfunction superstruct(config = {}) {\n  const types = {\n    ...Types,\n    ...(config.types || {}),\n  }\n\n  /**\n   * Create a `kind` struct with `schema`, `defaults` and `options`.\n   *\n   * @param {Any} schema\n   * @param {Any} defaults\n   * @param {Object} options\n   * @return {Function}\n   */\n\n  function struct(schema, defaults, options = {}) {\n    if (isStruct(schema)) {\n      schema = schema.schema\n    }\n\n    const kind = Kinds.any(schema, defaults, { ...options, types })\n\n    function Struct(data) {\n      if (this instanceof Struct) {\n        if (process.env.NODE_ENV !== 'production') {\n          throw new Error(\n            'The `Struct` creation function should not be used with the `new` keyword.'\n          )\n        } else {\n          throw new Error('Invalid `new` keyword!')\n        }\n      }\n\n      return Struct.assert(data)\n    }\n\n    Object.defineProperty(Struct, IS_STRUCT, { value: true })\n    Object.defineProperty(Struct, KIND, { value: kind })\n\n    Struct.kind = kind.name\n    Struct.type = kind.type\n    Struct.schema = schema\n    Struct.defaults = defaults\n    Struct.options = options\n\n    Struct.assert = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        throw new StructError(error)\n      }\n\n      return result\n    }\n\n    Struct.test = value => {\n      const [error] = kind.validate(value)\n      return !error\n    }\n\n    Struct.validate = value => {\n      const [error, result] = kind.validate(value)\n\n      if (error) {\n        return [new StructError(error)]\n      }\n\n      return [undefined, result]\n    }\n\n    return Struct\n  }\n\n  /**\n   * Mix in a factory for each specific kind of struct.\n   */\n\n  Object.keys(Kinds).forEach(name => {\n    const kind = Kinds[name]\n\n    struct[name] = (schema, defaults, options) => {\n      const type = kind(schema, defaults, { ...options, types })\n      const s = struct(type, defaults, options)\n      return s\n    }\n  })\n\n  /**\n   * Return the struct factory.\n   */\n\n  return struct\n}\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport default superstruct\n","import StructError from './error'\nimport superstruct from './superstruct'\nimport { isStruct } from './utils'\n\n/**\n * Create a convenience `struct` factory for the default types.\n *\n * @type {Function}\n */\n\nconst struct = superstruct()\n\n/**\n * Export.\n *\n * @type {Function}\n */\n\nexport { struct, superstruct, isStruct, StructError }\n"],"sourceRoot":""}