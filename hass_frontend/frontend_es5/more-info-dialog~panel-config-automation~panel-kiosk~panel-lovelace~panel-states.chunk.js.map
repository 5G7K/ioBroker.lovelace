{"version":3,"sources":["webpack:///./src/components/entity/ha-entity-toggle.ts"],"names":["isOn","stateObj","undefined","STATES_OFF","includes","state","HaEntityToggle","property","html","attributes","assumed_state","_turnOff","_isOn","_turnOn","_toggleChanged","changedProps","addEventListener","ev","stopPropagation","has","newVal","target","checked","_callService","turnOn","hass","forwardHaptic","stateDomain","computeStateDomain","serviceDomain","service","currentState","callService","entity_id","setTimeout","css","LitElement","customElements","define"],"mappings":"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","file":"more-info-dialog~panel-config-automation~panel-kiosk~panel-lovelace~panel-states.chunk.js","sourcesContent":["import \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-toggle-button/paper-toggle-button\";\n\nimport { STATES_OFF } from \"../../common/const\";\nimport computeStateDomain from \"../../common/entity/compute_state_domain\";\nimport {\n  LitElement,\n  TemplateResult,\n  html,\n  CSSResult,\n  css,\n  property,\n  PropertyValues,\n} from \"lit-element\";\nimport { HomeAssistant } from \"../../types\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\nimport { forwardHaptic } from \"../../data/haptics\";\n\nconst isOn = (stateObj?: HassEntity) =>\n  stateObj !== undefined && !STATES_OFF.includes(stateObj.state);\n\nclass HaEntityToggle extends LitElement {\n  // hass is not a property so that we only re-render on stateObj changes\n  public hass?: HomeAssistant;\n  @property() public stateObj?: HassEntity;\n  @property() private _isOn: boolean = false;\n\n  protected render(): TemplateResult | void {\n    if (!this.stateObj) {\n      return html`\n        <paper-toggle-button disabled></paper-toggle-button>\n      `;\n    }\n\n    if (this.stateObj.attributes.assumed_state) {\n      return html`\n        <paper-icon-button\n          icon=\"hass:flash-off\"\n          @click=${this._turnOff}\n          ?state-active=${!this._isOn}\n        ></paper-icon-button>\n        <paper-icon-button\n          icon=\"hass:flash\"\n          @click=${this._turnOn}\n          ?state-active=${this._isOn}\n        ></paper-icon-button>\n      `;\n    }\n\n    return html`\n      <paper-toggle-button\n        .checked=${this._isOn}\n        @change=${this._toggleChanged}\n      ></paper-toggle-button>\n    `;\n  }\n\n  protected firstUpdated(changedProps) {\n    super.firstUpdated(changedProps);\n    this.addEventListener(\"click\", (ev) => ev.stopPropagation());\n  }\n\n  protected updated(changedProps: PropertyValues): void {\n    if (changedProps.has(\"stateObj\")) {\n      this._isOn = isOn(this.stateObj);\n    }\n  }\n\n  private _toggleChanged(ev) {\n    const newVal = ev.target.checked;\n\n    if (newVal !== this._isOn) {\n      this._callService(newVal);\n    }\n  }\n\n  private _turnOn() {\n    this._callService(true);\n  }\n\n  private _turnOff() {\n    this._callService(false);\n  }\n\n  // We will force a re-render after a successful call to re-sync the toggle\n  // with the state. It will be out of sync if our service call did not\n  // result in the entity to be turned on. Since the state is not changing,\n  // the resync is not called automatic.\n  private async _callService(turnOn): Promise<void> {\n    if (!this.hass || !this.stateObj) {\n      return;\n    }\n    forwardHaptic(\"light\");\n    const stateDomain = computeStateDomain(this.stateObj);\n    let serviceDomain;\n    let service;\n\n    if (stateDomain === \"lock\") {\n      serviceDomain = \"lock\";\n      service = turnOn ? \"unlock\" : \"lock\";\n    } else if (stateDomain === \"cover\") {\n      serviceDomain = \"cover\";\n      service = turnOn ? \"open_cover\" : \"close_cover\";\n    } else if (stateDomain === \"group\") {\n      serviceDomain = \"homeassistant\";\n      service = turnOn ? \"turn_on\" : \"turn_off\";\n    } else {\n      serviceDomain = stateDomain;\n      service = turnOn ? \"turn_on\" : \"turn_off\";\n    }\n\n    const currentState = this.stateObj;\n\n    // Optimistic update.\n    this._isOn = turnOn;\n\n    await this.hass.callService(serviceDomain, service, {\n      entity_id: this.stateObj.entity_id,\n    });\n\n    setTimeout(async () => {\n      // If after 2 seconds we have not received a state update\n      // reset the switch to it's original state.\n      if (this.stateObj === currentState) {\n        this._isOn = isOn(this.stateObj);\n      }\n    }, 2000);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        white-space: nowrap;\n        min-width: 38px;\n      }\n      paper-icon-button {\n        color: var(\n          --paper-icon-button-inactive-color,\n          var(--primary-text-color)\n        );\n        transition: color 0.5s;\n      }\n      paper-icon-button[state-active] {\n        color: var(--paper-icon-button-active-color, var(--primary-color));\n      }\n      paper-toggle-button {\n        cursor: pointer;\n        --paper-toggle-button-label-spacing: 0;\n        padding: 13px 5px;\n        margin: -4px -5px;\n      }\n    `;\n  }\n}\n\ncustomElements.define(\"ha-entity-toggle\", HaEntityToggle);\n"],"sourceRoot":""}