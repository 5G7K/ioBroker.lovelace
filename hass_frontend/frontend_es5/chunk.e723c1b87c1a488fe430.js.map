{"version":3,"sources":["webpack:///./src/mixins/events-mixin.js","webpack:///./src/resources/markdown_worker.ts","webpack:///./src/components/ha-markdown.ts","webpack:///./src/mixins/localize-mixin.js","webpack:///./src/components/ha-card.ts","webpack:///./src/components/ha-relative-time.js","webpack:///./src/common/datetime/relative_time.ts","webpack:///./src/dialogs/notifications/notification-item-template.ts","webpack:///./src/components/ha-paper-icon-button-prev.ts","webpack:///./src/dialogs/notifications/configurator-notification-item.ts","webpack:///./src/dialogs/notifications/persistent-notification-item.ts","webpack:///./src/dialogs/notifications/notification-item.ts","webpack:///./src/dialogs/notifications/notification-drawer.js"],"names":["__webpack_require__","d","__webpack_exports__","EventsMixin","_polymer_polymer_lib_utils_mixin__WEBPACK_IMPORTED_MODULE_0__","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_1__","Object","superClass","[object Object]","type","detail","options","node","this","addMethods","methods","module","exports","w","Worker","p","name","worker","_super","HaMarkdown","_this","apply","arguments","content","allowSvg","_resize","_common_dom_fire_event__WEBPACK_IMPORTED_MODULE_3__","tslib__WEBPACK_IMPORTED_MODULE_0__","prototype","update","changedProps","call","workerize_loader_resources_markdown_worker__WEBPACK_IMPORTED_MODULE_2___default","_render","_a","renderMarkdown","breaks","gfm","tables","innerHTML","_b","sent","walker","document","createTreeWalker","nextNode","currentNode","HTMLAnchorElement","host","location","target","rel","addEventListener","lit_element__WEBPACK_IMPORTED_MODULE_1__","Boolean","properties","hass","localize","Function","computed","HaCard","defineProperty","templateObject_1","render","templateObject_4","header","templateObject_2","templateObject_3","customElements","define","_polymer_polymer_lib_legacy_polymer_dom__WEBPACK_IMPORTED_MODULE_0__","_polymer_polymer_polymer_element__WEBPACK_IMPORTED_MODULE_1__","_common_datetime_relative_time__WEBPACK_IMPORTED_MODULE_2__","_mixins_localize_mixin__WEBPACK_IMPORTED_MODULE_3__","datetime","String","observer","datetimeObj","parsedDateTime","super","updateRelative","bind","connectedCallback","updateInterval","setInterval","disconnectedCallback","clearInterval","newVal","Date","root","relativeTime","tests","langKey","dateObj","timeDesc","delta","compareTime","getTime","tense","Math","abs","i","length","floor","undefined","includeTense","HuiNotificationItemTemplate","tslib_es6","lit_element","ha_paper_icon_button_prev_HaPaperIconButtonPrev","HuiConfiguratorNotificationItem","notification","configurator_notification_item_templateObject_2","attributes","friendly_name","_handleClick","state","configurator_notification_item_templateObject_1","fire_event","entityId","entity_id","HuiPersistentNotificationItem","persistent_notification_item_templateObject_2","title","notification_id","message","created_at","_computeTooltip","_handleDismiss","persistent_notification_item_templateObject_1","callService","toLocaleDateString","language","year","month","day","minute","hour","HuiNotificationItem","shouldUpdate","has","notification_item_templateObject_2","notification_item_templateObject_3","notification_item_templateObject_1","HaPaperIconButtonPrev","setTimeout","icon","window","getComputedStyle","direction","get","notification_drawer_HuiNotificationDrawer","events_mixin","localize_mixin","polymer_element","template","html_tag","open","notifications","Array","_notificationsBackend","value","ready","ev","stopPropagation","_unsubNotifications","persistent_notification","connection","notificationsBackend","configuratorEntities","keys","states","filter","compute_domain","map","concat","narrow","style","setProperty","innerWidth","$","drawer"],"mappings":"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","file":"chunk.e723c1b87c1a488fe430.js","sourcesContent":["import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n\nimport { fireEvent } from \"../common/dom/fire_event\";\n\n// Polymer legacy event helpers used courtesy of the Polymer project.\n//\n// Copyright (c) 2017 The Polymer Authors. All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//    * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//    * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//    * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n/* @polymerMixin */\nexport const EventsMixin = dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      /**\n   * Dispatches a custom event with an optional detail value.\n   *\n   * @param {string} type Name of event type.\n   * @param {*=} detail Detail value containing event-specific\n   *   payload.\n   * @param {{ bubbles: (boolean|undefined),\n               cancelable: (boolean|undefined),\n                composed: (boolean|undefined) }=}\n    *  options Object specifying options.  These may include:\n    *  `bubbles` (boolean, defaults to `true`),\n    *  `cancelable` (boolean, defaults to false), and\n    *  `node` on which to fire the event (HTMLElement, defaults to `this`).\n    * @return {Event} The new event that was fired.\n    */\n      fire(type, detail, options) {\n        options = options || {};\n        return fireEvent(options.node || this, type, detail, options);\n      }\n    }\n);\n","\n\t\t\t\tvar addMethods = require(\"../../node_modules/workerize-loader/dist/rpc-wrapper.js\")\n\t\t\t\tvar methods = [\"renderMarkdown\"]\n\t\t\t\tmodule.exports = function() {\n\t\t\t\t\tvar w = new Worker(__webpack_public_path__ + \"ba6fc9305bb522eb787e.worker.js\", { name: \"[hash].worker.js\" })\n\t\t\t\t\taddMethods(w, methods)\n\t\t\t\t\t\n\t\t\t\t\treturn w\n\t\t\t\t}\n\t\t\t","import { UpdatingElement, property, customElement } from \"lit-element\";\n// eslint-disable-next-line import/no-webpack-loader-syntax\n// @ts-ignore\n// tslint:disable-next-line: no-implicit-dependencies\nimport markdownWorker from \"workerize-loader!../resources/markdown_worker\";\nimport { fireEvent } from \"../common/dom/fire_event\";\n\nlet worker: any | undefined;\n\n@customElement(\"ha-markdown\")\nclass HaMarkdown extends UpdatingElement {\n  @property() public content = \"\";\n  @property({ type: Boolean }) public allowSvg = false;\n\n  protected update(changedProps) {\n    super.update(changedProps);\n\n    if (!worker) {\n      worker = markdownWorker();\n    }\n\n    this._render();\n  }\n\n  private async _render() {\n    this.innerHTML = await worker.renderMarkdown(\n      this.content,\n      {\n        breaks: true,\n        gfm: true,\n        tables: true,\n      },\n      {\n        allowSvg: this.allowSvg,\n      }\n    );\n\n    this._resize();\n\n    const walker = document.createTreeWalker(\n      this,\n      1 /* SHOW_ELEMENT */,\n      null,\n      false\n    );\n\n    while (walker.nextNode()) {\n      const node = walker.currentNode;\n\n      // Open external links in a new window\n      if (\n        node instanceof HTMLAnchorElement &&\n        node.host !== document.location.host\n      ) {\n        node.target = \"_blank\";\n\n        // protect referrer on external links and deny window.opener access for security reasons\n        // (see https://mathiasbynens.github.io/rel-noopener/)\n        node.rel = \"noreferrer noopener\";\n\n        // Fire a resize event when images loaded to notify content resized\n      } else if (node) {\n        node.addEventListener(\"load\", this._resize);\n      }\n    }\n  }\n\n  private _resize = () => fireEvent(this, \"iron-resize\");\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-markdown\": HaMarkdown;\n  }\n}\n","import { dedupingMixin } from \"@polymer/polymer/lib/utils/mixin\";\n/**\n * Polymer Mixin to enable a localize function powered by language/resources from hass object.\n *\n * @polymerMixin\n */\nexport default dedupingMixin(\n  (superClass) =>\n    class extends superClass {\n      static get properties() {\n        return {\n          hass: Object,\n\n          /**\n           * Translates a string to the current `language`. Any parameters to the\n           * string should be passed in order, as follows:\n           * `localize(stringKey, param1Name, param1Value, param2Name, param2Value)`\n           */\n          localize: {\n            type: Function,\n            computed: \"__computeLocalize(hass.localize)\",\n          },\n        };\n      }\n\n      __computeLocalize(localize) {\n        return localize;\n      }\n    }\n);\n","import {\n  css,\n  CSSResult,\n  html,\n  LitElement,\n  property,\n  TemplateResult,\n} from \"lit-element\";\n\nclass HaCard extends LitElement {\n  @property() public header?: string;\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(\n          --ha-card-background,\n          var(--paper-card-background-color, white)\n        );\n        border-radius: var(--ha-card-border-radius, 2px);\n        box-shadow: var(\n          --ha-card-box-shadow,\n          0 2px 2px 0 rgba(0, 0, 0, 0.14),\n          0 1px 5px 0 rgba(0, 0, 0, 0.12),\n          0 3px 1px -2px rgba(0, 0, 0, 0.2)\n        );\n        color: var(--primary-text-color);\n        display: block;\n        transition: all 0.3s ease-out;\n        position: relative;\n      }\n\n      .card-header,\n      :host ::slotted(.card-header) {\n        color: var(--ha-card-header-color, --primary-text-color);\n        font-family: var(--ha-card-header-font-family, inherit);\n        font-size: var(--ha-card-header-font-size, 24px);\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        padding: 24px 16px 16px;\n        display: block;\n      }\n\n      :host ::slotted(.card-content:not(:first-child)),\n      slot:not(:first-child)::slotted(.card-content) {\n        padding-top: 0px;\n        margin-top: -8px;\n      }\n\n      :host ::slotted(.card-content) {\n        padding: 16px;\n      }\n\n      :host ::slotted(.card-actions) {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n    `;\n  }\n\n  protected render(): TemplateResult {\n    return html`\n      ${this.header\n        ? html`\n            <div class=\"card-header\">${this.header}</div>\n          `\n        : html``}\n      <slot></slot>\n    `;\n  }\n}\n\ncustomElements.define(\"ha-card\", HaCard);\n","import { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport relativeTime from \"../common/datetime/relative_time\";\n\nimport LocalizeMixin from \"../mixins/localize-mixin\";\n\n/*\n * @appliesMixin LocalizeMixin\n */\nclass HaRelativeTime extends LocalizeMixin(PolymerElement) {\n  static get properties() {\n    return {\n      hass: Object,\n      datetime: {\n        type: String,\n        observer: \"datetimeChanged\",\n      },\n\n      datetimeObj: {\n        type: Object,\n        observer: \"datetimeObjChanged\",\n      },\n\n      parsedDateTime: Object,\n    };\n  }\n\n  constructor() {\n    super();\n    this.updateRelative = this.updateRelative.bind(this);\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    // update every 60 seconds\n    this.updateInterval = setInterval(this.updateRelative, 60000);\n  }\n\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    clearInterval(this.updateInterval);\n  }\n\n  datetimeChanged(newVal) {\n    this.parsedDateTime = newVal ? new Date(newVal) : null;\n\n    this.updateRelative();\n  }\n\n  datetimeObjChanged(newVal) {\n    this.parsedDateTime = newVal;\n\n    this.updateRelative();\n  }\n\n  updateRelative() {\n    const root = dom(this);\n    if (!this.parsedDateTime) {\n      root.innerHTML = this.localize(\"ui.components.relative_time.never\");\n    } else {\n      root.innerHTML = relativeTime(this.parsedDateTime, this.localize);\n    }\n  }\n}\n\ncustomElements.define(\"ha-relative-time\", HaRelativeTime);\n","import { LocalizeFunc } from \"../translations/localize\";\n\n/**\n * Calculate a string representing a date object as relative time from now.\n *\n * Example output: 5 minutes ago, in 3 days.\n */\nconst tests = [60, 60, 24, 7];\nconst langKey = [\"second\", \"minute\", \"hour\", \"day\"];\n\nexport default function relativeTime(\n  dateObj: Date,\n  localize: LocalizeFunc,\n  options: {\n    compareTime?: Date;\n    includeTense?: boolean;\n  } = {}\n): string {\n  const compareTime = options.compareTime || new Date();\n  let delta = (compareTime.getTime() - dateObj.getTime()) / 1000;\n  const tense = delta >= 0 ? \"past\" : \"future\";\n  delta = Math.abs(delta);\n\n  let timeDesc;\n\n  for (let i = 0; i < tests.length; i++) {\n    if (delta < tests[i]) {\n      delta = Math.floor(delta);\n      timeDesc = localize(\n        `ui.components.relative_time.duration.${langKey[i]}`,\n        \"count\",\n        delta\n      );\n      break;\n    }\n\n    delta /= tests[i];\n  }\n\n  if (timeDesc === undefined) {\n    delta = Math.floor(delta);\n    timeDesc = localize(\n      \"ui.components.relative_time.duration.week\",\n      \"count\",\n      delta\n    );\n  }\n\n  return options.includeTense === false\n    ? timeDesc\n    : localize(`ui.components.relative_time.${tense}`, \"time\", timeDesc);\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport \"../../components/ha-card\";\n\n@customElement(\"notification-item-template\")\nexport class HuiNotificationItemTemplate extends LitElement {\n  protected render(): TemplateResult | void {\n    return html`\n      <ha-card>\n        <div class=\"header\"><slot name=\"header\"></slot></div>\n        <div class=\"contents\"><slot></slot></div>\n        <div class=\"actions\"><slot name=\"actions\"></slot></div>\n      </ha-card>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .contents {\n        padding: 16px;\n        -ms-user-select: text;\n        -webkit-user-select: text;\n        -moz-user-select: text;\n        user-select: text;\n      }\n\n      ha-card .header {\n        /* start paper-font-headline style */\n        font-family: \"Roboto\", \"Noto\", sans-serif;\n        -webkit-font-smoothing: antialiased; /* OS X subpixel AA bleed bug */\n        text-rendering: optimizeLegibility;\n        font-size: 24px;\n        font-weight: 400;\n        letter-spacing: -0.012em;\n        line-height: 32px;\n        /* end paper-font-headline style */\n\n        color: var(--primary-text-color);\n        padding: 16px 16px 0;\n      }\n\n      .actions {\n        border-top: 1px solid #e8e8e8;\n        padding: 5px 16px;\n      }\n\n      ::slotted(.primary) {\n        color: var(--primary-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"notification-item-template\": HuiNotificationItemTemplate;\n  }\n}\n","import { Constructor } from \"lit-element\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\n// Not duplicate, this is for typing.\n// tslint:disable-next-line\nimport { PaperIconButtonElement } from \"@polymer/paper-icon-button/paper-icon-button\";\n\nconst paperIconButtonClass = customElements.get(\n  \"paper-icon-button\"\n) as Constructor<PaperIconButtonElement>;\n\nexport class HaPaperIconButtonPrev extends paperIconButtonClass {\n  public connectedCallback() {\n    super.connectedCallback();\n\n    // wait to check for direction since otherwise direction is wrong even though top level is RTL\n    setTimeout(() => {\n      this.icon =\n        window.getComputedStyle(this).direction === \"ltr\"\n          ? \"hass:chevron-left\"\n          : \"hass:chevron-right\";\n    }, 100);\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-icon-button-prev\": HaPaperIconButtonPrev;\n  }\n}\n\ncustomElements.define(\"ha-paper-icon-button-prev\", HaPaperIconButtonPrev);\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\n\nimport \"./notification-item-template\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { fireEvent } from \"../../common/dom/fire_event\";\nimport { PersitentNotificationEntity } from \"../../data/persistent_notification\";\n\n@customElement(\"configurator-notification-item\")\nexport class HuiConfiguratorNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: PersitentNotificationEntity;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return html`\n      <notification-item-template>\n        <span slot=\"header\">${this.hass.localize(\"domain.configurator\")}</span>\n\n        <div>\n          ${this.hass.localize(\n            \"ui.notification_drawer.click_to_configure\",\n            \"entity\",\n            this.notification.attributes.friendly_name\n          )}\n        </div>\n\n        <mwc-button slot=\"actions\" @click=\"${this._handleClick}\"\n          >${this.hass.localize(\n            `state.configurator.${this.notification.state}`\n          )}</mwc-button\n        >\n      </notification-item-template>\n    `;\n  }\n\n  private _handleClick(): void {\n    fireEvent(this, \"hass-more-info\", {\n      entityId: this.notification!.entity_id,\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"configurator-notification-item\": HuiConfiguratorNotificationItem;\n  }\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-tooltip/paper-tooltip\";\n\nimport \"../../components/ha-relative-time\";\nimport \"../../components/ha-markdown\";\nimport \"./notification-item-template\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { PersistentNotification } from \"../../data/persistent_notification\";\n\n@customElement(\"persistent-notification-item\")\nexport class HuiPersistentNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: PersistentNotification;\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return html`\n      <notification-item-template>\n        <span slot=\"header\">\n          ${this.notification.title || this.notification.notification_id}\n        </span>\n\n        <ha-markdown content=\"${this.notification.message}\"></ha-markdown>\n\n        <div class=\"time\">\n          <span>\n            <ha-relative-time\n              .hass=\"${this.hass}\"\n              .datetime=\"${this.notification.created_at}\"\n            ></ha-relative-time>\n            <paper-tooltip\n              >${this._computeTooltip(\n                this.hass,\n                this.notification\n              )}</paper-tooltip\n            >\n          </span>\n        </div>\n\n        <mwc-button slot=\"actions\" @click=\"${this._handleDismiss}\"\n          >${this.hass.localize(\n            \"ui.card.persistent_notification.dismiss\"\n          )}</mwc-button\n        >\n      </notification-item-template>\n    `;\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      .time {\n        display: flex;\n        justify-content: flex-end;\n        margin-top: 6px;\n      }\n      ha-relative-time {\n        color: var(--secondary-text-color);\n      }\n      a {\n        color: var(--primary-color);\n      }\n      ha-markdown {\n        overflow-wrap: break-word;\n      }\n    `;\n  }\n\n  private _handleDismiss(): void {\n    this.hass!.callService(\"persistent_notification\", \"dismiss\", {\n      notification_id: this.notification!.notification_id,\n    });\n  }\n\n  private _computeTooltip(\n    hass: HomeAssistant,\n    notification: PersistentNotification\n  ): string | undefined {\n    if (!hass || !notification) {\n      return undefined;\n    }\n\n    const d = new Date(notification.created_at!);\n    return d.toLocaleDateString(hass.language, {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n      minute: \"numeric\",\n      hour: \"numeric\",\n    });\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"persistent-notification-item\": HuiPersistentNotificationItem;\n  }\n}\n","import {\n  LitElement,\n  property,\n  customElement,\n  PropertyValues,\n  TemplateResult,\n  html,\n} from \"lit-element\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\n\nimport \"./configurator-notification-item\";\nimport \"./persistent-notification-item\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { PersistentNotification } from \"../../data/persistent_notification\";\n\n@customElement(\"notification-item\")\nexport class HuiNotificationItem extends LitElement {\n  @property() public hass?: HomeAssistant;\n\n  @property() public notification?: HassEntity | PersistentNotification;\n\n  protected shouldUpdate(changedProps: PropertyValues): boolean {\n    if (!this.hass || !this.notification || changedProps.has(\"notification\")) {\n      return true;\n    }\n\n    return false;\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.notification) {\n      return html``;\n    }\n\n    return \"entity_id\" in this.notification\n      ? html`\n          <configurator-notification-item\n            .hass=\"${this.hass}\"\n            .notification=\"${this.notification}\"\n          ></configurator-notification-item>\n        `\n      : html`\n          <persistent-notification-item\n            .hass=\"${this.hass}\"\n            .notification=\"${this.notification}\"\n          ></persistent-notification-item>\n        `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"notification-item\": HuiNotificationItem;\n  }\n}\n","import \"@polymer/app-layout/app-drawer/app-drawer\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\n\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"./notification-item\";\nimport \"../../components/ha-paper-icon-button-prev\";\n\nimport { EventsMixin } from \"../../mixins/events-mixin\";\nimport LocalizeMixin from \"../../mixins/localize-mixin\";\nimport { subscribeNotifications } from \"../../data/persistent_notification\";\nimport computeDomain from \"../../common/entity/compute_domain\";\n/*\n * @appliesMixin EventsMixin\n * @appliesMixin LocalizeMixin\n */\nexport class HuiNotificationDrawer extends EventsMixin(\n  LocalizeMixin(PolymerElement)\n) {\n  static get template() {\n    return html`\n    <style include=\"paper-material-styles\">\n      app-toolbar {\n        color: var(--primary-text-color);\n        border-bottom: 1px solid var(--divider-color);\n        background-color: var(--primary-background-color);\n        min-height: 64px;\n        width: calc(100% - 32px);\n      }\n\n      .notifications {\n        overflow-y: auto;\n        padding-top: 16px;\n        height: calc(100% - 65px);\n        box-sizing: border-box;\n        background-color: var(--primary-background-color);\n        color: var(--primary-text-color);\n      }\n\n      .notification {\n        padding: 0 16px 16px;\n      }\n\n      .empty {\n        padding: 16px;\n        text-align: center;\n      }\n    </style>\n    <app-drawer id='drawer' opened=\"{{open}}\" disable-swipe align=\"start\">\n      <app-toolbar>\n        <div main-title>[[localize('ui.notification_drawer.title')]]</div>\n        <ha-paper-icon-button-prev on-click=\"_closeDrawer\"></paper-icon-button>\n      </app-toolbar>\n      <div class=\"notifications\">\n        <template is=\"dom-if\" if=\"[[!_empty(notifications)]]\">\n          <dom-repeat items=\"[[notifications]]\">\n            <template>\n              <div class=\"notification\">\n                <notification-item hass=\"[[hass]]\" notification=\"[[item]]\"></notification-item>\n              </div>\n            </template>\n          </dom-repeat>\n        </template>\n        <template is=\"dom-if\" if=\"[[_empty(notifications)]]\">\n          <div class=\"empty\">[[localize('ui.notification_drawer.empty')]]<div>\n        </template>\n      </div>\n    </app-drawer>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      open: {\n        type: Boolean,\n        observer: \"_openChanged\",\n      },\n      notifications: {\n        type: Array,\n        computed: \"_computeNotifications(open, hass, _notificationsBackend)\",\n      },\n      _notificationsBackend: {\n        type: Array,\n        value: [],\n      },\n    };\n  }\n\n  ready() {\n    super.ready();\n    window.addEventListener(\"location-changed\", () => {\n      // close drawer when we navigate away.\n      if (this.open) {\n        this.open = false;\n      }\n    });\n  }\n\n  _closeDrawer(ev) {\n    ev.stopPropagation();\n    this.open = false;\n  }\n\n  _empty(notifications) {\n    return notifications.length === 0;\n  }\n\n  _openChanged(open) {\n    if (open) {\n      // Render closed then animate open\n      this._unsubNotifications = subscribeNotifications(\n        this.hass.connection,\n        (notifications) => {\n          this._notificationsBackend = notifications;\n        }\n      );\n    } else if (this._unsubNotifications) {\n      this._unsubNotifications();\n      this._unsubNotifications = undefined;\n    }\n  }\n\n  _computeNotifications(open, hass, notificationsBackend) {\n    if (!open) {\n      return [];\n    }\n\n    const configuratorEntities = Object.keys(hass.states)\n      .filter((entityId) => computeDomain(entityId) === \"configurator\")\n      .map((entityId) => hass.states[entityId]);\n\n    return notificationsBackend.concat(configuratorEntities);\n  }\n\n  showDialog({ narrow }) {\n    this.style.setProperty(\n      \"--app-drawer-width\",\n      narrow ? window.innerWidth + \"px\" : \"500px\"\n    );\n    this.$.drawer.open();\n  }\n}\ncustomElements.define(\"notification-drawer\", HuiNotificationDrawer);\n"],"sourceRoot":""}