{"version":3,"sources":["webpack:///./src/common/entity/compute_state_domain.ts","webpack:///./src/components/entity/state-badge.ts"],"names":["computeStateDomain","stateObj","computeDomain","entity_id","StateBadge","property","query","html","state","overrideIcon","stateIcon","changedProps","has","iconStyle","color","filter","hostStyle","backgroundImage","attributes","entity_picture","display","hs_color","hue","sat","brightness","errorMessage","console","warn","Object","assign","_icon","style","css","LitElement","customElements","define"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAEe,SAASA,kBAAT,CAA4BC,QAA5B,EAAkD;AAC/D,SAAOC,+DAAa,CAACD,QAAQ,CAACE,SAAV,CAApB;AACD,C;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACLD;AAUA;AACA;AACA;;IAMMC,U;MAAAA,U;;;;;;;;;;;;;;;;;;;;;;;;;;;OAAAA,U;;;mBACHC,4DAAQ,E;;;;;mBACRA,4DAAQ,E;;;;;mBACRC,yDAAK,CAAC,SAAD,C;;;;;;aAEN,kBAA0C;AACxC,YAAML,QAAQ,GAAG,KAAKA,QAAtB;;AAEA,YAAI,CAACA,QAAL,EAAe;AACb,iBAAOM,wDAAP;AACD;;AAED,eAAOA,wDAAP,qBAGkBP,mFAAkB,CAACC,QAAD,CAHpC,EAIiBA,QAAQ,CAACO,KAJ1B,EAKY,KAAKC,YAAL,IAAqBC,yEAAS,CAACT,QAAD,CAL1C;AAQD;;;;aAED,iBAAkBU,YAAlB,EAAgD;AAC9C,YAAI,CAACA,YAAY,CAACC,GAAb,CAAiB,UAAjB,CAAD,IAAiC,CAAC,KAAKX,QAA3C,EAAqD;AACnD;AACD;;AACD,YAAMA,QAAQ,GAAG,KAAKA,QAAtB;AAEA,YAAMY,SAAuC,GAAG;AAC9CC,eAAK,EAAE,EADuC;AAE9CC,gBAAM,EAAE;AAFsC,SAAhD;AAIA,YAAMC,SAAuC,GAAG;AAC9CC,yBAAe,EAAE;AAD6B,SAAhD;;AAGA,YAAIhB,QAAJ,EAAc;AACZ;AACA,cAAIA,QAAQ,CAACiB,UAAT,CAAoBC,cAApB,IAAsC,CAAC,KAAKV,YAAhD,EAA8D;AAC5DO,qBAAS,CAACC,eAAV,GACE,SAAShB,QAAQ,CAACiB,UAAT,CAAoBC,cAA7B,GAA8C,GADhD;AAEAN,qBAAS,CAACO,OAAV,GAAoB,MAApB;AACD,WAJD,MAIO;AACL,gBAAInB,QAAQ,CAACiB,UAAT,CAAoBG,QAAxB,EAAkC;AAChC,kBAAMC,GAAG,GAAGrB,QAAQ,CAACiB,UAAT,CAAoBG,QAApB,CAA6B,CAA7B,CAAZ;AACA,kBAAME,GAAG,GAAGtB,QAAQ,CAACiB,UAAT,CAAoBG,QAApB,CAA6B,CAA7B,CAAZ;;AACA,kBAAIE,GAAG,GAAG,EAAV,EAAc;AACZV,yBAAS,CAACC,KAAV,iBAAyBQ,GAAzB,qBAAuC,MAAMC,GAAG,GAAG,CAAnD;AACD;AACF;;AACD,gBAAItB,QAAQ,CAACiB,UAAT,CAAoBM,UAAxB,EAAoC;AAClC,kBAAMA,UAAU,GAAGvB,QAAQ,CAACiB,UAAT,CAAoBM,UAAvC;;AACA,kBAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,oBAAMC,YAAY,kEAChBxB,QAAQ,CAACE,SADO,+CAEkBqB,UAFlB,gBAEiCA,UAFjC,MAAlB,CADkC,CAIlC;;AACAE,uBAAO,CAACC,IAAR,CAAaF,YAAb;AACD,eARiC,CASlC;;;AACAZ,uBAAS,CAACE,MAAV,wBAAiC,CAACS,UAAU,GAAG,GAAd,IAAqB,CAAtD;AACD;AACF;AACF;;AACDI,cAAM,CAACC,MAAP,CAAc,KAAKC,KAAL,CAAWC,KAAzB,EAAgClB,SAAhC;AACAe,cAAM,CAACC,MAAP,CAAc,KAAKE,KAAnB,EAA0Bf,SAA1B;AACD;;;;;aAED,kBAA+B;AAC7B,eAAOgB,uDAAP;AA+BD;;;GAnGsBC,sD;;AA4GzBC,cAAc,CAACC,MAAf,CAAsB,aAAtB,EAAqC/B,UAArC,E","file":"0.chunk.js","sourcesContent":["import { HassEntity } from \"home-assistant-js-websocket\";\nimport computeDomain from \"./compute_domain\";\n\nexport default function computeStateDomain(stateObj: HassEntity) {\n  return computeDomain(stateObj.entity_id);\n}\n","import {\n  LitElement,\n  TemplateResult,\n  css,\n  CSSResult,\n  html,\n  property,\n  PropertyValues,\n  query,\n} from \"lit-element\";\nimport \"../ha-icon\";\nimport computeStateDomain from \"../../common/entity/compute_state_domain\";\nimport stateIcon from \"../../common/entity/state_icon\";\nimport { HassEntity } from \"home-assistant-js-websocket\";\n// Not duplicate, this is for typing.\n// tslint:disable-next-line\nimport { HaIcon } from \"../ha-icon\";\n\nclass StateBadge extends LitElement {\n  @property() public stateObj?: HassEntity;\n  @property() public overrideIcon?: string;\n  @query(\"ha-icon\") private _icon!: HaIcon;\n\n  protected render(): TemplateResult | void {\n    const stateObj = this.stateObj;\n\n    if (!stateObj) {\n      return html``;\n    }\n\n    return html`\n      <ha-icon\n        id=\"icon\"\n        data-domain=${computeStateDomain(stateObj)}\n        data-state=${stateObj.state}\n        .icon=${this.overrideIcon || stateIcon(stateObj)}\n      ></ha-icon>\n    `;\n  }\n\n  protected updated(changedProps: PropertyValues) {\n    if (!changedProps.has(\"stateObj\") || !this.stateObj) {\n      return;\n    }\n    const stateObj = this.stateObj;\n\n    const iconStyle: Partial<CSSStyleDeclaration> = {\n      color: \"\",\n      filter: \"\",\n    };\n    const hostStyle: Partial<CSSStyleDeclaration> = {\n      backgroundImage: \"\",\n    };\n    if (stateObj) {\n      // hide icon if we have entity picture\n      if (stateObj.attributes.entity_picture && !this.overrideIcon) {\n        hostStyle.backgroundImage =\n          \"url(\" + stateObj.attributes.entity_picture + \")\";\n        iconStyle.display = \"none\";\n      } else {\n        if (stateObj.attributes.hs_color) {\n          const hue = stateObj.attributes.hs_color[0];\n          const sat = stateObj.attributes.hs_color[1];\n          if (sat > 10) {\n            iconStyle.color = `hsl(${hue}, 100%, ${100 - sat / 2}%)`;\n          }\n        }\n        if (stateObj.attributes.brightness) {\n          const brightness = stateObj.attributes.brightness;\n          if (typeof brightness !== \"number\") {\n            const errorMessage = `Type error: state-badge expected number, but type of ${\n              stateObj.entity_id\n            }.attributes.brightness is ${typeof brightness} (${brightness})`;\n            // tslint:disable-next-line\n            console.warn(errorMessage);\n          }\n          // lowest brighntess will be around 50% (that's pretty dark)\n          iconStyle.filter = `brightness(${(brightness + 245) / 5}%)`;\n        }\n      }\n    }\n    Object.assign(this._icon.style, iconStyle);\n    Object.assign(this.style, hostStyle);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        position: relative;\n        display: inline-block;\n        width: 40px;\n        color: var(--paper-item-icon-color, #44739e);\n        border-radius: 50%;\n        height: 40px;\n        text-align: center;\n        background-size: cover;\n        line-height: 40px;\n      }\n\n      ha-icon {\n        transition: color 0.3s ease-in-out, filter 0.3s ease-in-out;\n      }\n\n      /* Color the icon if light or sun is on */\n      ha-icon[data-domain=\"light\"][data-state=\"on\"],\n      ha-icon[data-domain=\"switch\"][data-state=\"on\"],\n      ha-icon[data-domain=\"binary_sensor\"][data-state=\"on\"],\n      ha-icon[data-domain=\"fan\"][data-state=\"on\"],\n      ha-icon[data-domain=\"sun\"][data-state=\"above_horizon\"] {\n        color: var(--paper-item-icon-active-color, #fdd835);\n      }\n\n      /* Color the icon if unavailable */\n      ha-icon[data-state=\"unavailable\"] {\n        color: var(--state-icon-unavailable-color);\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"state-badge\": StateBadge;\n  }\n}\n\ncustomElements.define(\"state-badge\", StateBadge);\n"],"sourceRoot":""}