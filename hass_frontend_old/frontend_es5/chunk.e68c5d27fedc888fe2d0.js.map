{"version":3,"sources":["webpack:///./src/panels/lovelace/common/structs/struct.ts","webpack:///./src/panels/lovelace/common/structs/is-entity-id.ts","webpack:///./src/panels/lovelace/common/structs/is-icon.ts","webpack:///./src/resources/codemirror.ondemand.ts","webpack:///./src/components/ha-code-editor.ts","webpack:///./src/panels/lovelace/hui-editor.ts"],"names":["__webpack_require__","d","__webpack_exports__","struct","superstruct","types","entity-id","value","includes","icon","loaded","loadCodeMirror","_ref","regeneratorRuntime","mark","_callee","wrap","_context","prev","next","Promise","all","e","then","bind","abrupt","stop","apply","this","arguments","_decorate","customElement","_initialize","_UpdatingElement","HaCodeEditor","_UpdatingElement2","_getPrototypeOf2","_this","_classCallCheck","_len","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","concat","_assertThisInitialized","_inherits","F","kind","key","decorators","property","_value","codemirror","getValue","shadowRoot","querySelector","_get","prototype","refresh","autofocus","focus","changedProps","has","setOption","mode","setValue","_calcGutters","_setScrollBarDirection","classList","toggle","error","_load","_load2","codeMirror","_this2","sent","attachShadow","innerHTML","codeMirrorCss","lineNumbers","tabSize","viewportMargin","Infinity","extraKeys","Tab","Shift-Tab","gutters","on","_onChange","newValue","fireEvent","rtl","getWrapperElement","UpdatingElement","lovelaceStruct","title","views","resources","optional","html","_templateObject","_closeEditor","hass","localize","classMap","saved","_saving","_changed","_handleSave","computeRTL","_yamlChanged","yamlEditor","safeDump","lovelace","config","haStyle","css","_templateObject2","getDoc","isClean","_generation","window","onbeforeunload","confirm","closeEditor","deleteConfig","t0","alert","_callee2","_context2","showConfirmationDialog","text","confirmBtnText","cancelBtnText","_removeConfig","hasComments","safeLoad","t1","saveConfig","t2","changeGeneration","LitElement"],"mappings":"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","file":"chunk.e68c5d27fedc888fe2d0.js","sourcesContent":["import { superstruct } from \"superstruct\";\nimport { isEntityId } from \"./is-entity-id\";\nimport { isIcon } from \"./is-icon\";\n\nexport const struct = superstruct({\n  types: {\n    \"entity-id\": isEntityId,\n    icon: isIcon,\n  },\n});\n","export function isEntityId(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"entity id should be a string\";\n  }\n  if (!value.includes(\".\")) {\n    return \"entity id should be in the format 'domain.entity'\";\n  }\n  return true;\n}\n","export function isIcon(value: any): string | boolean {\n  if (typeof value !== \"string\") {\n    return \"icon should be a string\";\n  }\n  if (!value.includes(\":\")) {\n    return \"icon should be in the format 'mdi:icon'\";\n  }\n  return true;\n}\n","interface LoadedCodeMirror {\n  codeMirror: any;\n  codeMirrorCss: any;\n}\n\nlet loaded: Promise<LoadedCodeMirror>;\n\nexport const loadCodeMirror = async (): Promise<LoadedCodeMirror> => {\n  if (!loaded) {\n    loaded = import(/* webpackChunkName: \"codemirror\" */ \"./codemirror\");\n  }\n  return loaded;\n};\n","import { loadCodeMirror } from \"../resources/codemirror.ondemand\";\nimport { fireEvent } from \"../common/dom/fire_event\";\nimport {\n  UpdatingElement,\n  property,\n  customElement,\n  PropertyValues,\n} from \"lit-element\";\nimport { Editor } from \"codemirror\";\n\ndeclare global {\n  interface HASSDomEvents {\n    \"editor-save\": undefined;\n  }\n}\n\n@customElement(\"ha-code-editor\")\nexport class HaCodeEditor extends UpdatingElement {\n  public codemirror?: Editor;\n  @property() public mode?: string;\n  @property() public autofocus = false;\n  @property() public rtl = false;\n  @property() public error = false;\n  @property() private _value = \"\";\n\n  public set value(value: string) {\n    this._value = value;\n  }\n\n  public get value(): string {\n    return this.codemirror ? this.codemirror.getValue() : this._value;\n  }\n\n  public get hasComments(): boolean {\n    return this.shadowRoot!.querySelector(\"span.cm-comment\") ? true : false;\n  }\n\n  public connectedCallback() {\n    super.connectedCallback();\n    if (!this.codemirror) {\n      return;\n    }\n    this.codemirror.refresh();\n    if (this.autofocus !== false) {\n      this.codemirror.focus();\n    }\n  }\n\n  protected update(changedProps: PropertyValues): void {\n    super.update(changedProps);\n\n    if (!this.codemirror) {\n      return;\n    }\n\n    if (changedProps.has(\"mode\")) {\n      this.codemirror.setOption(\"mode\", this.mode);\n    }\n    if (changedProps.has(\"autofocus\")) {\n      this.codemirror.setOption(\"autofocus\", this.autofocus !== false);\n    }\n    if (changedProps.has(\"_value\") && this._value !== this.value) {\n      this.codemirror.setValue(this._value);\n    }\n    if (changedProps.has(\"rtl\")) {\n      this.codemirror.setOption(\"gutters\", this._calcGutters());\n      this._setScrollBarDirection();\n    }\n    if (changedProps.has(\"error\")) {\n      this.classList.toggle(\"error-state\", this.error);\n    }\n  }\n\n  protected firstUpdated(changedProps: PropertyValues): void {\n    super.firstUpdated(changedProps);\n    this._load();\n  }\n\n  private async _load(): Promise<void> {\n    const loaded = await loadCodeMirror();\n\n    const codeMirror = loaded.codeMirror;\n\n    const shadowRoot = this.attachShadow({ mode: \"open\" });\n\n    shadowRoot!.innerHTML = `\n    <style>\n      ${loaded.codeMirrorCss}\n      .CodeMirror {\n        height: var(--code-mirror-height, auto);\n        direction: var(--code-mirror-direction, ltr);\n      }\n      .CodeMirror-scroll {\n        max-height: var(--code-mirror-max-height, --code-mirror-height);\n      }\n      .CodeMirror-gutters {\n        border-right: 1px solid var(--paper-input-container-color, var(--secondary-text-color));\n        background-color: var(--paper-dialog-background-color, var(--primary-background-color));\n        transition: 0.2s ease border-right;\n      }\n      :host(.error-state) .CodeMirror-gutters {\n        border-color: var(--error-state-color, red);\n      }\n      .CodeMirror-focused .CodeMirror-gutters {\n        border-right: 2px solid var(--paper-input-container-focus-color, var(--primary-color));\n      }\n      .CodeMirror-linenumber {\n        color: var(--paper-dialog-color, var(--primary-text-color));\n      }\n      .rtl .CodeMirror-vscrollbar {\n        right: auto;\n        left: 0px;\n      }\n      .rtl-gutter {\n        width: 20px;\n      }\n    </style>`;\n\n    this.codemirror = codeMirror(shadowRoot, {\n      value: this._value,\n      lineNumbers: true,\n      tabSize: 2,\n      mode: this.mode,\n      autofocus: this.autofocus !== false,\n      viewportMargin: Infinity,\n      extraKeys: {\n        Tab: \"indentMore\",\n        \"Shift-Tab\": \"indentLess\",\n      },\n      gutters: this._calcGutters(),\n    });\n    this._setScrollBarDirection();\n    this.codemirror!.on(\"changes\", () => this._onChange());\n  }\n\n  private _onChange(): void {\n    const newValue = this.value;\n    if (newValue === this._value) {\n      return;\n    }\n    this._value = newValue;\n    fireEvent(this, \"value-changed\", { value: this._value });\n  }\n\n  private _calcGutters(): string[] {\n    return this.rtl ? [\"rtl-gutter\", \"CodeMirror-linenumbers\"] : [];\n  }\n\n  private _setScrollBarDirection(): void {\n    if (this.codemirror) {\n      this.codemirror.getWrapperElement().classList.toggle(\"rtl\", this.rtl);\n    }\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-code-editor\": HaCodeEditor;\n  }\n}\n","import {\n  customElement,\n  LitElement,\n  html,\n  TemplateResult,\n  CSSResult,\n  css,\n  property,\n} from \"lit-element\";\nimport { classMap } from \"lit-html/directives/class-map\";\nimport { safeDump, safeLoad } from \"js-yaml\";\n\nimport \"@polymer/app-layout/app-header-layout/app-header-layout\";\nimport \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport \"@material/mwc-button\";\nimport \"@polymer/paper-icon-button/paper-icon-button\";\nimport \"@polymer/paper-spinner/paper-spinner\";\n\nimport { struct } from \"./common/structs/struct\";\nimport { Lovelace } from \"./types\";\n\nimport \"../../components/ha-icon\";\nimport { haStyle } from \"../../resources/styles\";\nimport \"../../components/ha-code-editor\";\n// This is not a duplicate import, one is for types, one is for element.\n// tslint:disable-next-line\nimport { HaCodeEditor } from \"../../components/ha-code-editor\";\nimport { HomeAssistant } from \"../../types\";\nimport { computeRTL } from \"../../common/util/compute_rtl\";\nimport { LovelaceConfig } from \"../../data/lovelace\";\nimport { showConfirmationDialog } from \"../../dialogs/confirmation/show-dialog-confirmation\";\n\nconst lovelaceStruct = struct.interface({\n  title: \"string?\",\n  views: [\"object\"],\n  resources: struct.optional([\"object\"]),\n});\n\n@customElement(\"hui-editor\")\nclass LovelaceFullConfigEditor extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() public lovelace?: Lovelace;\n  @property() public closeEditor?: () => void;\n  @property() private _saving?: boolean;\n  @property() private _changed?: boolean;\n\n  private _generation = 1;\n\n  public render(): TemplateResult | void {\n    return html`\n      <app-header-layout>\n        <app-header>\n          <app-toolbar>\n            <paper-icon-button\n              icon=\"hass:close\"\n              @click=\"${this._closeEditor}\"\n            ></paper-icon-button>\n            <div main-title>\n              ${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.header\"\n              )}\n            </div>\n            <div\n              class=\"save-button\n              ${classMap({\n                saved: this._saving! === false || this._changed === true,\n              })}\"\n            >\n              ${this._changed\n                ? this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.unsaved_changes\"\n                  )\n                : this.hass!.localize(\n                    \"ui.panel.lovelace.editor.raw_editor.saved\"\n                  )}\n            </div>\n            <mwc-button\n              raised\n              @click=\"${this._handleSave}\"\n              .disabled=${!this._changed}\n              >${this.hass!.localize(\n                \"ui.panel.lovelace.editor.raw_editor.save\"\n              )}</mwc-button\n            >\n          </app-toolbar>\n        </app-header>\n        <div class=\"content\">\n          <ha-code-editor\n            mode=\"yaml\"\n            autofocus\n            .rtl=${computeRTL(this.hass)}\n            .hass=\"${this.hass}\"\n            @value-changed=\"${this._yamlChanged}\"\n            @editor-save=\"${this._handleSave}\"\n          >\n          </ha-code-editor>\n        </div>\n      </app-header-layout>\n    `;\n  }\n\n  protected firstUpdated() {\n    this.yamlEditor.value = safeDump(this.lovelace!.config);\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyle,\n      css`\n        :host {\n          --code-mirror-height: 100%;\n        }\n\n        app-header-layout {\n          height: 100vh;\n        }\n\n        app-toolbar {\n          background-color: var(--dark-background-color, #455a64);\n          color: var(--dark-text-color);\n        }\n\n        mwc-button[disabled] {\n          background-color: var(--mdc-theme-on-primary);\n          border-radius: 4px;\n        }\n\n        .comments {\n          font-size: 16px;\n        }\n\n        .content {\n          height: calc(100vh - 68px);\n        }\n\n        hui-code-editor {\n          height: 100%;\n        }\n\n        .save-button {\n          opacity: 0;\n          font-size: 14px;\n          padding: 0px 10px;\n        }\n\n        .saved {\n          opacity: 1;\n        }\n      `,\n    ];\n  }\n\n  private _yamlChanged() {\n    this._changed = !this.yamlEditor\n      .codemirror!.getDoc()\n      .isClean(this._generation);\n    if (this._changed && !window.onbeforeunload) {\n      window.onbeforeunload = () => {\n        return true;\n      };\n    } else if (!this._changed && window.onbeforeunload) {\n      window.onbeforeunload = null;\n    }\n  }\n\n  private _closeEditor() {\n    if (this._changed) {\n      if (\n        !confirm(\n          this.hass.localize(\n            \"ui.panel.lovelace.editor.raw_editor.confirm_unsaved_changes\"\n          )\n        )\n      ) {\n        return;\n      }\n    }\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _removeConfig() {\n    try {\n      await this.lovelace!.deleteConfig();\n    } catch (err) {\n      alert(\n        this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_remove\",\n          \"error\",\n          err\n        )\n      );\n    }\n    window.onbeforeunload = null;\n    if (this.closeEditor) {\n      this.closeEditor();\n    }\n  }\n\n  private async _handleSave() {\n    this._saving = true;\n\n    const value = this.yamlEditor.value;\n\n    if (!value) {\n      showConfirmationDialog(this, {\n        title: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.confirm_remove_config_title\"\n        ),\n        text: this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.confirm_remove_config_text\"\n        ),\n        confirmBtnText: this.hass.localize(\"ui.common.yes\"),\n        cancelBtnText: this.hass.localize(\"ui.common.no\"),\n        confirm: () => this._removeConfig(),\n      });\n      return;\n    }\n\n    if (this.yamlEditor.hasComments) {\n      if (\n        !confirm(\n          this.hass.localize(\n            \"ui.panel.lovelace.editor.raw_editor.confirm_unsaved_comments\"\n          )\n        )\n      ) {\n        return;\n      }\n    }\n\n    let config: LovelaceConfig;\n    try {\n      config = safeLoad(value);\n    } catch (err) {\n      alert(\n        this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_parse_yaml\",\n          \"error\",\n          err\n        )\n      );\n      this._saving = false;\n      return;\n    }\n    try {\n      config = lovelaceStruct(config);\n    } catch (err) {\n      alert(\n        this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_invalid_config\",\n          \"error\",\n          err\n        )\n      );\n      return;\n    }\n    try {\n      await this.lovelace!.saveConfig(config);\n    } catch (err) {\n      alert(\n        this.hass.localize(\n          \"ui.panel.lovelace.editor.raw_editor.error_save_yaml\",\n          \"error\",\n          err\n        )\n      );\n    }\n    this._generation = this.yamlEditor\n      .codemirror!.getDoc()\n      .changeGeneration(true);\n    window.onbeforeunload = null;\n    this._saving = false;\n    this._changed = false;\n  }\n\n  private get yamlEditor(): HaCodeEditor {\n    return this.shadowRoot!.querySelector(\"ha-code-editor\")! as HaCodeEditor;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-editor\": LovelaceFullConfigEditor;\n  }\n}\n"],"sourceRoot":""}