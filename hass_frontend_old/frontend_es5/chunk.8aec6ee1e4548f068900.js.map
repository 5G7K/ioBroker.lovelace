{"version":3,"sources":["webpack:///./src/components/ha-fab.ts","webpack:///./src/panels/lovelace/editor/select-view/show-select-view-dialog.ts","webpack:///./src/panels/lovelace/editor/card-editor/show-suggest-card-dialog.ts","webpack:///./src/panels/lovelace/editor/add-entities-to-view.ts","webpack:///./src/panels/lovelace/common/compute-unused-entities.ts","webpack:///./src/panels/lovelace/editor/unused-entities/hui-unused-entities.ts"],"names":["MwcFab","customElements","get","_decorate","customElement","_initialize","_MwcFab","F","_MwcFab2","HaFab","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_possibleConstructorReturn","_getPrototypeOf","call","apply","concat","_assertThisInitialized","_inherits","d","kind","key","value","classes","mdc-fab--mini","mini","mdc-fab--exited","exited","mdc-fab--extended","extended","showLabel","label","html","_templateObject","ripple","classMap","disabled","icon","showIconAtEnd","_templateObject2","showSelectViewDialog","element","selectViewDialogParams","fireEvent","dialogTag","dialogImport","Promise","all","__webpack_require__","e","then","bind","dialogParams","importsuggestCardDialog","showSuggestCardDialog","suggestCardDialogParams","addEntitiesToLovelaceView","_ref","_asyncToGenerator","regeneratorRuntime","mark","_callee2","hass","entities","lovelaceConfig","saveConfigFunc","_ref2","_panels$lovelace","wrap","_context2","prev","next","panels","lovelace","config","mode","abrupt","fetchConfig","connection","sent","t0","alert","localize","viewSelectedCallback","view","_ref3","_callee","newConfig","_context","saveConfig","stop","_x6","path","_x","_x2","_x3","_x4","_x5","EXCLUDED_DOMAINS","addFromAction","actionConfig","action","service_data","entity_id","entityIds","isArray","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","done","entityId","add","err","addEntityId","entity","camera_image","tap_action","hold_action","computeUsedEntities","Set","views","forEach","addEntities","obj","card","cards","elements","badges","badge","HuiUnusedEntities","_LitElement","_LitElement2","decorators","property","_this2","memoizeOne","narrow","columns","title","sortable","filterable","filterKey","direction","template","stateObj","_handleEntityClicked","friendly_name","domain","last_changed","type","lastChanged","changedProperties","_get","prototype","has","_getUnusedEntities","_this3","editMode","_templateObject4","_templateObject5","_templateObject6","_columns","_unusedEntities","map","states","Object","assign","computeStateName","computeDomain","_handleSelectionChanged","rtl","computeRTL","_addToLovelaceView","_templateObject3","usedEntities","_selectedEntities","_config","keys","filter","includes","split","sort","ev","changedSelection","detail","id","selected","push","index","indexOf","splice","target","closest","getAttribute","static","css","_templateObject7","LitElement"],"mappings":"m1EASA,IAAMA,EAASC,eAAeC,IAAI,i1LAGlCC,CAAA,CADCC,YAAc,WACf,SAAAC,EAAAC,GAAA,OAAAC,EAAA,SAAAC,GAAA,SAAAC,IAAA,IAAAC,EAAAC,+FAAAC,CAAAC,KAAAJ,GAAA,QAAAK,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAR,uEAAAS,CAAAP,MAAAH,EAAAW,EAAAZ,IAAAa,KAAAC,MAAAb,EAAA,CAAAG,MAAAW,OAAAP,KAAAZ,EAAAoB,EAAAd,MAAA,yOAAAe,CAAAjB,EAAAH,GAAAG,EAAA,GAAAkB,EAAA,EAAAC,KAAA,SAAAC,IAAA,SAAAC,MAGE,WACE,IAAMC,EAAU,CACdC,gBAAiBnB,KAAKoB,KACtBC,kBAAmBrB,KAAKsB,OACxBC,oBAAqBvB,KAAKwB,UAEtBC,EAA2B,KAAfzB,KAAK0B,OAAgB1B,KAAKwB,SAC5C,OAAOG,YAAPC,IAEeC,cACMC,YAASZ,GACblB,KAAK+B,SACJ/B,KAAK0B,OAAS1B,KAAKgC,KAE/BP,GAAazB,KAAKiC,cAAgBjC,KAAK0B,MAAQ,GAC/C1B,KAAKgC,KACHL,YADFO,IAEqBlC,KAAKgC,MAExB,GACFP,IAAczB,KAAKiC,cAAgBjC,KAAK0B,MAAQ,SAvB/BvC,0DCJdgD,EAAuB,SAClCC,EACAC,GAEAC,YAAUF,EAAS,cAAe,CAChCG,UAAW,yBACXC,aAAc,kBACZC,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,YAGFC,aAAcV,KCPZW,EAA0B,kBAC9BP,QAAAC,IAAA,CAAAC,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,GAAAD,EAAAC,EAAA,IAAAD,EAAAC,EAAA,MAAAC,KAAAF,EAAAG,KAAA,YAIWG,EAAwB,SACnCb,EACAc,GAEAZ,YAAUF,EAAS,cAAe,CAChCG,UAAW,0BACXC,aAAcQ,EACdD,aAAcG,+VCdX,IAAMC,EAAyB,eAAAC,EAAAC,EAAAC,mBAAAC,KAAG,SAAAC,EACvCpB,EACAqB,EACAC,EACAC,EACAC,GALuC,IAAAC,EAAAC,EAAA,OAAAR,mBAAAS,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UAOc,UAAjD,QAAAL,EAAA,QAAAC,EAACL,EAAMU,OAAOC,gBAAd,IAAAN,OAAA,EAACA,EAAuBO,cAAxB,IAAAR,OAAA,EAAAA,EAAwCS,MAPL,CAAAN,EAAAE,KAAA,eAQrCjB,EAAsBb,EAAS,CAC7BsB,aATmCM,EAAAO,OAAA,oBAalCZ,EAbkC,CAAAK,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAeZM,YAAYf,EAAKgB,YAAY,GAfjB,OAenCd,EAfmCK,EAAAU,KAAAV,EAAAE,KAAA,wBAAAF,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,SAiBnCY,MACEnB,EAAKoB,SACH,gEAnB+Bb,EAAAO,OAAA,kBAyBvCpC,EAAqBC,EAAS,CAC5BuB,iBACAmB,qBAAsB,SAACC,GAChBnB,IACHA,EAAc,eAAAoB,EAAA3B,EAAAC,mBAAAC,KAAG,SAAA0B,EAAOC,GAAP,OAAA5B,mBAAAS,KAAA,SAAAoB,GAAA,cAAAA,EAAAlB,KAAAkB,EAAAjB,MAAA,cAAAiB,EAAAlB,KAAA,EAAAkB,EAAAjB,KAAA,EAEPkB,YAAW3B,EAAOyB,GAFX,OAAAC,EAAAjB,KAAA,eAAAiB,EAAAlB,KAAA,EAAAkB,EAAAR,GAAAQ,EAAA,SAIbP,MACEnB,EAAKoB,SACH,uDANS,wBAAAM,EAAAE,SAAAJ,EAAA,iBAAH,gBAAAK,GAAA,OAAAN,EAAAtE,MAAAV,KAAAE,YAAA,IAahB+C,EAAsBb,EAAS,CAC7BuB,eAAgBA,EAChByB,WAAYxB,EACZ2B,KAAM,CAACR,GACPrB,gBA9CiC,yBAAAM,EAAAqB,SAAA7B,EAAA,kBAAH,gBAAAgC,EAAAC,EAAAC,EAAAC,EAAAC,GAAA,OAAAxC,EAAA1C,MAAAV,KAAAE,YAAA,wICNhC2F,EAAmB,CAAC,OAAQ,2BAE5BC,EAAgB,SAACpC,EAAuBqC,GAC5C,GAC0B,iBAAxBA,EAAaC,QACZD,EAAaE,cACbF,EAAaE,aAAaC,UAH7B,CAOA,IAAIC,EAAYJ,EAAaE,aAAaC,UACrC7F,MAAM+F,QAAQD,KACjBA,EAAY,CAACA,IAV4D,IAAAE,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IAY3E,QAAAC,EAAAC,EAAuBP,EAAvBQ,OAAAC,cAAAP,GAAAI,EAAAC,EAAAxC,QAAA2C,MAAAR,GAAA,EAAkC,KAAvBS,EAAuBL,EAAAxF,MAChCyC,EAASqD,IAAID,IAb4D,MAAAE,GAAAV,GAAA,EAAAC,EAAAS,EAAA,YAAAX,GAAA,MAAAK,EAAA,QAAAA,EAAA,oBAAAJ,EAAA,MAAAC,MAiBvEU,EAAc,SAACvD,EAAuBwD,GACpB,iBAAXA,GAKPA,EAAOA,QACTxD,EAASqD,IAAIG,EAAOA,QAElBA,EAAOC,cACTzD,EAASqD,IAAIG,EAAOC,cAElBD,EAAOE,YACTtB,EAAcpC,EAAUwD,EAAOE,YAE7BF,EAAOG,aACTvB,EAAcpC,EAAUwD,EAAOG,cAd/B3D,EAASqD,IAAIG,IAuCXI,EAAsB,SAACjD,GAC3B,IAAMX,EAAW,IAAI6D,IAErB,OADAlD,EAAOmD,MAAMC,QAAQ,SAAC1C,GAAD,OAvBH,SAAd2C,EAAehE,EAAuBiE,GACtCA,EAAIT,QACND,EAAYvD,EAAUiE,EAAIT,QAExBS,EAAIjE,UACNiE,EAAIjE,SAAS+D,QAAQ,SAACP,GAAD,OAAYD,EAAYvD,EAAUwD,KAErDS,EAAIC,MACNF,EAAYhE,EAAUiE,EAAIC,MAExBD,EAAIE,OACNF,EAAIE,MAAMJ,QAAQ,SAACG,GAAD,OAAUF,EAAYhE,EAAUkE,KAEhDD,EAAIG,UACNH,EAAIG,SAASL,QAAQ,SAACG,GAAD,OAAUF,EAAYhE,EAAUkE,KAEnDD,EAAII,QACNJ,EAAII,OAAON,QAAQ,SAACO,GAAD,OAAWf,EAAYvD,EAAUsE,KAMvBN,CAAYhE,EAAUqB,KAC9CrB,wtHC1BF,IAAMuE,80LAAb3I,CAAA,CADCC,YAAc,wBACf,SAAAC,EAAA0I,GAAA,IAAaD,EAAb,SAAAE,GAAA,SAAAF,IAAA,IAAApI,EAAAC,+FAAAC,CAAAC,KAAAiI,GAAA,QAAAhI,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAAA,OAAAR,uEAAAS,CAAAP,MAAAH,EAAAW,EAAAyH,IAAAxH,KAAAC,MAAAb,EAAA,CAAAG,MAAAW,OAAAP,KAAAZ,EAAAoB,EAAAd,MAAA,yOAAAe,CAAAoH,EAAAC,GAAAD,EAAA,UAAAvI,EAAauI,EAAbnH,EAAA,EAAAC,KAAA,QAAAqH,WAAA,CACGC,eADHrH,IAAA,WAAAC,WAAA,IAAAF,KAAA,QAAAqH,WAAA,CAGGC,eAHHrH,IAAA,OAAAC,WAAA,IAAAF,KAAA,QAAAqH,WAAA,CAKGC,eALHrH,IAAA,SAAAC,WAAA,IAAAF,KAAA,QAAAqH,WAAA,CAOGC,eAPHrH,IAAA,kBAAAC,MAAA,iBAOkD,KAPlD,CAAAF,KAAA,QAAAC,IAAA,oBAAAC,MAAA,iBASwC,KATxC,CAAAF,KAAA,MAAAC,IAAA,UAAAC,MAWE,WACE,OAAOjB,KAAKoE,SAAUC,SAZ1B,CAAAtD,KAAA,QAAAC,IAAA,WAAAC,MAAA,eAAAqH,EAAAtI,KAAA,OAeqBuI,YAAW,SAACC,GAC7B,IAAMC,EAAoC,CACxCvB,OAAQ,CACNwB,MAAOJ,EAAK7E,KAAMoB,SAAS,4CAC3B8D,UAAU,EACVC,YAAY,EACZC,UAAW,gBACXC,UAAW,MACXC,SAAU,SAACC,GAAD,OAAcrH,YAAdC,IACM0G,EAAKW,qBAEPX,EAAK7E,KACDuF,EAEZA,EAASE,kBAMnB,OAAIV,EACKC,GAGTA,EAAQvC,UAAY,CAClBwC,MAAOJ,EAAK7E,KAAMoB,SAAS,+CAC3B8D,UAAU,EACVC,YAAY,GAEdH,EAAQU,OAAS,CACfT,MAAOJ,EAAK7E,KAAMoB,SAAS,4CAC3B8D,UAAU,EACVC,YAAY,GAEdH,EAAQW,aAAe,CACrBV,MAAOJ,EAAK7E,KAAMoB,SAChB,kDAEFwE,KAAM,UACNV,UAAU,EACVI,SAAU,SAACO,GAAD,OAAyB3H,YAAzBO,IAEEoG,EAAK7E,KACD6F,KAKXb,OA/DX,CAAA1H,KAAA,SAAAC,IAAA,UAAAC,MAkEE,SAAkBsI,GAChBC,EAAAhJ,EAnESyH,EAmETwB,WAAA,UAAAzJ,MAAAS,KAAAT,KAAcuJ,GAEVA,EAAkBG,IAAI,aACxB1J,KAAK2J,uBAtEX,CAAA5I,KAAA,SAAAC,IAAA,SAAAC,MA0EE,WAA0C,IAAA2I,EAAA5J,KACxC,OAAKA,KAAKyD,MAASzD,KAAKoE,SAIG,YAAvBpE,KAAKoE,SAASE,OAAiD,IAA3BtE,KAAKoE,SAASyF,SAC7ClI,YAAPmI,KAGKnI,YAAPoI,IAEc/J,KAAKyD,KAAKoB,SAClB,2CAIE7E,KAAKyD,KAAKoB,SACV,wDAEuB,YAAvB7E,KAAKoE,SAASE,KACZ3C,YADFqI,IAEYhK,KAAKyD,KAAKoB,SAChB,oDAGJ,GAIK7E,KAAKiK,SAASjK,KAAKwI,QACtBxI,KAAKkK,gBAAgBC,IAAI,SAACjD,GAChC,IAAM8B,EAAWY,EAAKnG,KAAM2G,OAAOlD,GACnC,MAAO,CACLhB,UAAWgB,EACXA,OAAMmD,OAAAC,OAAA,GACDtB,EADC,CAEJE,cAAeqB,YAAiBvB,KAElCG,OAAQqB,YAActD,GACtBkC,aAAcJ,EAAUI,gBAGtB,YAEepJ,KAAKyK,wBAIjB3I,YAAS,CAChB4I,IAAKC,YAAW3K,KAAKyD,QAGdzD,KAAKyD,KAAKoB,SAAS,0CAClB7E,KAAK4K,oBAnDVjJ,YAAPkJ,OA5EN,CAAA9J,KAAA,SAAAC,IAAA,qBAAAC,MAoIE,WDvGmC,IACnCwC,EACAY,EAEMyG,ECoGC9K,KAAKyD,MAASzD,KAAKoE,WAGxBpE,KAAK+K,kBAAoB,GACzB/K,KAAKkK,iBD3GPzG,EC2G+CzD,KAAKyD,KD1GpDY,EC0G0DrE,KAAKgL,QDxGzDF,EAAexD,EAAoBjD,GAClCgG,OAAOY,KAAKxH,EAAK2G,QACrBc,OACC,SAAChE,GAAD,OACG4D,EAAapB,IAAIxC,KACjBrB,EAAiBsF,SAASjE,EAAOkE,MAAM,IAAK,GAAG,MAEnDC,WCxCL,CAAAtK,KAAA,SAAAC,IAAA,0BAAAC,MA4IE,SAAgCqK,GAC9B,IAAMC,EAAmBD,EAAGE,OACtBtE,EAASqE,EAAiBE,GAChC,GAAIF,EAAiBG,SACnB1L,KAAK+K,kBAAkBY,KAAKzE,OACvB,CACL,IAAM0E,EAAQ5L,KAAK+K,kBAAkBc,QAAQ3E,IAC9B,IAAX0E,GACF5L,KAAK+K,kBAAkBe,OAAOF,EAAO,MApJ7C,CAAA7K,KAAA,SAAAC,IAAA,uBAAAC,MAyJE,SAA6BqK,GAC3B,IAAMxE,EAAYwE,EAAGS,OAClBC,QAAQ,MACRC,aAAa,eAChB3J,YAAUtC,KAAM,iBAAkB,CAChC8G,eA9JN,CAAA/F,KAAA,SAAAC,IAAA,qBAAAC,MAkKE,WACEkC,YACEnD,KACAA,KAAKyD,KACLzD,KAAK+K,kBACL/K,KAAKoE,SAAUC,OACfrE,KAAKoE,SAAUgB,cAxKrB,CAAArE,KAAA,MAAAmL,QAAA,EAAAlL,IAAA,SAAAC,MA4KE,WACE,OAAOkL,YAAPC,UA7KmCC","file":"chunk.8aec6ee1e4548f068900.js","sourcesContent":["import { classMap } from \"lit-html/directives/class-map\";\nimport { html, customElement } from \"lit-element\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive.js\";\n\nimport \"@material/mwc-fab\";\nimport { Constructor } from \"../types\";\n// tslint:disable-next-line\nimport { Fab } from \"@material/mwc-fab\";\n// tslint:disable-next-line\nconst MwcFab = customElements.get(\"mwc-fab\") as Constructor<Fab>;\n\n@customElement(\"ha-fab\")\nexport class HaFab extends MwcFab {\n  // We override the render method because we don't have an icon font and mwc-fab doesn't support our svg-icon sets.\n  // Based on version mwc-fab 0.8\n  protected render() {\n    const classes = {\n      \"mdc-fab--mini\": this.mini,\n      \"mdc-fab--exited\": this.exited,\n      \"mdc-fab--extended\": this.extended,\n    };\n    const showLabel = this.label !== \"\" && this.extended;\n    return html`\n      <button\n        .ripple=\"${ripple()}\"\n        class=\"mdc-fab ${classMap(classes)}\"\n        ?disabled=\"${this.disabled}\"\n        aria-label=\"${this.label || this.icon}\"\n      >\n        ${showLabel && this.showIconAtEnd ? this.label : \"\"}\n        ${this.icon\n          ? html`\n              <ha-icon .icon=${this.icon}></ha-icon>\n            `\n          : \"\"}\n        ${showLabel && !this.showIconAtEnd ? this.label : \"\"}\n      </button>\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-fab\": HaFab;\n  }\n}\n","import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\n\nexport interface SelectViewDialogParams {\n  lovelaceConfig: LovelaceConfig;\n  viewSelectedCallback: (view: number) => void;\n}\n\nexport const showSelectViewDialog = (\n  element: HTMLElement,\n  selectViewDialogParams: SelectViewDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-select-view\",\n    dialogImport: () =>\n      import(\n        /* webpackChunkName: \"hui-dialog-select-view\" */ \"./hui-dialog-select-view\"\n      ),\n    dialogParams: selectViewDialogParams,\n  });\n};\n","import { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { LovelaceConfig, LovelaceCardConfig } from \"../../../../data/lovelace\";\n\nexport interface SuggestCardDialogParams {\n  lovelaceConfig?: LovelaceConfig;\n  saveConfig?: (config: LovelaceConfig) => void;\n  path?: [number];\n  entities: string[]; // We can pass entity id's that will be added to the config when a card is picked\n  cardConfig?: LovelaceCardConfig[]; // We can pass a suggested config\n}\n\nconst importsuggestCardDialog = () =>\n  import(\n    /* webpackChunkName: \"hui-dialog-suggest-card\" */ \"./hui-dialog-suggest-card\"\n  );\n\nexport const showSuggestCardDialog = (\n  element: HTMLElement,\n  suggestCardDialogParams: SuggestCardDialogParams\n): void => {\n  fireEvent(element, \"show-dialog\", {\n    dialogTag: \"hui-dialog-suggest-card\",\n    dialogImport: importsuggestCardDialog,\n    dialogParams: suggestCardDialogParams,\n  });\n};\n","import { HomeAssistant } from \"../../../types\";\nimport {\n  LovelaceConfig,\n  fetchConfig,\n  saveConfig,\n} from \"../../../data/lovelace\";\nimport { showSelectViewDialog } from \"./select-view/show-select-view-dialog\";\nimport { showSuggestCardDialog } from \"./card-editor/show-suggest-card-dialog\";\n\nexport const addEntitiesToLovelaceView = async (\n  element: HTMLElement,\n  hass: HomeAssistant,\n  entities: string[],\n  lovelaceConfig?: LovelaceConfig,\n  saveConfigFunc?: (newConfig: LovelaceConfig) => void\n) => {\n  if ((hass!.panels.lovelace?.config as any)?.mode === \"yaml\") {\n    showSuggestCardDialog(element, {\n      entities,\n    });\n    return;\n  }\n  if (!lovelaceConfig) {\n    try {\n      lovelaceConfig = await fetchConfig(hass.connection, false);\n    } catch {\n      alert(\n        hass.localize(\n          \"ui.panel.lovelace.editor.add_entities.generated_unsupported\"\n        )\n      );\n      return;\n    }\n  }\n  showSelectViewDialog(element, {\n    lovelaceConfig,\n    viewSelectedCallback: (view) => {\n      if (!saveConfigFunc) {\n        saveConfigFunc = async (newConfig: LovelaceConfig): Promise<void> => {\n          try {\n            await saveConfig(hass!, newConfig);\n          } catch {\n            alert(\n              hass.localize(\n                \"ui.panel.config.devices.add_entities.saving_failed\"\n              )\n            );\n          }\n        };\n      }\n\n      showSuggestCardDialog(element, {\n        lovelaceConfig: lovelaceConfig!,\n        saveConfig: saveConfigFunc,\n        path: [view],\n        entities,\n      });\n    },\n  });\n};\n","import { LovelaceConfig, ActionConfig } from \"../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../types\";\n\nconst EXCLUDED_DOMAINS = [\"zone\", \"persistent_notification\"];\n\nconst addFromAction = (entities: Set<string>, actionConfig: ActionConfig) => {\n  if (\n    actionConfig.action !== \"call-service\" ||\n    !actionConfig.service_data ||\n    !actionConfig.service_data.entity_id\n  ) {\n    return;\n  }\n  let entityIds = actionConfig.service_data.entity_id;\n  if (!Array.isArray(entityIds)) {\n    entityIds = [entityIds];\n  }\n  for (const entityId of entityIds) {\n    entities.add(entityId);\n  }\n};\n\nconst addEntityId = (entities: Set<string>, entity) => {\n  if (typeof entity === \"string\") {\n    entities.add(entity);\n    return;\n  }\n\n  if (entity.entity) {\n    entities.add(entity.entity);\n  }\n  if (entity.camera_image) {\n    entities.add(entity.camera_image);\n  }\n  if (entity.tap_action) {\n    addFromAction(entities, entity.tap_action);\n  }\n  if (entity.hold_action) {\n    addFromAction(entities, entity.hold_action);\n  }\n};\n\nconst addEntities = (entities: Set<string>, obj) => {\n  if (obj.entity) {\n    addEntityId(entities, obj.entity);\n  }\n  if (obj.entities) {\n    obj.entities.forEach((entity) => addEntityId(entities, entity));\n  }\n  if (obj.card) {\n    addEntities(entities, obj.card);\n  }\n  if (obj.cards) {\n    obj.cards.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.elements) {\n    obj.elements.forEach((card) => addEntities(entities, card));\n  }\n  if (obj.badges) {\n    obj.badges.forEach((badge) => addEntityId(entities, badge));\n  }\n};\n\nconst computeUsedEntities = (config) => {\n  const entities = new Set<string>();\n  config.views.forEach((view) => addEntities(entities, view));\n  return entities;\n};\n\nexport const computeUnusedEntities = (\n  hass: HomeAssistant,\n  config: LovelaceConfig\n): string[] => {\n  const usedEntities = computeUsedEntities(config);\n  return Object.keys(hass.states)\n    .filter(\n      (entity) =>\n        !usedEntities.has(entity) &&\n        !EXCLUDED_DOMAINS.includes(entity.split(\".\", 1)[0])\n    )\n    .sort();\n};\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  PropertyValues,\n  property,\n  customElement,\n  css,\n  CSSResult,\n} from \"lit-element\";\n\nimport { classMap } from \"lit-html/directives/class-map\";\n\nimport memoizeOne from \"memoize-one\";\n\nimport \"../../../../components/ha-fab\";\nimport \"../../../../components/entity/state-badge\";\nimport \"../../../../components/ha-relative-time\";\nimport \"../../../../components/ha-icon\";\n\nimport \"../../../../components/data-table/ha-data-table\";\n// tslint:disable-next-line\nimport {\n  SelectionChangedEvent,\n  DataTableColumnContainer,\n} from \"../../../../components/data-table/ha-data-table\";\n\nimport { computeStateName } from \"../../../../common/entity/compute_state_name\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\n\nimport { computeRTL } from \"../../../../common/util/compute_rtl\";\nimport { computeUnusedEntities } from \"../../common/compute-unused-entities\";\n\nimport { HomeAssistant } from \"../../../../types\";\nimport { Lovelace } from \"../../types\";\nimport { LovelaceConfig } from \"../../../../data/lovelace\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { addEntitiesToLovelaceView } from \"../add-entities-to-view\";\n\n@customElement(\"hui-unused-entities\")\nexport class HuiUnusedEntities extends LitElement {\n  @property() public lovelace?: Lovelace;\n\n  @property() public hass!: HomeAssistant;\n\n  @property() public narrow?: boolean;\n\n  @property() private _unusedEntities: string[] = [];\n\n  private _selectedEntities: string[] = [];\n\n  private get _config(): LovelaceConfig {\n    return this.lovelace!.config;\n  }\n\n  private _columns = memoizeOne((narrow: boolean) => {\n    const columns: DataTableColumnContainer = {\n      entity: {\n        title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity\"),\n        sortable: true,\n        filterable: true,\n        filterKey: \"friendly_name\",\n        direction: \"asc\",\n        template: (stateObj) => html`\n          <div @click=${this._handleEntityClicked} style=\"cursor: pointer;\">\n            <state-badge\n              .hass=${this.hass!}\n              .stateObj=${stateObj}\n            ></state-badge>\n            ${stateObj.friendly_name}\n          </div>\n        `,\n      },\n    };\n\n    if (narrow) {\n      return columns;\n    }\n\n    columns.entity_id = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.entity_id\"),\n      sortable: true,\n      filterable: true,\n    };\n    columns.domain = {\n      title: this.hass!.localize(\"ui.panel.lovelace.unused_entities.domain\"),\n      sortable: true,\n      filterable: true,\n    };\n    columns.last_changed = {\n      title: this.hass!.localize(\n        \"ui.panel.lovelace.unused_entities.last_changed\"\n      ),\n      type: \"numeric\",\n      sortable: true,\n      template: (lastChanged: string) => html`\n        <ha-relative-time\n          .hass=${this.hass!}\n          .datetime=${lastChanged}\n        ></ha-relative-time>\n      `,\n    };\n\n    return columns;\n  });\n\n  protected updated(changedProperties: PropertyValues): void {\n    super.updated(changedProperties);\n\n    if (changedProperties.has(\"lovelace\")) {\n      this._getUnusedEntities();\n    }\n  }\n\n  protected render(): TemplateResult | void {\n    if (!this.hass || !this.lovelace) {\n      return html``;\n    }\n\n    if (this.lovelace.mode === \"storage\" && this.lovelace.editMode === false) {\n      return html``;\n    }\n\n    return html`\n      <ha-card\n        header=\"${this.hass.localize(\n          \"ui.panel.lovelace.unused_entities.title\"\n        )}\"\n      >\n        <div class=\"card-content\">\n          ${this.hass.localize(\n            \"ui.panel.lovelace.unused_entities.available_entities\"\n          )}\n          ${this.lovelace.mode === \"storage\"\n            ? html`\n                <br />${this.hass.localize(\n                  \"ui.panel.lovelace.unused_entities.select_to_add\"\n                )}\n              `\n            : \"\"}\n        </div>\n      </ha-card>\n      <ha-data-table\n        .columns=${this._columns(this.narrow!)}\n        .data=${this._unusedEntities.map((entity) => {\n          const stateObj = this.hass!.states[entity];\n          return {\n            entity_id: entity,\n            entity: {\n              ...stateObj,\n              friendly_name: computeStateName(stateObj),\n            },\n            domain: computeDomain(entity),\n            last_changed: stateObj!.last_changed,\n          };\n        })}\n        .id=${\"entity_id\"}\n        selectable\n        @selection-changed=${this._handleSelectionChanged}\n      ></ha-data-table>\n\n      <ha-fab\n        class=\"${classMap({\n          rtl: computeRTL(this.hass),\n        })}\"\n        icon=\"hass:plus\"\n        label=\"${this.hass.localize(\"ui.panel.lovelace.editor.edit_card.add\")}\"\n        @click=\"${this._addToLovelaceView}\"\n      ></ha-fab>\n    `;\n  }\n\n  private _getUnusedEntities(): void {\n    if (!this.hass || !this.lovelace) {\n      return;\n    }\n    this._selectedEntities = [];\n    this._unusedEntities = computeUnusedEntities(this.hass, this._config!);\n  }\n\n  private _handleSelectionChanged(ev: CustomEvent): void {\n    const changedSelection = ev.detail as SelectionChangedEvent;\n    const entity = changedSelection.id;\n    if (changedSelection.selected) {\n      this._selectedEntities.push(entity);\n    } else {\n      const index = this._selectedEntities.indexOf(entity);\n      if (index !== -1) {\n        this._selectedEntities.splice(index, 1);\n      }\n    }\n  }\n\n  private _handleEntityClicked(ev: Event) {\n    const entityId = (ev.target as HTMLElement)\n      .closest(\"tr\")!\n      .getAttribute(\"data-row-id\")!;\n    fireEvent(this, \"hass-more-info\", {\n      entityId,\n    });\n  }\n\n  private _addToLovelaceView(): void {\n    addEntitiesToLovelaceView(\n      this,\n      this.hass,\n      this._selectedEntities,\n      this.lovelace!.config,\n      this.lovelace!.saveConfig\n    );\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        background: var(--lovelace-background);\n        padding: 16px;\n      }\n      ha-fab {\n        position: sticky;\n        float: right;\n        bottom: 16px;\n        z-index: 1;\n      }\n      ha-fab.rtl {\n        float: left;\n      }\n      ha-card {\n        margin-bottom: 16px;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-unused-entities\": HuiUnusedEntities;\n  }\n}\n"],"sourceRoot":""}